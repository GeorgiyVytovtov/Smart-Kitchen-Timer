
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007254  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08007360  08007360  00008360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800740c  0800740c  00009094  2**0
                  CONTENTS
  4 .ARM          00000000  0800740c  0800740c  00009094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800740c  0800740c  00009094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800740c  0800740c  0000840c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007410  08007410  00008410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08007414  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000098  080074a8  00009098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  080074a8  00009410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dec  00000000  00000000  000090bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386c  00000000  00000000  0001aea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  0001e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e05  00000000  00000000  0001f950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b128  00000000  00000000  00020755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f95  00000000  00000000  0003b87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091278  00000000  00000000  00055812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6a8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ecc  00000000  00000000  000e6ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000eb99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08007348 	.word	0x08007348

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08007348 	.word	0x08007348

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <read_start_stop_button>:

static uint8_t click_count=0;
static uint32_t last_click_time=0;
static StateStartButton pending_state;

StateStartButton read_start_stop_button() {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
	uint8_t button_state = HAL_GPIO_ReadPin(GPIOB, START_STOP_Pin);
 800065a:	2110      	movs	r1, #16
 800065c:	4849      	ldr	r0, [pc, #292]	@ (8000784 <read_start_stop_button+0x130>)
 800065e:	f003 fb3d 	bl	8003cdc <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	73fb      	strb	r3, [r7, #15]

	if (button_state == GPIO_PIN_RESET && !flag_start_stop && !hold_triggered) {
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d116      	bne.n	800069a <read_start_stop_button+0x46>
 800066c:	4b46      	ldr	r3, [pc, #280]	@ (8000788 <read_start_stop_button+0x134>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	f083 0301 	eor.w	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00f      	beq.n	800069a <read_start_stop_button+0x46>
 800067a:	4b44      	ldr	r3, [pc, #272]	@ (800078c <read_start_stop_button+0x138>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	f083 0301 	eor.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d008      	beq.n	800069a <read_start_stop_button+0x46>
		flag_start_stop = true;
 8000688:	4b3f      	ldr	r3, [pc, #252]	@ (8000788 <read_start_stop_button+0x134>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
		T_start_stop = HAL_GetTick();
 800068e:	f001 fffb 	bl	8002688 <HAL_GetTick>
 8000692:	4603      	mov	r3, r0
 8000694:	4a3e      	ldr	r2, [pc, #248]	@ (8000790 <read_start_stop_button+0x13c>)
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	e059      	b.n	800074e <read_start_stop_button+0xfa>
	}

	else if (button_state == GPIO_PIN_SET && flag_start_stop) {
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d133      	bne.n	8000708 <read_start_stop_button+0xb4>
 80006a0:	4b39      	ldr	r3, [pc, #228]	@ (8000788 <read_start_stop_button+0x134>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d02f      	beq.n	8000708 <read_start_stop_button+0xb4>
		uint32_t time_press = HAL_GetTick() - T_start_stop;
 80006a8:	f001 ffee 	bl	8002688 <HAL_GetTick>
 80006ac:	4602      	mov	r2, r0
 80006ae:	4b38      	ldr	r3, [pc, #224]	@ (8000790 <read_start_stop_button+0x13c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	60bb      	str	r3, [r7, #8]
		flag_start_stop = false;
 80006b6:	4b34      	ldr	r3, [pc, #208]	@ (8000788 <read_start_stop_button+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
		hold_triggered = false;
 80006bc:	4b33      	ldr	r3, [pc, #204]	@ (800078c <read_start_stop_button+0x138>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]

		if (time_press > PRESS_TIME && time_press < HOLD_TIME) {
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b32      	cmp	r3, #50	@ 0x32
 80006c6:	d941      	bls.n	800074c <read_start_stop_button+0xf8>
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	f241 3287 	movw	r2, #4999	@ 0x1387
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d83c      	bhi.n	800074c <read_start_stop_button+0xf8>
			click_count++;
 80006d2:	4b30      	ldr	r3, [pc, #192]	@ (8000794 <read_start_stop_button+0x140>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <read_start_stop_button+0x140>)
 80006dc:	701a      	strb	r2, [r3, #0]
			last_click_time = HAL_GetTick();
 80006de:	f001 ffd3 	bl	8002688 <HAL_GetTick>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a2c      	ldr	r2, [pc, #176]	@ (8000798 <read_start_stop_button+0x144>)
 80006e6:	6013      	str	r3, [r2, #0]
			if (click_count >= 2) {
 80006e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <read_start_stop_button+0x140>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d907      	bls.n	8000700 <read_start_stop_button+0xac>
				click_count = 0;
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <read_start_stop_button+0x140>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
				pending_state = NONE_CLICK;
 80006f6:	4b29      	ldr	r3, [pc, #164]	@ (800079c <read_start_stop_button+0x148>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
				return DOUBLE_CLICK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	e03c      	b.n	800077a <read_start_stop_button+0x126>
			}

			pending_state = CLICK;
 8000700:	4b26      	ldr	r3, [pc, #152]	@ (800079c <read_start_stop_button+0x148>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
	else if (button_state == GPIO_PIN_SET && flag_start_stop) {
 8000706:	e021      	b.n	800074c <read_start_stop_button+0xf8>
		}
	}

	else if (button_state == GPIO_PIN_RESET && flag_start_stop
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d11f      	bne.n	800074e <read_start_stop_button+0xfa>
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <read_start_stop_button+0x134>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d01b      	beq.n	800074e <read_start_stop_button+0xfa>
			&& !hold_triggered) {
 8000716:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <read_start_stop_button+0x138>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	f083 0301 	eor.w	r3, r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d014      	beq.n	800074e <read_start_stop_button+0xfa>
		uint32_t time_press = HAL_GetTick() - T_start_stop;
 8000724:	f001 ffb0 	bl	8002688 <HAL_GetTick>
 8000728:	4602      	mov	r2, r0
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <read_start_stop_button+0x13c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	607b      	str	r3, [r7, #4]
		if (time_press >= HOLD_TIME) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000738:	4293      	cmp	r3, r2
 800073a:	d908      	bls.n	800074e <read_start_stop_button+0xfa>
			hold_triggered = true;
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <read_start_stop_button+0x138>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
			pending_state = NONE_CLICK;
 8000742:	4b16      	ldr	r3, [pc, #88]	@ (800079c <read_start_stop_button+0x148>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
			return HOLD;
 8000748:	2303      	movs	r3, #3
 800074a:	e016      	b.n	800077a <read_start_stop_button+0x126>
	else if (button_state == GPIO_PIN_SET && flag_start_stop) {
 800074c:	bf00      	nop
		}
	}

	if (pending_state == CLICK
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <read_start_stop_button+0x148>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d110      	bne.n	8000778 <read_start_stop_button+0x124>
			&& HAL_GetTick() - last_click_time > DOUBLE_CLICK_TIME) {
 8000756:	f001 ff97 	bl	8002688 <HAL_GetTick>
 800075a:	4602      	mov	r2, r0
 800075c:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <read_start_stop_button+0x144>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000766:	d907      	bls.n	8000778 <read_start_stop_button+0x124>
		pending_state = NONE_CLICK;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <read_start_stop_button+0x148>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
		click_count = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <read_start_stop_button+0x140>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
		return CLICK;
 8000774:	2301      	movs	r3, #1
 8000776:	e000      	b.n	800077a <read_start_stop_button+0x126>
	}

	return NONE_CLICK;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40010c00 	.word	0x40010c00
 8000788:	200000d4 	.word	0x200000d4
 800078c:	200000dd 	.word	0x200000dd
 8000790:	200000d8 	.word	0x200000d8
 8000794:	200000e4 	.word	0x200000e4
 8000798:	200000e8 	.word	0x200000e8
 800079c:	200000ec 	.word	0x200000ec

080007a0 <read_reset_button>:

bool read_reset_button() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOB, RESET_Pin) == 0) && !flag_reset
 80007a4:	2120      	movs	r1, #32
 80007a6:	481f      	ldr	r0, [pc, #124]	@ (8000824 <read_reset_button+0x84>)
 80007a8:	f003 fa98 	bl	8003cdc <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d118      	bne.n	80007e4 <read_reset_button+0x44>
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <read_reset_button+0x88>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	f083 0301 	eor.w	r3, r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d011      	beq.n	80007e4 <read_reset_button+0x44>
			&& (HAL_GetTick() - T_reset) > PRESS_TIME) {
 80007c0:	f001 ff62 	bl	8002688 <HAL_GetTick>
 80007c4:	4602      	mov	r2, r0
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <read_reset_button+0x8c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	2b32      	cmp	r3, #50	@ 0x32
 80007ce:	d909      	bls.n	80007e4 <read_reset_button+0x44>
		flag_reset = true;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <read_reset_button+0x88>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
		T_reset = HAL_GetTick();
 80007d6:	f001 ff57 	bl	8002688 <HAL_GetTick>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a13      	ldr	r2, [pc, #76]	@ (800082c <read_reset_button+0x8c>)
 80007de:	6013      	str	r3, [r2, #0]
		return true;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e01d      	b.n	8000820 <read_reset_button+0x80>
	} else if ((HAL_GPIO_ReadPin(GPIOB, RESET_Pin) == 1) && flag_reset
 80007e4:	2120      	movs	r1, #32
 80007e6:	480f      	ldr	r0, [pc, #60]	@ (8000824 <read_reset_button+0x84>)
 80007e8:	f003 fa78 	bl	8003cdc <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d115      	bne.n	800081e <read_reset_button+0x7e>
 80007f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <read_reset_button+0x88>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d011      	beq.n	800081e <read_reset_button+0x7e>
			&& (HAL_GetTick() - T_reset) > PRESS_TIME) {
 80007fa:	f001 ff45 	bl	8002688 <HAL_GetTick>
 80007fe:	4602      	mov	r2, r0
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <read_reset_button+0x8c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	2b32      	cmp	r3, #50	@ 0x32
 8000808:	d909      	bls.n	800081e <read_reset_button+0x7e>
		flag_reset = false;
 800080a:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <read_reset_button+0x88>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
		T_reset = HAL_GetTick();
 8000810:	f001 ff3a 	bl	8002688 <HAL_GetTick>
 8000814:	4603      	mov	r3, r0
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <read_reset_button+0x8c>)
 8000818:	6013      	str	r3, [r2, #0]
		return false;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <read_reset_button+0x80>
	}
	return false;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40010c00 	.word	0x40010c00
 8000828:	200000dc 	.word	0x200000dc
 800082c:	200000e0 	.word	0x200000e0

08000830 <read_up_button>:

bool read_up_button() {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOB, UP_Pin) == 0) && !flag_up
 8000834:	2101      	movs	r1, #1
 8000836:	481f      	ldr	r0, [pc, #124]	@ (80008b4 <read_up_button+0x84>)
 8000838:	f003 fa50 	bl	8003cdc <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d118      	bne.n	8000874 <read_up_button+0x44>
 8000842:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <read_up_button+0x88>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	f083 0301 	eor.w	r3, r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d011      	beq.n	8000874 <read_up_button+0x44>
			&& (HAL_GetTick() - T_up) > PRESS_TIME) {
 8000850:	f001 ff1a 	bl	8002688 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <read_up_button+0x8c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	2b32      	cmp	r3, #50	@ 0x32
 800085e:	d909      	bls.n	8000874 <read_up_button+0x44>
		flag_up = true;
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <read_up_button+0x88>)
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
		T_up = HAL_GetTick();
 8000866:	f001 ff0f 	bl	8002688 <HAL_GetTick>
 800086a:	4603      	mov	r3, r0
 800086c:	4a13      	ldr	r2, [pc, #76]	@ (80008bc <read_up_button+0x8c>)
 800086e:	6013      	str	r3, [r2, #0]
		return true;
 8000870:	2301      	movs	r3, #1
 8000872:	e01d      	b.n	80008b0 <read_up_button+0x80>
	} else if ((HAL_GPIO_ReadPin(GPIOB, UP_Pin) == 1) && flag_up
 8000874:	2101      	movs	r1, #1
 8000876:	480f      	ldr	r0, [pc, #60]	@ (80008b4 <read_up_button+0x84>)
 8000878:	f003 fa30 	bl	8003cdc <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	2b01      	cmp	r3, #1
 8000880:	d115      	bne.n	80008ae <read_up_button+0x7e>
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <read_up_button+0x88>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d011      	beq.n	80008ae <read_up_button+0x7e>
			&& (HAL_GetTick() - T_up) > PRESS_TIME) {
 800088a:	f001 fefd 	bl	8002688 <HAL_GetTick>
 800088e:	4602      	mov	r2, r0
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <read_up_button+0x8c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	2b32      	cmp	r3, #50	@ 0x32
 8000898:	d909      	bls.n	80008ae <read_up_button+0x7e>
		flag_up = false;
 800089a:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <read_up_button+0x88>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
		T_up = HAL_GetTick();
 80008a0:	f001 fef2 	bl	8002688 <HAL_GetTick>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <read_up_button+0x8c>)
 80008a8:	6013      	str	r3, [r2, #0]
		return false;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <read_up_button+0x80>
	}
	return false;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	200000b4 	.word	0x200000b4
 80008bc:	200000b8 	.word	0x200000b8

080008c0 <read_down_button>:

bool read_down_button() {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOB, DOWN_Pin) == 0) && !flag_down
 80008c4:	2102      	movs	r1, #2
 80008c6:	481f      	ldr	r0, [pc, #124]	@ (8000944 <read_down_button+0x84>)
 80008c8:	f003 fa08 	bl	8003cdc <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d118      	bne.n	8000904 <read_down_button+0x44>
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <read_down_button+0x88>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	f083 0301 	eor.w	r3, r3, #1
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d011      	beq.n	8000904 <read_down_button+0x44>
			&& (HAL_GetTick() - T_down) > PRESS_TIME) {
 80008e0:	f001 fed2 	bl	8002688 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	4b19      	ldr	r3, [pc, #100]	@ (800094c <read_down_button+0x8c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	2b32      	cmp	r3, #50	@ 0x32
 80008ee:	d909      	bls.n	8000904 <read_down_button+0x44>
		flag_down = true;
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <read_down_button+0x88>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
		T_down = HAL_GetTick();
 80008f6:	f001 fec7 	bl	8002688 <HAL_GetTick>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a13      	ldr	r2, [pc, #76]	@ (800094c <read_down_button+0x8c>)
 80008fe:	6013      	str	r3, [r2, #0]
		return true;
 8000900:	2301      	movs	r3, #1
 8000902:	e01d      	b.n	8000940 <read_down_button+0x80>
	} else if ((HAL_GPIO_ReadPin(GPIOB, DOWN_Pin) == 1) && flag_down
 8000904:	2102      	movs	r1, #2
 8000906:	480f      	ldr	r0, [pc, #60]	@ (8000944 <read_down_button+0x84>)
 8000908:	f003 f9e8 	bl	8003cdc <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
 800090e:	2b01      	cmp	r3, #1
 8000910:	d115      	bne.n	800093e <read_down_button+0x7e>
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <read_down_button+0x88>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d011      	beq.n	800093e <read_down_button+0x7e>
			&& (HAL_GetTick() - T_down) > PRESS_TIME) {
 800091a:	f001 feb5 	bl	8002688 <HAL_GetTick>
 800091e:	4602      	mov	r2, r0
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <read_down_button+0x8c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	2b32      	cmp	r3, #50	@ 0x32
 8000928:	d909      	bls.n	800093e <read_down_button+0x7e>
		flag_down = false;
 800092a:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <read_down_button+0x88>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
		T_down = HAL_GetTick();
 8000930:	f001 feaa 	bl	8002688 <HAL_GetTick>
 8000934:	4603      	mov	r3, r0
 8000936:	4a05      	ldr	r2, [pc, #20]	@ (800094c <read_down_button+0x8c>)
 8000938:	6013      	str	r3, [r2, #0]
		return false;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <read_down_button+0x80>
	}
	return false;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40010c00 	.word	0x40010c00
 8000948:	200000bc 	.word	0x200000bc
 800094c:	200000c0 	.word	0x200000c0

08000950 <read_left_button>:

bool read_left_button() {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOB, LEFT_Pin) == 0) && !flag_left
 8000954:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000958:	481f      	ldr	r0, [pc, #124]	@ (80009d8 <read_left_button+0x88>)
 800095a:	f003 f9bf 	bl	8003cdc <HAL_GPIO_ReadPin>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d118      	bne.n	8000996 <read_left_button+0x46>
 8000964:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <read_left_button+0x8c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	f083 0301 	eor.w	r3, r3, #1
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d011      	beq.n	8000996 <read_left_button+0x46>
			&& (HAL_GetTick() - T_left) > PRESS_TIME) {
 8000972:	f001 fe89 	bl	8002688 <HAL_GetTick>
 8000976:	4602      	mov	r2, r0
 8000978:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <read_left_button+0x90>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	2b32      	cmp	r3, #50	@ 0x32
 8000980:	d909      	bls.n	8000996 <read_left_button+0x46>
		flag_left = true;
 8000982:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <read_left_button+0x8c>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
		T_left = HAL_GetTick();
 8000988:	f001 fe7e 	bl	8002688 <HAL_GetTick>
 800098c:	4603      	mov	r3, r0
 800098e:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <read_left_button+0x90>)
 8000990:	6013      	str	r3, [r2, #0]
		return true;
 8000992:	2301      	movs	r3, #1
 8000994:	e01e      	b.n	80009d4 <read_left_button+0x84>
	} else if ((HAL_GPIO_ReadPin(GPIOB, LEFT_Pin) == 1) && flag_left
 8000996:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800099a:	480f      	ldr	r0, [pc, #60]	@ (80009d8 <read_left_button+0x88>)
 800099c:	f003 f99e 	bl	8003cdc <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d115      	bne.n	80009d2 <read_left_button+0x82>
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <read_left_button+0x8c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d011      	beq.n	80009d2 <read_left_button+0x82>
			&& (HAL_GetTick() - T_left) > PRESS_TIME) {
 80009ae:	f001 fe6b 	bl	8002688 <HAL_GetTick>
 80009b2:	4602      	mov	r2, r0
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <read_left_button+0x90>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	2b32      	cmp	r3, #50	@ 0x32
 80009bc:	d909      	bls.n	80009d2 <read_left_button+0x82>
		flag_left = false;
 80009be:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <read_left_button+0x8c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
		T_left = HAL_GetTick();
 80009c4:	f001 fe60 	bl	8002688 <HAL_GetTick>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <read_left_button+0x90>)
 80009cc:	6013      	str	r3, [r2, #0]
		return false;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <read_left_button+0x84>
	}
	return false;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40010c00 	.word	0x40010c00
 80009dc:	200000c4 	.word	0x200000c4
 80009e0:	200000c8 	.word	0x200000c8

080009e4 <read_right_button>:

bool read_right_button() {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOB, RIGHT_Pin) == 0) && !flag_right
 80009e8:	2108      	movs	r1, #8
 80009ea:	481f      	ldr	r0, [pc, #124]	@ (8000a68 <read_right_button+0x84>)
 80009ec:	f003 f976 	bl	8003cdc <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d118      	bne.n	8000a28 <read_right_button+0x44>
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <read_right_button+0x88>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	f083 0301 	eor.w	r3, r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d011      	beq.n	8000a28 <read_right_button+0x44>
			&& (HAL_GetTick() - T_right) > PRESS_TIME) {
 8000a04:	f001 fe40 	bl	8002688 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <read_right_button+0x8c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	2b32      	cmp	r3, #50	@ 0x32
 8000a12:	d909      	bls.n	8000a28 <read_right_button+0x44>
		flag_right = true;
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <read_right_button+0x88>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
		T_right = HAL_GetTick();
 8000a1a:	f001 fe35 	bl	8002688 <HAL_GetTick>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4a13      	ldr	r2, [pc, #76]	@ (8000a70 <read_right_button+0x8c>)
 8000a22:	6013      	str	r3, [r2, #0]
		return true;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e01d      	b.n	8000a64 <read_right_button+0x80>
	} else if ((HAL_GPIO_ReadPin(GPIOB, RIGHT_Pin) == 1) && flag_right
 8000a28:	2108      	movs	r1, #8
 8000a2a:	480f      	ldr	r0, [pc, #60]	@ (8000a68 <read_right_button+0x84>)
 8000a2c:	f003 f956 	bl	8003cdc <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d115      	bne.n	8000a62 <read_right_button+0x7e>
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <read_right_button+0x88>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d011      	beq.n	8000a62 <read_right_button+0x7e>
			&& (HAL_GetTick() - T_right) > PRESS_TIME) {
 8000a3e:	f001 fe23 	bl	8002688 <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <read_right_button+0x8c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b32      	cmp	r3, #50	@ 0x32
 8000a4c:	d909      	bls.n	8000a62 <read_right_button+0x7e>
		flag_right = false;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <read_right_button+0x88>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
		T_right = HAL_GetTick();
 8000a54:	f001 fe18 	bl	8002688 <HAL_GetTick>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <read_right_button+0x8c>)
 8000a5c:	6013      	str	r3, [r2, #0]
		return false;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <read_right_button+0x80>
	}
	return false;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40010c00 	.word	0x40010c00
 8000a6c:	200000cc 	.word	0x200000cc
 8000a70:	200000d0 	.word	0x200000d0

08000a74 <buzzer_init>:
static uint32_t buzzer_work_time = 0;
static TypeSignal currentSignal;
static TIM_HandleTypeDef* htim1;

void buzzer_init(TIM_HandleTypeDef* htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	htim1=htim;
 8000a7c:	4a07      	ldr	r2, [pc, #28]	@ (8000a9c <buzzer_init+0x28>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8000a82:	210c      	movs	r1, #12
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f005 f947 	bl	8005d18 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_4, BUZZER_PWM_OFF);
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <buzzer_init+0x28>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2200      	movs	r2, #0
 8000a92:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000100 	.word	0x20000100

08000aa0 <buzzer_start>:

void buzzer_start(uint32_t time_signal, TypeSignal typeSignal) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]
	currentSignal = typeSignal;
 8000aac:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <buzzer_start+0x48>)
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	7013      	strb	r3, [r2, #0]
	is_start_timer_time = true;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <buzzer_start+0x4c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
	buzzer_work_time = time_signal;
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <buzzer_start+0x50>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
	buzzer_start_time = HAL_GetTick();
 8000abe:	f001 fde3 	bl	8002688 <HAL_GetTick>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8000af4 <buzzer_start+0x54>)
 8000ac6:	6013      	str	r3, [r2, #0]
	buzzer_trigg_time = HAL_GetTick();
 8000ac8:	f001 fdde 	bl	8002688 <HAL_GetTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <buzzer_start+0x58>)
 8000ad0:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_4, SINGL_FRIQUANSY);
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <buzzer_start+0x5c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000adc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000fc 	.word	0x200000fc
 8000aec:	200000ed 	.word	0x200000ed
 8000af0:	200000f8 	.word	0x200000f8
 8000af4:	200000f0 	.word	0x200000f0
 8000af8:	200000f4 	.word	0x200000f4
 8000afc:	20000100 	.word	0x20000100

08000b00 <buzzer_update>:

void buzzer_update() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	switch(currentSignal)
 8000b04:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <buzzer_update+0x94>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d016      	beq.n	8000b3a <buzzer_update+0x3a>
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	dc3e      	bgt.n	8000b8e <buzzer_update+0x8e>
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d037      	beq.n	8000b84 <buzzer_update+0x84>
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d13a      	bne.n	8000b8e <buzzer_update+0x8e>
	{
	case SINGL:
		if (is_start_timer_time
 8000b18:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <buzzer_update+0x98>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d033      	beq.n	8000b88 <buzzer_update+0x88>
				&& HAL_GetTick() - buzzer_start_time > buzzer_work_time) {
 8000b20:	f001 fdb2 	bl	8002688 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <buzzer_update+0x9c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1ad2      	subs	r2, r2, r3
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <buzzer_update+0xa0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d929      	bls.n	8000b88 <buzzer_update+0x88>
			buzzer_reset();
 8000b34:	f000 f83c 	bl	8000bb0 <buzzer_reset>
		}
		break;
 8000b38:	e026      	b.n	8000b88 <buzzer_update+0x88>
	case TRIGGER:
		static uint8_t i = 1;
		if(HAL_GetTick()-buzzer_trigg_time>TRIG_TIME_PAUSE)
 8000b3a:	f001 fda5 	bl	8002688 <HAL_GetTick>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <buzzer_update+0xa4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	2b64      	cmp	r3, #100	@ 0x64
 8000b48:	d920      	bls.n	8000b8c <buzzer_update+0x8c>
		{
			__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_4, TRIG_START_SINGL_FRIQUANSY*i);
 8000b4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <buzzer_update+0xa8>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000b54:	fb03 f202 	mul.w	r2, r3, r2
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <buzzer_update+0xac>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	641a      	str	r2, [r3, #64]	@ 0x40
			i = (i==3) ? 0 : i+1;
 8000b60:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <buzzer_update+0xa8>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d004      	beq.n	8000b72 <buzzer_update+0x72>
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <buzzer_update+0xa8>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	e000      	b.n	8000b74 <buzzer_update+0x74>
 8000b72:	2300      	movs	r3, #0
 8000b74:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba8 <buzzer_update+0xa8>)
 8000b76:	7013      	strb	r3, [r2, #0]
			buzzer_trigg_time= HAL_GetTick();
 8000b78:	f001 fd86 	bl	8002688 <HAL_GetTick>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ba4 <buzzer_update+0xa4>)
 8000b80:	6013      	str	r3, [r2, #0]
		}
		break;
 8000b82:	e003      	b.n	8000b8c <buzzer_update+0x8c>
	case NONE:
		break;
 8000b84:	bf00      	nop
 8000b86:	e002      	b.n	8000b8e <buzzer_update+0x8e>
		break;
 8000b88:	bf00      	nop
 8000b8a:	e000      	b.n	8000b8e <buzzer_update+0x8e>
		break;
 8000b8c:	bf00      	nop
	}
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000fc 	.word	0x200000fc
 8000b98:	200000ed 	.word	0x200000ed
 8000b9c:	200000f0 	.word	0x200000f0
 8000ba0:	200000f8 	.word	0x200000f8
 8000ba4:	200000f4 	.word	0x200000f4
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000100 	.word	0x20000100

08000bb0 <buzzer_reset>:

void buzzer_reset() {
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_4, BUZZER_PWM_OFF);
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <buzzer_reset+0x24>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	641a      	str	r2, [r3, #64]	@ 0x40
	is_start_timer_time = false;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <buzzer_reset+0x28>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
	currentSignal = NONE;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <buzzer_reset+0x2c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000100 	.word	0x20000100
 8000bd8:	200000ed 	.word	0x200000ed
 8000bdc:	200000fc 	.word	0x200000fc

08000be0 <read_time>:
static int (*temperature_filter)(SensorValue *val) = filter_ema;
static int (*humidity_filter)(SensorValue *val) = filter_ema;
static uint8_t cr_pos, pos, hr, mn;
static ModeTimer current_mode_timer, previos_mode_timer;

void read_time() {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	static uint32_t last_read_time = 0;
	if ((HAL_GetTick() - last_read_time > 10000)
 8000be4:	f001 fd50 	bl	8002688 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <read_time+0x38>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d90c      	bls.n	8000c12 <read_time+0x32>
			&& current_mode_timer != SETTINGS_CURRENT_TIME) {
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <read_time+0x3c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b03      	cmp	r3, #3
 8000bfe:	d008      	beq.n	8000c12 <read_time+0x32>
		ds3231_read_time(&hr, &mn);
 8000c00:	4907      	ldr	r1, [pc, #28]	@ (8000c20 <read_time+0x40>)
 8000c02:	4808      	ldr	r0, [pc, #32]	@ (8000c24 <read_time+0x44>)
 8000c04:	f000 fa04 	bl	8001010 <ds3231_read_time>
		last_read_time = HAL_GetTick();
 8000c08:	f001 fd3e 	bl	8002688 <HAL_GetTick>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a02      	ldr	r2, [pc, #8]	@ (8000c18 <read_time+0x38>)
 8000c10:	6013      	str	r3, [r2, #0]
	}
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000010c 	.word	0x2000010c
 8000c1c:	20000108 	.word	0x20000108
 8000c20:	20000107 	.word	0x20000107
 8000c24:	20000106 	.word	0x20000106

08000c28 <get_sensor_data>:

void get_sensor_data() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	sht31_start_mesurement();
 8000c2c:	f001 f80e 	bl	8001c4c <sht31_start_mesurement>
	if (SHT31_read_temp_humidity(&temperature.current_value,
 8000c30:	4908      	ldr	r1, [pc, #32]	@ (8000c54 <get_sensor_data+0x2c>)
 8000c32:	4809      	ldr	r0, [pc, #36]	@ (8000c58 <get_sensor_data+0x30>)
 8000c34:	f001 f856 	bl	8001ce4 <SHT31_read_temp_humidity>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <get_sensor_data+0x26>
			&humidity.current_value)) {
		temperature_filter(&temperature);
 8000c3e:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <get_sensor_data+0x34>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <get_sensor_data+0x38>)
 8000c44:	4798      	blx	r3
		humidity_filter(&humidity);
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <get_sensor_data+0x3c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4807      	ldr	r0, [pc, #28]	@ (8000c68 <get_sensor_data+0x40>)
 8000c4c:	4798      	blx	r3
	}
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000014 	.word	0x20000014
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	2000002c 	.word	0x2000002c
 8000c60:	20000004 	.word	0x20000004
 8000c64:	20000030 	.word	0x20000030
 8000c68:	20000010 	.word	0x20000010

08000c6c <timer_control>:

void timer_control() {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	current_mode_timer = timer_start_stop();
 8000c70:	f001 faa0 	bl	80021b4 <timer_start_stop>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <timer_control+0x6c>)
 8000c7a:	701a      	strb	r2, [r3, #0]
	if(previos_mode_timer!=current_mode_timer && previos_mode_timer==SETTINGS_CURRENT_TIME)
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <timer_control+0x70>)
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <timer_control+0x6c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d00b      	beq.n	8000ca0 <timer_control+0x34>
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <timer_control+0x70>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d107      	bne.n	8000ca0 <timer_control+0x34>
	{
		ds3231_set_time(hr, mn);
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <timer_control+0x74>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4a13      	ldr	r2, [pc, #76]	@ (8000ce4 <timer_control+0x78>)
 8000c96:	7812      	ldrb	r2, [r2, #0]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f9fe 	bl	800109c <ds3231_set_time>
	}
	previos_mode_timer=current_mode_timer;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <timer_control+0x6c>)
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <timer_control+0x70>)
 8000ca6:	701a      	strb	r2, [r3, #0]
	if (current_mode_timer == SETTINGS_TIMER) {
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <timer_control+0x6c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d103      	bne.n	8000cb8 <timer_control+0x4c>
		timer_settings(&pos);
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <timer_control+0x7c>)
 8000cb2:	f001 fb31 	bl	8002318 <timer_settings>
 8000cb6:	e008      	b.n	8000cca <timer_control+0x5e>
	} else if (current_mode_timer == SETTINGS_CURRENT_TIME) {
 8000cb8:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <timer_control+0x6c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d104      	bne.n	8000cca <timer_control+0x5e>
		settings_current_time(&cr_pos, &hr, &mn);
 8000cc0:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <timer_control+0x78>)
 8000cc2:	4907      	ldr	r1, [pc, #28]	@ (8000ce0 <timer_control+0x74>)
 8000cc4:	4809      	ldr	r0, [pc, #36]	@ (8000cec <timer_control+0x80>)
 8000cc6:	f001 fb9b 	bl	8002400 <settings_current_time>
	}
	timer_reset();
 8000cca:	f001 fb01 	bl	80022d0 <timer_reset>
	buzzer_update();
 8000cce:	f7ff ff17 	bl	8000b00 <buzzer_update>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000108 	.word	0x20000108
 8000cdc:	20000109 	.word	0x20000109
 8000ce0:	20000106 	.word	0x20000106
 8000ce4:	20000107 	.word	0x20000107
 8000ce8:	20000105 	.word	0x20000105
 8000cec:	20000104 	.word	0x20000104

08000cf0 <alarm_control>:

void alarm_control() {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	mq2_start_measurement();
 8000cf4:	f000 ff08 	bl	8001b08 <mq2_start_measurement>
	if (is_ready_data()) {
 8000cf8:	f000 ff20 	bl	8001b3c <is_ready_data>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d016      	beq.n	8000d30 <alarm_control+0x40>
		mq2_val.current_value = mq2_get_data();
 8000d02:	f000 ff27 	bl	8001b54 <mq2_get_data>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <alarm_control+0x44>)
 8000d0c:	605a      	str	r2, [r3, #4]
		gaz_filter(&mq2_val);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <alarm_control+0x48>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4808      	ldr	r0, [pc, #32]	@ (8000d34 <alarm_control+0x44>)
 8000d14:	4798      	blx	r3
		if (mq2_is_alarm(mq2_val)) {
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <alarm_control+0x44>)
 8000d18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d1c:	f000 ff2a 	bl	8001b74 <mq2_is_alarm>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <alarm_control+0x40>
			buzzer_start(10000, TRIGGER);
 8000d26:	2102      	movs	r1, #2
 8000d28:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000d2c:	f7ff feb8 	bl	8000aa0 <buzzer_start>
		}
	}
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000001c 	.word	0x2000001c
 8000d38:	20000028 	.word	0x20000028

08000d3c <display_update>:

void display_update() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
	static uint32_t last_display_update = 0;
	if (HAL_GetTick() - last_display_update > 100) {
 8000d42:	f001 fca1 	bl	8002688 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <display_update+0x8c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b64      	cmp	r3, #100	@ 0x64
 8000d50:	d936      	bls.n	8000dc0 <display_update+0x84>
		uint32_t time = get_timer_time();
 8000d52:	f001 fbd7 	bl	8002504 <get_timer_time>
 8000d56:	6078      	str	r0, [r7, #4]
		if (current_mode_timer == SETTINGS_TIMER) {
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <display_update+0x90>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d108      	bne.n	8000d72 <display_update+0x36>
			view_blink_timer_time(pos, time);
 8000d60:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <display_update+0x94>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	b292      	uxth	r2, r2
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f872 	bl	8000e54 <view_blink_timer_time>
 8000d70:	e002      	b.n	8000d78 <display_update+0x3c>
		} else {
			view_timer_time(time);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f8f0 	bl	8000f58 <view_timer_time>
		}
		if (current_mode_timer == SETTINGS_CURRENT_TIME) {
 8000d78:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <display_update+0x90>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d109      	bne.n	8000d94 <display_update+0x58>
			view_blink_current_time(cr_pos, hr, mn);
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <display_update+0x98>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <display_update+0x9c>)
 8000d86:	7811      	ldrb	r1, [r2, #0]
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <display_update+0xa0>)
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 f82b 	bl	8000de8 <view_blink_current_time>
 8000d92:	e007      	b.n	8000da4 <display_update+0x68>
		} else {
			view_current_time(hr, mn);
 8000d94:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <display_update+0x9c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4a10      	ldr	r2, [pc, #64]	@ (8000ddc <display_update+0xa0>)
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f8ba 	bl	8000f18 <view_current_time>
		}
		view_temperature(temperature.filt_value, humidity.filt_value);
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <display_update+0xa4>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <display_update+0xa8>)
 8000daa:	6892      	ldr	r2, [r2, #8]
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 f891 	bl	8000ed8 <view_temperature>
		last_display_update = HAL_GetTick();
 8000db6:	f001 fc67 	bl	8002688 <HAL_GetTick>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a02      	ldr	r2, [pc, #8]	@ (8000dc8 <display_update+0x8c>)
 8000dbe:	6013      	str	r3, [r2, #0]
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000110 	.word	0x20000110
 8000dcc:	20000108 	.word	0x20000108
 8000dd0:	20000105 	.word	0x20000105
 8000dd4:	20000104 	.word	0x20000104
 8000dd8:	20000106 	.word	0x20000106
 8000ddc:	20000107 	.word	0x20000107
 8000de0:	20000004 	.word	0x20000004
 8000de4:	20000010 	.word	0x20000010

08000de8 <view_blink_current_time>:
#include "display.h"

void view_blink_current_time(uint8_t segment, uint8_t hr, uint8_t mn) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	460b      	mov	r3, r1
 8000df4:	71bb      	strb	r3, [r7, #6]
 8000df6:	4613      	mov	r3, r2
 8000df8:	717b      	strb	r3, [r7, #5]
	switch (segment) {
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <view_blink_current_time+0x1e>
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d010      	beq.n	8000e26 <view_blink_current_time+0x3e>
		lcd_set_position(LCD_ADDR, 0, 0);
		lcd_send_string(LCD_ADDR, "  ");
		view_current_time(hr, mn);
		break;
	}
}
 8000e04:	e01f      	b.n	8000e46 <view_blink_current_time+0x5e>
		lcd_set_position(LCD_ADDR, 3, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2103      	movs	r1, #3
 8000e0a:	204e      	movs	r0, #78	@ 0x4e
 8000e0c:	f000 fc04 	bl	8001618 <lcd_set_position>
		lcd_send_string(LCD_ADDR, "  ");
 8000e10:	490f      	ldr	r1, [pc, #60]	@ (8000e50 <view_blink_current_time+0x68>)
 8000e12:	204e      	movs	r0, #78	@ 0x4e
 8000e14:	f000 fbe6 	bl	80015e4 <lcd_send_string>
		view_current_time(hr, mn);
 8000e18:	797a      	ldrb	r2, [r7, #5]
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f87a 	bl	8000f18 <view_current_time>
		break;
 8000e24:	e00f      	b.n	8000e46 <view_blink_current_time+0x5e>
		lcd_set_position(LCD_ADDR, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	204e      	movs	r0, #78	@ 0x4e
 8000e2c:	f000 fbf4 	bl	8001618 <lcd_set_position>
		lcd_send_string(LCD_ADDR, "  ");
 8000e30:	4907      	ldr	r1, [pc, #28]	@ (8000e50 <view_blink_current_time+0x68>)
 8000e32:	204e      	movs	r0, #78	@ 0x4e
 8000e34:	f000 fbd6 	bl	80015e4 <lcd_send_string>
		view_current_time(hr, mn);
 8000e38:	797a      	ldrb	r2, [r7, #5]
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f86a 	bl	8000f18 <view_current_time>
		break;
 8000e44:	bf00      	nop
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08007360 	.word	0x08007360

08000e54 <view_blink_timer_time>:


void view_blink_timer_time(uint8_t sigment, uint16_t time)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	80bb      	strh	r3, [r7, #4]
	switch(sigment)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d022      	beq.n	8000eb0 <view_blink_timer_time+0x5c>
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	dc2e      	bgt.n	8000ecc <view_blink_timer_time+0x78>
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <view_blink_timer_time+0x24>
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d00e      	beq.n	8000e94 <view_blink_timer_time+0x40>
		lcd_set_position(LCD_ADDR, 4, 1);
		lcd_send_string(LCD_ADDR, "  ");
		view_timer_time(time);
		break;
	}
}
 8000e76:	e029      	b.n	8000ecc <view_blink_timer_time+0x78>
		lcd_set_position(LCD_ADDR, 10, 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	210a      	movs	r1, #10
 8000e7c:	204e      	movs	r0, #78	@ 0x4e
 8000e7e:	f000 fbcb 	bl	8001618 <lcd_set_position>
		lcd_send_string(LCD_ADDR, "  ");
 8000e82:	4914      	ldr	r1, [pc, #80]	@ (8000ed4 <view_blink_timer_time+0x80>)
 8000e84:	204e      	movs	r0, #78	@ 0x4e
 8000e86:	f000 fbad 	bl	80015e4 <lcd_send_string>
		view_timer_time(time);
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f863 	bl	8000f58 <view_timer_time>
		break;
 8000e92:	e01b      	b.n	8000ecc <view_blink_timer_time+0x78>
		lcd_set_position(LCD_ADDR, 7, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2107      	movs	r1, #7
 8000e98:	204e      	movs	r0, #78	@ 0x4e
 8000e9a:	f000 fbbd 	bl	8001618 <lcd_set_position>
		lcd_send_string(LCD_ADDR, "  ");
 8000e9e:	490d      	ldr	r1, [pc, #52]	@ (8000ed4 <view_blink_timer_time+0x80>)
 8000ea0:	204e      	movs	r0, #78	@ 0x4e
 8000ea2:	f000 fb9f 	bl	80015e4 <lcd_send_string>
		view_timer_time(time);
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f855 	bl	8000f58 <view_timer_time>
		break;
 8000eae:	e00d      	b.n	8000ecc <view_blink_timer_time+0x78>
		lcd_set_position(LCD_ADDR, 4, 1);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	204e      	movs	r0, #78	@ 0x4e
 8000eb6:	f000 fbaf 	bl	8001618 <lcd_set_position>
		lcd_send_string(LCD_ADDR, "  ");
 8000eba:	4906      	ldr	r1, [pc, #24]	@ (8000ed4 <view_blink_timer_time+0x80>)
 8000ebc:	204e      	movs	r0, #78	@ 0x4e
 8000ebe:	f000 fb91 	bl	80015e4 <lcd_send_string>
		view_timer_time(time);
 8000ec2:	88bb      	ldrh	r3, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f847 	bl	8000f58 <view_timer_time>
		break;
 8000eca:	bf00      	nop
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	08007360 	.word	0x08007360

08000ed8 <view_temperature>:

void view_temperature(int temperature, uint8_t humidity)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	@ 0x30
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
	char data[30];
	sprintf(data, "%d%cC,%d%%", temperature, 0xDF, humidity);
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	f107 0008 	add.w	r0, r7, #8
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	23df      	movs	r3, #223	@ 0xdf
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <view_temperature+0x3c>)
 8000ef2:	f005 fd79 	bl	80069e8 <siprintf>
	lcd_set_position(LCD_ADDR, 7, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2107      	movs	r1, #7
 8000efa:	204e      	movs	r0, #78	@ 0x4e
 8000efc:	f000 fb8c 	bl	8001618 <lcd_set_position>
	lcd_send_string(LCD_ADDR, data);
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	4619      	mov	r1, r3
 8000f06:	204e      	movs	r0, #78	@ 0x4e
 8000f08:	f000 fb6c 	bl	80015e4 <lcd_send_string>
}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	@ 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	08007364 	.word	0x08007364

08000f18 <view_current_time>:

void view_current_time(uint8_t hr, uint8_t mn) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	4613      	mov	r3, r2
 8000f26:	71bb      	strb	r3, [r7, #6]
	char data[6];
	sprintf(data, "%02d:%02d", hr, mn);
 8000f28:	79fa      	ldrb	r2, [r7, #7]
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	f107 0008 	add.w	r0, r7, #8
 8000f30:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <view_current_time+0x3c>)
 8000f32:	f005 fd59 	bl	80069e8 <siprintf>
	lcd_set_position(LCD_ADDR, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	204e      	movs	r0, #78	@ 0x4e
 8000f3c:	f000 fb6c 	bl	8001618 <lcd_set_position>
	lcd_send_string(LCD_ADDR, data);
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	4619      	mov	r1, r3
 8000f46:	204e      	movs	r0, #78	@ 0x4e
 8000f48:	f000 fb4c 	bl	80015e4 <lcd_send_string>
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	08007370 	.word	0x08007370

08000f58 <view_timer_time>:

void view_timer_time(uint32_t time) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	6078      	str	r0, [r7, #4]
	char data[9];
	uint8_t hr = time / 3600;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a21      	ldr	r2, [pc, #132]	@ (8000fe8 <view_timer_time+0x90>)
 8000f64:	fba2 2303 	umull	r2, r3, r2, r3
 8000f68:	0adb      	lsrs	r3, r3, #11
 8000f6a:	75fb      	strb	r3, [r7, #23]
	uint8_t mn = (time % 3600) / 60;
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <view_timer_time+0x90>)
 8000f70:	fba3 1302 	umull	r1, r3, r3, r2
 8000f74:	0adb      	lsrs	r3, r3, #11
 8000f76:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8000f7a:	fb01 f303 	mul.w	r3, r1, r3
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	4a1a      	ldr	r2, [pc, #104]	@ (8000fec <view_timer_time+0x94>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	75bb      	strb	r3, [r7, #22]
	uint8_t ss = ((time % 3600) % 60);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a16      	ldr	r2, [pc, #88]	@ (8000fe8 <view_timer_time+0x90>)
 8000f8e:	fba2 1203 	umull	r1, r2, r2, r3
 8000f92:	0ad2      	lsrs	r2, r2, #11
 8000f94:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8000f98:	fb01 f202 	mul.w	r2, r1, r2
 8000f9c:	1a9a      	subs	r2, r3, r2
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <view_timer_time+0x94>)
 8000fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8000fa4:	0959      	lsrs	r1, r3, #5
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	1a5b      	subs	r3, r3, r1
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	1ad1      	subs	r1, r2, r3
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	757b      	strb	r3, [r7, #21]
	sprintf(data, "%02d:%02d:%02d", hr, mn, ss);
 8000fb4:	7dfa      	ldrb	r2, [r7, #23]
 8000fb6:	7db9      	ldrb	r1, [r7, #22]
 8000fb8:	7d7b      	ldrb	r3, [r7, #21]
 8000fba:	f107 000c 	add.w	r0, r7, #12
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	490b      	ldr	r1, [pc, #44]	@ (8000ff0 <view_timer_time+0x98>)
 8000fc4:	f005 fd10 	bl	80069e8 <siprintf>
	lcd_set_position(LCD_ADDR, 4, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2104      	movs	r1, #4
 8000fcc:	204e      	movs	r0, #78	@ 0x4e
 8000fce:	f000 fb23 	bl	8001618 <lcd_set_position>
	lcd_send_string(LCD_ADDR, data);
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	204e      	movs	r0, #78	@ 0x4e
 8000fda:	f000 fb03 	bl	80015e4 <lcd_send_string>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	91a2b3c5 	.word	0x91a2b3c5
 8000fec:	88888889 	.word	0x88888889
 8000ff0:	0800737c 	.word	0x0800737c

08000ff4 <ds3231_init>:
#include "ds3231.h"

static I2C_HandleTypeDef* hi2c1;

void ds3231_init(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	hi2c1=hi2c;
 8000ffc:	4a03      	ldr	r2, [pc, #12]	@ (800100c <ds3231_init+0x18>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	20000114 	.word	0x20000114

08001010 <ds3231_read_time>:

void ds3231_read_time(uint8_t* hr, uint8_t* mn)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	uint8_t command=0x01;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
	uint8_t receive[2]={0};
 800101e:	2300      	movs	r3, #0
 8001020:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hi2c1, DS3231_ADDR, &command, 1, 0xFFFF);
 8001022:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <ds3231_read_time+0x88>)
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	f107 020f 	add.w	r2, r7, #15
 800102a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	21d0      	movs	r1, #208	@ 0xd0
 8001034:	f002 ffae 	bl	8003f94 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c1, DS3231_ADDR, receive, 2, 0xFFFF);
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <ds3231_read_time+0x88>)
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	f107 020c 	add.w	r2, r7, #12
 8001040:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2302      	movs	r3, #2
 8001048:	21d0      	movs	r1, #208	@ 0xd0
 800104a:	f003 f8a1 	bl	8004190 <HAL_I2C_Master_Receive>
	*mn=((receive[0]>>4)*10)+(receive[0]&0x0F);
 800104e:	7b3b      	ldrb	r3, [r7, #12]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4413      	add	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	7b3b      	ldrb	r3, [r7, #12]
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4413      	add	r3, r2
 8001068:	b2da      	uxtb	r2, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	701a      	strb	r2, [r3, #0]
	*hr=((receive[1]>>4)*10)+(receive[1]&0x0F);
 800106e:	7b7b      	ldrb	r3, [r7, #13]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	4413      	add	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4413      	add	r3, r2
 8001088:	b2da      	uxtb	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	701a      	strb	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000114 	.word	0x20000114

0800109c <ds3231_set_time>:

void ds3231_set_time(uint8_t hr, uint8_t mn)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71bb      	strb	r3, [r7, #6]
    uint8_t data[4];
    data[0] = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	733b      	strb	r3, [r7, #12]

    data[2] = ((mn / 10) << 4) | (mn % 10);
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001130 <ds3231_set_time+0x94>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	b258      	sxtb	r0, r3
 80010c0:	79ba      	ldrb	r2, [r7, #6]
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <ds3231_set_time+0x94>)
 80010c4:	fba3 1302 	umull	r1, r3, r3, r2
 80010c8:	08d9      	lsrs	r1, r3, #3
 80010ca:	460b      	mov	r3, r1
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4303      	orrs	r3, r0
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	73bb      	strb	r3, [r7, #14]
    data[3] = ((hr / 10) << 4) | (hr % 10);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4a13      	ldr	r2, [pc, #76]	@ (8001130 <ds3231_set_time+0x94>)
 80010e4:	fba2 2303 	umull	r2, r3, r2, r3
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	b258      	sxtb	r0, r3
 80010f0:	79fa      	ldrb	r2, [r7, #7]
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <ds3231_set_time+0x94>)
 80010f4:	fba3 1302 	umull	r1, r3, r3, r2
 80010f8:	08d9      	lsrs	r1, r3, #3
 80010fa:	460b      	mov	r3, r1
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	b25b      	sxtb	r3, r3
 8001108:	4303      	orrs	r3, r0
 800110a:	b25b      	sxtb	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(hi2c1, DS3231_ADDR, data, 4, HAL_MAX_DELAY);
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <ds3231_set_time+0x98>)
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2304      	movs	r3, #4
 8001120:	21d0      	movs	r1, #208	@ 0xd0
 8001122:	f002 ff37 	bl	8003f94 <HAL_I2C_Master_Transmit>
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	cccccccd 	.word	0xcccccccd
 8001134:	20000114 	.word	0x20000114

08001138 <fee_write>:
#include "fee.h"

HAL_StatusTypeDef fee_write(uint32_t address, uint16_t *data, uint32_t dataSize)
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	f5ad 6d88 	sub.w	sp, sp, #1088	@ 0x440
 800113e:	af00      	add	r7, sp, #0
 8001140:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001144:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8001148:	6018      	str	r0, [r3, #0]
 800114a:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800114e:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 8001152:	6019      	str	r1, [r3, #0]
 8001154:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001158:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 800115c:	601a      	str	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f
    uint32_t page_address = address & ~(FLASH_PAGE_SIZE - 1);
 8001164:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001168:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001172:	f023 0303 	bic.w	r3, r3, #3
 8001176:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
    uint16_t buffer[FEE_BUFFER_LEN];
    HAL_FLASH_Unlock();
 800117a:	f002 fa9b 	bl	80036b4 <HAL_FLASH_Unlock>

    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8001184:	e014      	b.n	80011b0 <fee_write+0x78>
        buffer[i] = *(__IO uint16_t*)(page_address + i * 2);
 8001186:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800118a:	005a      	lsls	r2, r3, #1
 800118c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001190:	4413      	add	r3, r2
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b299      	uxth	r1, r3
 8001196:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800119a:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 800119e:	f8d7 2438 	ldr.w	r2, [r7, #1080]	@ 0x438
 80011a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 80011a6:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80011aa:	3301      	adds	r3, #1
 80011ac:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 80011b0:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80011b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011b8:	d3e5      	bcc.n	8001186 <fee_write+0x4e>
    }

    uint32_t offset = address - page_address;
 80011ba:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80011be:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
    for (uint32_t i = 0; i < dataSize; i++) {
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 80011d4:	e01a      	b.n	800120c <fee_write+0xd4>
        buffer[offset / 2 + i] = data[i];
 80011d6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 80011e0:	f5a2 6287 	sub.w	r2, r2, #1080	@ 0x438
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 80011ec:	0851      	lsrs	r1, r2, #1
 80011ee:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 80011f2:	440a      	add	r2, r1
 80011f4:	8819      	ldrh	r1, [r3, #0]
 80011f6:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80011fa:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80011fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint32_t i = 0; i < dataSize; i++) {
 8001202:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001206:	3301      	adds	r3, #1
 8001208:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 800120c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001210:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8001214:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3db      	bcc.n	80011d6 <fee_write+0x9e>
    }

    FLASH_EraseInitTypeDef erase_init_struct;
    erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 800121e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001222:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
    erase_init_struct.PageAddress = page_address;
 800122a:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800122e:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001232:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 8001236:	609a      	str	r2, [r3, #8]
    erase_init_struct.NbPages = 1;
 8001238:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800123c:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001240:	2201      	movs	r2, #1
 8001242:	60da      	str	r2, [r3, #12]
    uint32_t page_error;
    status = HAL_FLASHEx_Erase(&erase_init_struct, &page_error);
 8001244:	f107 0214 	add.w	r2, r7, #20
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fb18 	bl	8003884 <HAL_FLASHEx_Erase>
 8001254:	4603      	mov	r3, r0
 8001256:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f
    if (status != HAL_OK) {
 800125a:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <fee_write+0x134>
        HAL_FLASH_Lock();
 8001262:	f002 fa4d 	bl	8003700 <HAL_FLASH_Lock>
        return status;
 8001266:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
 800126a:	e031      	b.n	80012d0 <fee_write+0x198>
    }

    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 8001272:	e022      	b.n	80012ba <fee_write+0x182>
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, page_address + i * 2, buffer[i]);
 8001274:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001278:	005a      	lsls	r2, r3, #1
 800127a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800127e:	18d1      	adds	r1, r2, r3
 8001280:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001284:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8001288:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 800128c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001290:	b29b      	uxth	r3, r3
 8001292:	2200      	movs	r2, #0
 8001294:	461c      	mov	r4, r3
 8001296:	4615      	mov	r5, r2
 8001298:	4622      	mov	r2, r4
 800129a:	462b      	mov	r3, r5
 800129c:	2001      	movs	r0, #1
 800129e:	f002 f999 	bl	80035d4 <HAL_FLASH_Program>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f
        if (status != HAL_OK) {
 80012a8:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10a      	bne.n	80012c6 <fee_write+0x18e>
    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 80012b0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80012b4:	3301      	adds	r3, #1
 80012b6:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 80012ba:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80012be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012c2:	d3d7      	bcc.n	8001274 <fee_write+0x13c>
 80012c4:	e000      	b.n	80012c8 <fee_write+0x190>
            break;
 80012c6:	bf00      	nop
        }
    }
    HAL_FLASH_Lock();
 80012c8:	f002 fa1a 	bl	8003700 <HAL_FLASH_Lock>
    return status;
 80012cc:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	f507 6788 	add.w	r7, r7, #1088	@ 0x440
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bdb0      	pop	{r4, r5, r7, pc}

080012da <fee_read>:

void fee_read(uint32_t address, uint16_t *data, uint32_t dataSize)
{
 80012da:	b480      	push	{r7}
 80012dc:	b087      	sub	sp, #28
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < dataSize; i++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	e00d      	b.n	8001308 <fee_read+0x2e>
        data[i] = *(__IO uint16_t*)address;
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	440b      	add	r3, r1
 80012f6:	8812      	ldrh	r2, [r2, #0]
 80012f8:	b292      	uxth	r2, r2
 80012fa:	801a      	strh	r2, [r3, #0]
        address += 2;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3302      	adds	r3, #2
 8001300:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < dataSize; i++) {
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	d3ed      	bcc.n	80012ec <fee_read+0x12>
    }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <fee_write_data>:

void fee_write_data(uint32_t address, void *data, size_t dataSize)
{
 800131c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001320:	b087      	sub	sp, #28
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	466b      	mov	r3, sp
 800132c:	461e      	mov	r6, r3
    uint16_t bytes[dataSize / 2];
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	0859      	lsrs	r1, r3, #1
 8001332:	460b      	mov	r3, r1
 8001334:	3b01      	subs	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	2300      	movs	r3, #0
 800133a:	4688      	mov	r8, r1
 800133c:	4699      	mov	r9, r3
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800134a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800134e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001352:	2300      	movs	r3, #0
 8001354:	460c      	mov	r4, r1
 8001356:	461d      	mov	r5, r3
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	012b      	lsls	r3, r5, #4
 8001362:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001366:	0122      	lsls	r2, r4, #4
 8001368:	004b      	lsls	r3, r1, #1
 800136a:	3307      	adds	r3, #7
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	ebad 0d03 	sub.w	sp, sp, r3
 8001374:	466b      	mov	r3, sp
 8001376:	3301      	adds	r3, #1
 8001378:	085b      	lsrs	r3, r3, #1
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	613b      	str	r3, [r7, #16]
    memcpy(bytes, data, dataSize);
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6938      	ldr	r0, [r7, #16]
 8001384:	f005 fb84 	bl	8006a90 <memcpy>
    fee_write(address, bytes, dataSize);
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6939      	ldr	r1, [r7, #16]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff fed3 	bl	8001138 <fee_write>
 8001392:	46b5      	mov	sp, r6
}
 8001394:	bf00      	nop
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800139e <fee_read_data>:

void fee_read_data(uint32_t address, void *data, size_t dataSize)
{
 800139e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	466b      	mov	r3, sp
 80013ae:	461e      	mov	r6, r3
    uint16_t bytes[dataSize / 2];
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	0859      	lsrs	r1, r3, #1
 80013b4:	460b      	mov	r3, r1
 80013b6:	3b01      	subs	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	2300      	movs	r3, #0
 80013bc:	4688      	mov	r8, r1
 80013be:	4699      	mov	r9, r3
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80013cc:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80013d0:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80013d4:	2300      	movs	r3, #0
 80013d6:	460c      	mov	r4, r1
 80013d8:	461d      	mov	r5, r3
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	012b      	lsls	r3, r5, #4
 80013e4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80013e8:	0122      	lsls	r2, r4, #4
 80013ea:	004b      	lsls	r3, r1, #1
 80013ec:	3307      	adds	r3, #7
 80013ee:	08db      	lsrs	r3, r3, #3
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	ebad 0d03 	sub.w	sp, sp, r3
 80013f6:	466b      	mov	r3, sp
 80013f8:	3301      	adds	r3, #1
 80013fa:	085b      	lsrs	r3, r3, #1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
    fee_read(address, bytes, dataSize);
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6939      	ldr	r1, [r7, #16]
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f7ff ff68 	bl	80012da <fee_read>
    memcpy(data, bytes, dataSize);
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6939      	ldr	r1, [r7, #16]
 800140e:	68b8      	ldr	r0, [r7, #8]
 8001410:	f005 fb3e 	bl	8006a90 <memcpy>
 8001414:	46b5      	mov	sp, r6
}
 8001416:	bf00      	nop
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001420 <filter_ema>:
#include "filter.h"


int filter_ema(SensorValue* val)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	const float k=0.3;
 8001428:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <filter_ema+0x74>)
 800142a:	60fb      	str	r3, [r7, #12]
	if(!val->is_first_value)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	f083 0301 	eor.w	r3, r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d01f      	beq.n	800147a <filter_ema+0x5a>
	{
		val->filt_value+=(val->current_value-val->filt_value)*k;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ff3e 	bl	80002c0 <__aeabi_i2f>
 8001444:	4604      	mov	r4, r0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ff35 	bl	80002c0 <__aeabi_i2f>
 8001456:	4603      	mov	r3, r0
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	4618      	mov	r0, r3
 800145c:	f7fe ff84 	bl	8000368 <__aeabi_fmul>
 8001460:	4603      	mov	r3, r0
 8001462:	4619      	mov	r1, r3
 8001464:	4620      	mov	r0, r4
 8001466:	f7fe fe77 	bl	8000158 <__addsf3>
 800146a:	4603      	mov	r3, r0
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f8cb 	bl	8000608 <__aeabi_f2iz>
 8001472:	4602      	mov	r2, r0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	e006      	b.n	8001488 <filter_ema+0x68>
	}
	else
	{
		val->filt_value=val->current_value;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	609a      	str	r2, [r3, #8]
		val->is_first_value=false;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
	}
	return val->filt_value;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	3e99999a 	.word	0x3e99999a

08001498 <lcd_send_internal>:
#include "lcd1602_i2c.h"

static I2C_HandleTypeDef* hi2c1;

HAL_StatusTypeDef lcd_send_internal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af02      	add	r7, sp, #8
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	460b      	mov	r3, r1
 80014a4:	71bb      	strb	r3, [r7, #6]
 80014a6:	4613      	mov	r3, r2
 80014a8:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80014aa:	4b26      	ldr	r3, [pc, #152]	@ (8001544 <lcd_send_internal+0xac>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	b299      	uxth	r1, r3
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	2201      	movs	r2, #1
 80014b8:	f003 f8d6 	bl	8004668 <HAL_I2C_IsDeviceReady>
 80014bc:	4603      	mov	r3, r0
 80014be:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d000      	beq.n	80014c8 <lcd_send_internal+0x30>
		res = HAL_I2C_IsDeviceReady(hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80014c6:	e7f0      	b.n	80014aa <lcd_send_internal+0x12>
			break;
 80014c8:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	f023 030f 	bic.w	r3, r3, #15
 80014d0:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 80014d8:	7bba      	ldrb	r2, [r7, #14]
 80014da:	797b      	ldrb	r3, [r7, #5]
 80014dc:	4313      	orrs	r3, r2
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f043 030c 	orr.w	r3, r3, #12
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 80014e8:	7bba      	ldrb	r2, [r7, #14]
 80014ea:	797b      	ldrb	r3, [r7, #5]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 80014f8:	7b7a      	ldrb	r2, [r7, #13]
 80014fa:	797b      	ldrb	r3, [r7, #5]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f043 030c 	orr.w	r3, r3, #12
 8001504:	b2db      	uxtb	r3, r3
 8001506:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 8001508:	7b7a      	ldrb	r2, [r7, #13]
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	4313      	orrs	r3, r2
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	b2db      	uxtb	r3, r3
 8001516:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8001518:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <lcd_send_internal+0xac>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	b299      	uxth	r1, r3
 8001520:	f107 0208 	add.w	r2, r7, #8
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2304      	movs	r3, #4
 800152c:	f002 fd32 	bl	8003f94 <HAL_I2C_Master_Transmit>
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8001534:	2005      	movs	r0, #5
 8001536:	f001 f8b1 	bl	800269c <HAL_Delay>
	return res;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000118 	.word	0x20000118

08001548 <lcd_send_command>:

void lcd_send_command(uint8_t lcd_addr, uint8_t cmd) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	460a      	mov	r2, r1
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	71bb      	strb	r3, [r7, #6]
	lcd_send_internal(lcd_addr, cmd, 0);
 8001558:	79b9      	ldrb	r1, [r7, #6]
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2200      	movs	r2, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff9a 	bl	8001498 <lcd_send_internal>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <lcd_send_data>:

void lcd_send_data(uint8_t lcd_addr, uint8_t data) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	460a      	mov	r2, r1
 8001576:	71fb      	strb	r3, [r7, #7]
 8001578:	4613      	mov	r3, r2
 800157a:	71bb      	strb	r3, [r7, #6]
	lcd_send_internal(lcd_addr, data, PIN_RS);
 800157c:	79b9      	ldrb	r1, [r7, #6]
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2201      	movs	r2, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff88 	bl	8001498 <lcd_send_internal>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <lcd_init>:

void lcd_init(uint8_t lcd_addr, I2C_HandleTypeDef* hi2c) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
	hi2c1=hi2c;
 800159c:	4a10      	ldr	r2, [pc, #64]	@ (80015e0 <lcd_init+0x50>)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6013      	str	r3, [r2, #0]
	HAL_Delay(40);
 80015a2:	2028      	movs	r0, #40	@ 0x28
 80015a4:	f001 f87a 	bl	800269c <HAL_Delay>
	lcd_send_command(lcd_addr, 0b00110000);
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2130      	movs	r1, #48	@ 0x30
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ffcb 	bl	8001548 <lcd_send_command>
	lcd_send_command(lcd_addr, 0b00000010);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2102      	movs	r1, #2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ffc6 	bl	8001548 <lcd_send_command>
	lcd_send_command(lcd_addr, 0b00001100);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	210c      	movs	r1, #12
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ffc1 	bl	8001548 <lcd_send_command>
	lcd_send_command(lcd_addr, 0b00000001);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2101      	movs	r1, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ffbc 	bl	8001548 <lcd_send_command>
	lcd_clear(lcd_addr);
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f847 	bl	8001666 <lcd_clear>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000118 	.word	0x20000118

080015e4 <lcd_send_string>:

void lcd_send_string(uint8_t lcd_addr, char *str) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 80015f0:	e009      	b.n	8001606 <lcd_send_string+0x22>
		lcd_send_data(lcd_addr, (uint8_t) (*str));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ffb6 	bl	800156c <lcd_send_data>
		str++;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f1      	bne.n	80015f2 <lcd_send_string+0xe>
	}
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <lcd_set_position>:

void lcd_set_position(uint8_t lcd_addr, uint8_t x, uint8_t y)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	460b      	mov	r3, r1
 8001624:	71bb      	strb	r3, [r7, #6]
 8001626:	4613      	mov	r3, r2
 8001628:	717b      	strb	r3, [r7, #5]
    if (x < 16 && y < 2)
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d816      	bhi.n	800165e <lcd_set_position+0x46>
 8001630:	797b      	ldrb	r3, [r7, #5]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d813      	bhi.n	800165e <lcd_set_position+0x46>
    {
        uint8_t address = (y == 0) ? (0x80 + x) : (0xC0 + x);
 8001636:	797b      	ldrb	r3, [r7, #5]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d103      	bne.n	8001644 <lcd_set_position+0x2c>
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	3b80      	subs	r3, #128	@ 0x80
 8001640:	b2db      	uxtb	r3, r3
 8001642:	e002      	b.n	800164a <lcd_set_position+0x32>
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	3b40      	subs	r3, #64	@ 0x40
 8001648:	b2db      	uxtb	r3, r3
 800164a:	73fb      	strb	r3, [r7, #15]
        lcd_send_command(lcd_addr, address);
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff78 	bl	8001548 <lcd_send_command>
        HAL_Delay(1);
 8001658:	2001      	movs	r0, #1
 800165a:	f001 f81f 	bl	800269c <HAL_Delay>
    }
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <lcd_clear>:

void lcd_clear(uint8_t lcd_addr) {
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
    lcd_send_command(lcd_addr, 0x01);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2101      	movs	r1, #1
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff67 	bl	8001548 <lcd_send_command>
    HAL_Delay(2);
 800167a:	2002      	movs	r0, #2
 800167c:	f001 f80e 	bl	800269c <HAL_Delay>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800168c:	f000 ffa4 	bl	80025d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001690:	f000 f834 	bl	80016fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001694:	f000 f9dc 	bl	8001a50 <MX_GPIO_Init>
	MX_DMA_Init();
 8001698:	f000 f9bc 	bl	8001a14 <MX_DMA_Init>
	MX_I2C1_Init();
 800169c:	f000 f8c8 	bl	8001830 <MX_I2C1_Init>
	MX_TIM2_Init();
 80016a0:	f000 f8f4 	bl	800188c <MX_TIM2_Init>
	MX_ADC1_Init();
 80016a4:	f000 f886 	bl	80017b4 <MX_ADC1_Init>
	MX_TIM4_Init();
 80016a8:	f000 f93e 	bl	8001928 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	lcd_init(LCD_ADDR, &hi2c1);
 80016ac:	490f      	ldr	r1, [pc, #60]	@ (80016ec <main+0x64>)
 80016ae:	204e      	movs	r0, #78	@ 0x4e
 80016b0:	f7ff ff6e 	bl	8001590 <lcd_init>
	sht31_init(&hi2c1);
 80016b4:	480d      	ldr	r0, [pc, #52]	@ (80016ec <main+0x64>)
 80016b6:	f000 fa85 	bl	8001bc4 <sht31_init>
	ds3231_init(&hi2c1);
 80016ba:	480c      	ldr	r0, [pc, #48]	@ (80016ec <main+0x64>)
 80016bc:	f7ff fc9a 	bl	8000ff4 <ds3231_init>
	timer_init(&htim2);
 80016c0:	480b      	ldr	r0, [pc, #44]	@ (80016f0 <main+0x68>)
 80016c2:	f000 fd4d 	bl	8002160 <timer_init>
	buzzer_init(&htim4);
 80016c6:	480b      	ldr	r0, [pc, #44]	@ (80016f4 <main+0x6c>)
 80016c8:	f7ff f9d4 	bl	8000a74 <buzzer_init>
	mq2_init(&hadc1);
 80016cc:	480a      	ldr	r0, [pc, #40]	@ (80016f8 <main+0x70>)
 80016ce:	f000 fa09 	bl	8001ae4 <mq2_init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		alarm_control();
 80016d2:	f7ff fb0d 	bl	8000cf0 <alarm_control>
		read_time();
 80016d6:	f7ff fa83 	bl	8000be0 <read_time>
		get_sensor_data();
 80016da:	f7ff faa5 	bl	8000c28 <get_sensor_data>
		timer_control();
 80016de:	f7ff fac5 	bl	8000c6c <timer_control>
		display_update();
 80016e2:	f7ff fb2b 	bl	8000d3c <display_update>
		alarm_control();
 80016e6:	bf00      	nop
 80016e8:	e7f3      	b.n	80016d2 <main+0x4a>
 80016ea:	bf00      	nop
 80016ec:	20000190 	.word	0x20000190
 80016f0:	200001e4 	.word	0x200001e4
 80016f4:	2000022c 	.word	0x2000022c
 80016f8:	2000011c 	.word	0x2000011c

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b094      	sub	sp, #80	@ 0x50
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001706:	2228      	movs	r2, #40	@ 0x28
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f005 f98c 	bl	8006a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	2301      	movs	r3, #1
 800172e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001730:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800173a:	2301      	movs	r3, #1
 800173c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173e:	2302      	movs	r3, #2
 8001740:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001742:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001746:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001748:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800174c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fc3c 	bl	8004fd0 <HAL_RCC_OscConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800175e:	f000 f9bb 	bl	8001ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001762:	230f      	movs	r3, #15
 8001764:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001766:	2302      	movs	r3, #2
 8001768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800176e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001772:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2102      	movs	r1, #2
 800177e:	4618      	mov	r0, r3
 8001780:	f003 fea8 	bl	80054d4 <HAL_RCC_ClockConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800178a:	f000 f9a5 	bl	8001ad8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800178e:	2302      	movs	r3, #2
 8001790:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001796:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4618      	mov	r0, r3
 800179c:	f004 f828 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017a6:	f000 f997 	bl	8001ad8 <Error_Handler>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3750      	adds	r7, #80	@ 0x50
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017c4:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <MX_ADC1_Init+0x74>)
 80017c6:	4a19      	ldr	r2, [pc, #100]	@ (800182c <MX_ADC1_Init+0x78>)
 80017c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ca:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <MX_ADC1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017d0:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <MX_ADC1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d6:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <MX_ADC1_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <MX_ADC1_Init+0x74>)
 80017de:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80017e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <MX_ADC1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <MX_ADC1_Init+0x74>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f0:	480d      	ldr	r0, [pc, #52]	@ (8001828 <MX_ADC1_Init+0x74>)
 80017f2:	f000 ff77 	bl	80026e4 <HAL_ADC_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80017fc:	f000 f96c 	bl	8001ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001804:	2301      	movs	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_ADC1_Init+0x74>)
 8001812:	f001 f92f 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800181c:	f000 f95c 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000011c 	.word	0x2000011c
 800182c:	40012400 	.word	0x40012400

08001830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001836:	4a13      	ldr	r2, [pc, #76]	@ (8001884 <MX_I2C1_Init+0x54>)
 8001838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800183a:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <MX_I2C1_Init+0x50>)
 800183c:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <MX_I2C1_Init+0x58>)
 800183e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001840:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <MX_I2C1_Init+0x50>)
 800184e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001854:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <MX_I2C1_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001860:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <MX_I2C1_Init+0x50>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186c:	4804      	ldr	r0, [pc, #16]	@ (8001880 <MX_I2C1_Init+0x50>)
 800186e:	f002 fa4d 	bl	8003d0c <HAL_I2C_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001878:	f000 f92e 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000190 	.word	0x20000190
 8001884:	40005400 	.word	0x40005400
 8001888:	000186a0 	.word	0x000186a0

0800188c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a0:	463b      	mov	r3, r7
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <MX_TIM2_Init+0x98>)
 80018aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1099;
 80018b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <MX_TIM2_Init+0x98>)
 80018b2:	f240 424b 	movw	r2, #1099	@ 0x44b
 80018b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <MX_TIM2_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018be:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <MX_TIM2_Init+0x98>)
 80018c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c6:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <MX_TIM2_Init+0x98>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018cc:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <MX_TIM2_Init+0x98>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018d2:	4814      	ldr	r0, [pc, #80]	@ (8001924 <MX_TIM2_Init+0x98>)
 80018d4:	f004 f8f8 	bl	8005ac8 <HAL_TIM_Base_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018de:	f000 f8fb 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	4619      	mov	r1, r3
 80018ee:	480d      	ldr	r0, [pc, #52]	@ (8001924 <MX_TIM2_Init+0x98>)
 80018f0:	f004 fc66 	bl	80061c0 <HAL_TIM_ConfigClockSource>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018fa:	f000 f8ed 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001906:	463b      	mov	r3, r7
 8001908:	4619      	mov	r1, r3
 800190a:	4806      	ldr	r0, [pc, #24]	@ (8001924 <MX_TIM2_Init+0x98>)
 800190c:	f004 fffc 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001916:	f000 f8df 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200001e4 	.word	0x200001e4

08001928 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08e      	sub	sp, #56	@ 0x38
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	f107 0320 	add.w	r3, r7, #32
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
 8001954:	615a      	str	r2, [r3, #20]
 8001956:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001958:	4b2c      	ldr	r3, [pc, #176]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 800195a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a10 <MX_TIM4_Init+0xe8>)
 800195c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800195e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 8001960:	2263      	movs	r2, #99	@ 0x63
 8001962:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 719;
 800196a:	4b28      	ldr	r3, [pc, #160]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 800196c:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001970:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001972:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001978:	4b24      	ldr	r3, [pc, #144]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800197e:	4823      	ldr	r0, [pc, #140]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 8001980:	f004 f8a2 	bl	8005ac8 <HAL_TIM_Base_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800198a:	f000 f8a5 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001992:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001994:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001998:	4619      	mov	r1, r3
 800199a:	481c      	ldr	r0, [pc, #112]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 800199c:	f004 fc10 	bl	80061c0 <HAL_TIM_ConfigClockSource>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80019a6:	f000 f897 	bl	8001ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019aa:	4818      	ldr	r0, [pc, #96]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 80019ac:	f004 f95c 	bl	8005c68 <HAL_TIM_PWM_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80019b6:	f000 f88f 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	4619      	mov	r1, r3
 80019c8:	4810      	ldr	r0, [pc, #64]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 80019ca:	f004 ff9d 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80019d4:	f000 f880 	bl	8001ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d8:	2360      	movs	r3, #96	@ 0x60
 80019da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	220c      	movs	r2, #12
 80019ec:	4619      	mov	r1, r3
 80019ee:	4807      	ldr	r0, [pc, #28]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 80019f0:	f004 fb24 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80019fa:	f000 f86d 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019fe:	4803      	ldr	r0, [pc, #12]	@ (8001a0c <MX_TIM4_Init+0xe4>)
 8001a00:	f000 fb08 	bl	8002014 <HAL_TIM_MspPostInit>

}
 8001a04:	bf00      	nop
 8001a06:	3738      	adds	r7, #56	@ 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000022c 	.word	0x2000022c
 8001a10:	40000800 	.word	0x40000800

08001a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <MX_DMA_Init+0x38>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <MX_DMA_Init+0x38>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6153      	str	r3, [r2, #20]
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <MX_DMA_Init+0x38>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	200b      	movs	r0, #11
 8001a38:	f001 fba7 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a3c:	200b      	movs	r0, #11
 8001a3e:	f001 fbc0 	bl	80031c2 <HAL_NVIC_EnableIRQ>

}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <MX_GPIO_Init+0x80>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a19      	ldr	r2, [pc, #100]	@ (8001ad0 <MX_GPIO_Init+0x80>)
 8001a6a:	f043 0320 	orr.w	r3, r3, #32
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <MX_GPIO_Init+0x80>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <MX_GPIO_Init+0x80>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a13      	ldr	r2, [pc, #76]	@ (8001ad0 <MX_GPIO_Init+0x80>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <MX_GPIO_Init+0x80>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <MX_GPIO_Init+0x80>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <MX_GPIO_Init+0x80>)
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <MX_GPIO_Init+0x80>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : UP_Pin DOWN_Pin RIGHT_Pin START_STOP_Pin
                           RESET_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin|RIGHT_Pin|START_STOP_Pin
 8001aac:	f240 133b 	movw	r3, #315	@ 0x13b
 8001ab0:	613b      	str	r3, [r7, #16]
                          |RESET_Pin|LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4804      	ldr	r0, [pc, #16]	@ (8001ad4 <MX_GPIO_Init+0x84>)
 8001ac2:	f001 ff87 	bl	80039d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ac6:	bf00      	nop
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010c00 	.word	0x40010c00

08001ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <Error_Handler+0x8>

08001ae4 <mq2_init>:

static ADC_HandleTypeDef *hadc1;
static uint32_t adc_val;
static volatile bool mq2_data_ready = false;

void mq2_init(ADC_HandleTypeDef *hadc) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	hadc1 = hadc;
 8001aec:	4a05      	ldr	r2, [pc, #20]	@ (8001b04 <mq2_init+0x20>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
	HAL_ADCEx_Calibration_Start(hadc1);
 8001af2:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <mq2_init+0x20>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 f9c2 	bl	8002e80 <HAL_ADCEx_Calibration_Start>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000274 	.word	0x20000274

08001b08 <mq2_start_measurement>:

void mq2_start_measurement() {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_BUSY_REG) != HAL_ADC_STATE_BUSY_REG) {
 8001b0c:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <mq2_start_measurement+0x2c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 f8a7 	bl	8002c64 <HAL_ADC_GetState>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b20:	d006      	beq.n	8001b30 <mq2_start_measurement+0x28>
		HAL_ADC_Start_DMA(hadc1, &adc_val, 1);
 8001b22:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <mq2_start_measurement+0x2c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	4903      	ldr	r1, [pc, #12]	@ (8001b38 <mq2_start_measurement+0x30>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 feb2 	bl	8002894 <HAL_ADC_Start_DMA>
	}
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000274 	.word	0x20000274
 8001b38:	20000278 	.word	0x20000278

08001b3c <is_ready_data>:

bool is_ready_data()
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
	return mq2_data_ready;
 8001b40:	4b03      	ldr	r3, [pc, #12]	@ (8001b50 <is_ready_data+0x14>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	2000027c 	.word	0x2000027c

08001b54 <mq2_get_data>:

uint32_t mq2_get_data() {
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	mq2_data_ready = false;
 8001b58:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <mq2_get_data+0x18>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
	return adc_val;
 8001b5e:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <mq2_get_data+0x1c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	2000027c 	.word	0x2000027c
 8001b70:	20000278 	.word	0x20000278

08001b74 <mq2_is_alarm>:

bool mq2_is_alarm(SensorValue val) {
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (val.filt_value < ALARM_VALUE) {
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001b86:	da01      	bge.n	8001b8c <mq2_is_alarm+0x18>
		return true;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <mq2_is_alarm+0x1a>
	}
	return false;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
    if (hadc == hadc1) {
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_ADC_ConvCpltCallback+0x24>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d102      	bne.n	8001bb0 <HAL_ADC_ConvCpltCallback+0x18>
        mq2_data_ready = true;
 8001baa:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <HAL_ADC_ConvCpltCallback+0x28>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
    }
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000274 	.word	0x20000274
 8001bc0:	2000027c 	.word	0x2000027c

08001bc4 <sht31_init>:

static I2C_HandleTypeDef* hi2c1;
static bool is_start_mesurement;
static uint32_t start_mesurement_time;

void sht31_init(I2C_HandleTypeDef* hi2c) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	hi2c1 = hi2c;
 8001bcc:	4a03      	ldr	r2, [pc, #12]	@ (8001bdc <sht31_init+0x18>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000280 	.word	0x20000280

08001be0 <SHT31_CRC8>:

uint8_t SHT31_CRC8(const uint8_t *data, int len) {
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xFF;
 8001bea:	23ff      	movs	r3, #255	@ 0xff
 8001bec:	75fb      	strb	r3, [r7, #23]
	for (int j = 0; j < len; ++j) {
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	e021      	b.n	8001c38 <SHT31_CRC8+0x58>
		crc ^= data[j];
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	4053      	eors	r3, r2
 8001c00:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < 8; ++i) {
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	e011      	b.n	8001c2c <SHT31_CRC8+0x4c>
			if (crc & 0x80)
 8001c08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	da07      	bge.n	8001c20 <SHT31_CRC8+0x40>
				crc = (crc << 1) ^ 0x31;
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	b25b      	sxtb	r3, r3
 8001c16:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001c1a:	b25b      	sxtb	r3, r3
 8001c1c:	75fb      	strb	r3, [r7, #23]
 8001c1e:	e002      	b.n	8001c26 <SHT31_CRC8+0x46>
			else
				crc <<= 1;
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < 8; ++i) {
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b07      	cmp	r3, #7
 8001c30:	ddea      	ble.n	8001c08 <SHT31_CRC8+0x28>
	for (int j = 0; j < len; ++j) {
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	3301      	adds	r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dbd9      	blt.n	8001bf4 <SHT31_CRC8+0x14>
		}
	}
	return crc;
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <sht31_start_mesurement>:

bool sht31_start_mesurement() {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af02      	add	r7, sp, #8
	if (!is_start_mesurement) {
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <sht31_start_mesurement+0x5c>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	f083 0301 	eor.w	r3, r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01c      	beq.n	8001c9a <sht31_start_mesurement+0x4e>
		uint8_t command[2];
		command[0] = CMD_MEAS_HIGHREP >> 8;
 8001c60:	2324      	movs	r3, #36	@ 0x24
 8001c62:	713b      	strb	r3, [r7, #4]
		command[1] = CMD_MEAS_HIGHREP & 0xFF;
 8001c64:	2300      	movs	r3, #0
 8001c66:	717b      	strb	r3, [r7, #5]

		if (HAL_I2C_Master_Transmit(hi2c1, SHT31_ADDR, command, 2,
 8001c68:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <sht31_start_mesurement+0x60>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	1d3a      	adds	r2, r7, #4
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2302      	movs	r3, #2
 8001c76:	2188      	movs	r1, #136	@ 0x88
 8001c78:	f002 f98c 	bl	8003f94 <HAL_I2C_Master_Transmit>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <sht31_start_mesurement+0x3e>
				HAL_MAX_DELAY) != HAL_OK) {
			is_start_mesurement = false;
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <sht31_start_mesurement+0x5c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e007      	b.n	8001c9a <sht31_start_mesurement+0x4e>
		} else {
			is_start_mesurement = true;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <sht31_start_mesurement+0x5c>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
			start_mesurement_time = HAL_GetTick();
 8001c90:	f000 fcfa 	bl	8002688 <HAL_GetTick>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a06      	ldr	r2, [pc, #24]	@ (8001cb0 <sht31_start_mesurement+0x64>)
 8001c98:	6013      	str	r3, [r2, #0]
		}
	}
	return is_start_mesurement;
 8001c9a:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <sht31_start_mesurement+0x5c>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000284 	.word	0x20000284
 8001cac:	20000280 	.word	0x20000280
 8001cb0:	20000288 	.word	0x20000288

08001cb4 <sht31_is_ready_to_read>:

bool sht31_is_ready_to_read() {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - start_mesurement_time > 20)
 8001cb8:	f000 fce6 	bl	8002688 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <sht31_is_ready_to_read+0x28>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b14      	cmp	r3, #20
 8001cc6:	d905      	bls.n	8001cd4 <sht31_is_ready_to_read+0x20>
			&& is_start_mesurement) {
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <sht31_is_ready_to_read+0x2c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <sht31_is_ready_to_read+0x20>
		return true;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <sht31_is_ready_to_read+0x22>
	}
	return false;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000288 	.word	0x20000288
 8001ce0:	20000284 	.word	0x20000284

08001ce4 <SHT31_read_temp_humidity>:

bool SHT31_read_temp_humidity(int *temperature, int *humidity) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
	if (sht31_is_ready_to_read()) {
 8001cee:	f7ff ffe1 	bl	8001cb4 <sht31_is_ready_to_read>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d06c      	beq.n	8001dd2 <SHT31_read_temp_humidity+0xee>
		uint8_t data[6];
		if (HAL_I2C_Master_Receive(hi2c1, SHT31_ADDR, data, 6, HAL_MAX_DELAY)
 8001cf8:	4b38      	ldr	r3, [pc, #224]	@ (8001ddc <SHT31_read_temp_humidity+0xf8>)
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	f107 020c 	add.w	r2, r7, #12
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2306      	movs	r3, #6
 8001d08:	2188      	movs	r1, #136	@ 0x88
 8001d0a:	f002 fa41 	bl	8004190 <HAL_I2C_Master_Receive>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <SHT31_read_temp_humidity+0x34>
				!= HAL_OK)
			return false;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e05d      	b.n	8001dd4 <SHT31_read_temp_humidity+0xf0>

		if (SHT31_CRC8(data, 2) != data[2]
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff5e 	bl	8001be0 <SHT31_CRC8>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d10b      	bne.n	8001d46 <SHT31_read_temp_humidity+0x62>
				|| SHT31_CRC8(data + 3, 2) != data[5])
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	3303      	adds	r3, #3
 8001d34:	2102      	movs	r1, #2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff52 	bl	8001be0 <SHT31_CRC8>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	7c7b      	ldrb	r3, [r7, #17]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d001      	beq.n	8001d4a <SHT31_read_temp_humidity+0x66>
			return false;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e044      	b.n	8001dd4 <SHT31_read_temp_humidity+0xf0>

		uint16_t temp_raw = (data[0] << 8) | data[1];
 8001d4a:	7b3b      	ldrb	r3, [r7, #12]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	7b7b      	ldrb	r3, [r7, #13]
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	82fb      	strh	r3, [r7, #22]
		uint16_t hum_raw = (data[3] << 8) | data[4];
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	7c3b      	ldrb	r3, [r7, #16]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	82bb      	strh	r3, [r7, #20]

		*temperature = -45.0f + 175.0f * ((float) temp_raw / 65535.0f);
 8001d6a:	8afb      	ldrh	r3, [r7, #22]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe faa3 	bl	80002b8 <__aeabi_ui2f>
 8001d72:	4603      	mov	r3, r0
 8001d74:	491a      	ldr	r1, [pc, #104]	@ (8001de0 <SHT31_read_temp_humidity+0xfc>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fbaa 	bl	80004d0 <__aeabi_fdiv>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4919      	ldr	r1, [pc, #100]	@ (8001de4 <SHT31_read_temp_humidity+0x100>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe faf1 	bl	8000368 <__aeabi_fmul>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4917      	ldr	r1, [pc, #92]	@ (8001de8 <SHT31_read_temp_humidity+0x104>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe f9e2 	bl	8000154 <__aeabi_fsub>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fc38 	bl	8000608 <__aeabi_f2iz>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	601a      	str	r2, [r3, #0]
		*humidity = 100.0f * ((float) hum_raw / 65535.0f);
 8001d9e:	8abb      	ldrh	r3, [r7, #20]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fa89 	bl	80002b8 <__aeabi_ui2f>
 8001da6:	4603      	mov	r3, r0
 8001da8:	490d      	ldr	r1, [pc, #52]	@ (8001de0 <SHT31_read_temp_humidity+0xfc>)
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fb90 	bl	80004d0 <__aeabi_fdiv>
 8001db0:	4603      	mov	r3, r0
 8001db2:	490e      	ldr	r1, [pc, #56]	@ (8001dec <SHT31_read_temp_humidity+0x108>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fad7 	bl	8000368 <__aeabi_fmul>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fc23 	bl	8000608 <__aeabi_f2iz>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	601a      	str	r2, [r3, #0]

		is_start_mesurement = false;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <SHT31_read_temp_humidity+0x10c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
		return true;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <SHT31_read_temp_humidity+0xf0>
	}
	return false;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000280 	.word	0x20000280
 8001de0:	477fff00 	.word	0x477fff00
 8001de4:	432f0000 	.word	0x432f0000
 8001de8:	42340000 	.word	0x42340000
 8001dec:	42c80000 	.word	0x42c80000
 8001df0:	20000284 	.word	0x20000284

08001df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6193      	str	r3, [r2, #24]
 8001e06:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a0e      	ldr	r2, [pc, #56]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	61d3      	str	r3, [r2, #28]
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <HAL_MspInit+0x5c>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_MspInit+0x60>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	4a04      	ldr	r2, [pc, #16]	@ (8001e54 <HAL_MspInit+0x60>)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010000 	.word	0x40010000

08001e58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a28      	ldr	r2, [pc, #160]	@ (8001f14 <HAL_ADC_MspInit+0xbc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d149      	bne.n	8001f0c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e78:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <HAL_ADC_MspInit+0xc0>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a26      	ldr	r2, [pc, #152]	@ (8001f18 <HAL_ADC_MspInit+0xc0>)
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <HAL_ADC_MspInit+0xc0>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e90:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <HAL_ADC_MspInit+0xc0>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a20      	ldr	r2, [pc, #128]	@ (8001f18 <HAL_ADC_MspInit+0xc0>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <HAL_ADC_MspInit+0xc0>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eac:	2303      	movs	r3, #3
 8001eae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4819      	ldr	r0, [pc, #100]	@ (8001f1c <HAL_ADC_MspInit+0xc4>)
 8001eb8:	f001 fd8c 	bl	80039d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_ADC_MspInit+0xc8>)
 8001ebe:	4a19      	ldr	r2, [pc, #100]	@ (8001f24 <HAL_ADC_MspInit+0xcc>)
 8001ec0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec2:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <HAL_ADC_MspInit+0xc8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec8:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_ADC_MspInit+0xc8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ece:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <HAL_ADC_MspInit+0xc8>)
 8001ed0:	2280      	movs	r2, #128	@ 0x80
 8001ed2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_ADC_MspInit+0xc8>)
 8001ed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eda:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001edc:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <HAL_ADC_MspInit+0xc8>)
 8001ede:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ee2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_ADC_MspInit+0xc8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eea:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <HAL_ADC_MspInit+0xc8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ef0:	480b      	ldr	r0, [pc, #44]	@ (8001f20 <HAL_ADC_MspInit+0xc8>)
 8001ef2:	f001 f981 	bl	80031f8 <HAL_DMA_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001efc:	f7ff fdec 	bl	8001ad8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a07      	ldr	r2, [pc, #28]	@ (8001f20 <HAL_ADC_MspInit+0xc8>)
 8001f04:	621a      	str	r2, [r3, #32]
 8001f06:	4a06      	ldr	r2, [pc, #24]	@ (8001f20 <HAL_ADC_MspInit+0xc8>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40012400 	.word	0x40012400
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010800 	.word	0x40010800
 8001f20:	2000014c 	.word	0x2000014c
 8001f24:	40020008 	.word	0x40020008

08001f28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a15      	ldr	r2, [pc, #84]	@ (8001f98 <HAL_I2C_MspInit+0x70>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d123      	bne.n	8001f90 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f60:	23c0      	movs	r3, #192	@ 0xc0
 8001f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f64:	2312      	movs	r3, #18
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4619      	mov	r1, r3
 8001f72:	480b      	ldr	r0, [pc, #44]	@ (8001fa0 <HAL_I2C_MspInit+0x78>)
 8001f74:	f001 fd2e 	bl	80039d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f78:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f82:	61d3      	str	r3, [r2, #28]
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40005400 	.word	0x40005400
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010c00 	.word	0x40010c00

08001fa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fb4:	d114      	bne.n	8001fe0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_TIM_Base_MspInit+0x68>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a14      	ldr	r2, [pc, #80]	@ (800200c <HAL_TIM_Base_MspInit+0x68>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	61d3      	str	r3, [r2, #28]
 8001fc2:	4b12      	ldr	r3, [pc, #72]	@ (800200c <HAL_TIM_Base_MspInit+0x68>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	201c      	movs	r0, #28
 8001fd4:	f001 f8d9 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fd8:	201c      	movs	r0, #28
 8001fda:	f001 f8f2 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fde:	e010      	b.n	8002002 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <HAL_TIM_Base_MspInit+0x6c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10b      	bne.n	8002002 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <HAL_TIM_Base_MspInit+0x68>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a07      	ldr	r2, [pc, #28]	@ (800200c <HAL_TIM_Base_MspInit+0x68>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_TIM_Base_MspInit+0x68>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	40000800 	.word	0x40000800

08002014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a10      	ldr	r2, [pc, #64]	@ (8002070 <HAL_TIM_MspPostInit+0x5c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d118      	bne.n	8002066 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002034:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <HAL_TIM_MspPostInit+0x60>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a0e      	ldr	r2, [pc, #56]	@ (8002074 <HAL_TIM_MspPostInit+0x60>)
 800203a:	f043 0308 	orr.w	r3, r3, #8
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <HAL_TIM_MspPostInit+0x60>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800204c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2302      	movs	r3, #2
 8002058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 0310 	add.w	r3, r7, #16
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	@ (8002078 <HAL_TIM_MspPostInit+0x64>)
 8002062:	f001 fcb7 	bl	80039d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002066:	bf00      	nop
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40000800 	.word	0x40000800
 8002074:	40021000 	.word	0x40021000
 8002078:	40010c00 	.word	0x40010c00

0800207c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <NMI_Handler+0x4>

08002084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <MemManage_Handler+0x4>

08002094 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <BusFault_Handler+0x4>

0800209c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <UsageFault_Handler+0x4>

080020a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020cc:	f000 faca 	bl	8002664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <DMA1_Channel1_IRQHandler+0x10>)
 80020da:	f001 f947 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000014c 	.word	0x2000014c

080020e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f0:	4a14      	ldr	r2, [pc, #80]	@ (8002144 <_sbrk+0x5c>)
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <_sbrk+0x60>)
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002104:	4b11      	ldr	r3, [pc, #68]	@ (800214c <_sbrk+0x64>)
 8002106:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <_sbrk+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	429a      	cmp	r2, r3
 8002116:	d207      	bcs.n	8002128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002118:	f004 fc8e 	bl	8006a38 <__errno>
 800211c:	4603      	mov	r3, r0
 800211e:	220c      	movs	r2, #12
 8002120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	e009      	b.n	800213c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <_sbrk+0x64>)
 8002138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20005000 	.word	0x20005000
 8002148:	00000400 	.word	0x00000400
 800214c:	2000028c 	.word	0x2000028c
 8002150:	20000410 	.word	0x20000410

08002154 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <timer_init>:
static uint32_t start_time;
static TIM_HandleTypeDef* htim2;
static ModeTimer current_mode = STOP;

void timer_init(TIM_HandleTypeDef* htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	htim2=htim;
 8002168:	4a0e      	ldr	r2, [pc, #56]	@ (80021a4 <timer_init+0x44>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
	fee_read_data(FEE_START_ADDRESS, &timer_time, sizeof(timer_time));
 800216e:	2204      	movs	r2, #4
 8002170:	490d      	ldr	r1, [pc, #52]	@ (80021a8 <timer_init+0x48>)
 8002172:	480e      	ldr	r0, [pc, #56]	@ (80021ac <timer_init+0x4c>)
 8002174:	f7ff f913 	bl	800139e <fee_read_data>
	if (timer_time == 0xFFFFFFFF) {
 8002178:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <timer_init+0x48>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d103      	bne.n	800218a <timer_init+0x2a>
		timer_time = 600;
 8002182:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <timer_init+0x48>)
 8002184:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002188:	601a      	str	r2, [r3, #0]
	}
	start_time=timer_time;
 800218a:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <timer_init+0x48>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <timer_init+0x50>)
 8002190:	6013      	str	r3, [r2, #0]
	set_timer_time(timer_time);
 8002192:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <timer_init+0x48>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f9be 	bl	8002518 <set_timer_time>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000029c 	.word	0x2000029c
 80021a8:	20000294 	.word	0x20000294
 80021ac:	0800f000 	.word	0x0800f000
 80021b0:	20000298 	.word	0x20000298

080021b4 <timer_start_stop>:

ModeTimer timer_start_stop() {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
	StateStartButton start_stop = read_start_stop_button();
 80021ba:	f7fe fa4b 	bl	8000654 <read_start_stop_button>
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]

	if (start_stop == CLICK) {
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d148      	bne.n	800225a <timer_start_stop+0xa6>
		if (!is_started && !is_service_mode && !is_SETTINGS_CURRENT_TIME) {
 80021c8:	4b39      	ldr	r3, [pc, #228]	@ (80022b0 <timer_start_stop+0xfc>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	f083 0301 	eor.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01d      	beq.n	8002212 <timer_start_stop+0x5e>
 80021d6:	4b37      	ldr	r3, [pc, #220]	@ (80022b4 <timer_start_stop+0x100>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	f083 0301 	eor.w	r3, r3, #1
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d016      	beq.n	8002212 <timer_start_stop+0x5e>
 80021e4:	4b34      	ldr	r3, [pc, #208]	@ (80022b8 <timer_start_stop+0x104>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	f083 0301 	eor.w	r3, r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00f      	beq.n	8002212 <timer_start_stop+0x5e>
			start_time = timer_time;
 80021f2:	4b32      	ldr	r3, [pc, #200]	@ (80022bc <timer_start_stop+0x108>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a32      	ldr	r2, [pc, #200]	@ (80022c0 <timer_start_stop+0x10c>)
 80021f8:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(htim2);
 80021fa:	4b32      	ldr	r3, [pc, #200]	@ (80022c4 <timer_start_stop+0x110>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 fcb2 	bl	8005b68 <HAL_TIM_Base_Start_IT>
			is_started = true;
 8002204:	4b2a      	ldr	r3, [pc, #168]	@ (80022b0 <timer_start_stop+0xfc>)
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
			current_mode = START;
 800220a:	4b2f      	ldr	r3, [pc, #188]	@ (80022c8 <timer_start_stop+0x114>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	e048      	b.n	80022a4 <timer_start_stop+0xf0>
		} else {
			HAL_TIM_Base_Stop_IT(htim2);
 8002212:	4b2c      	ldr	r3, [pc, #176]	@ (80022c4 <timer_start_stop+0x110>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f003 fcf8 	bl	8005c0c <HAL_TIM_Base_Stop_IT>
			is_started = false;
 800221c:	4b24      	ldr	r3, [pc, #144]	@ (80022b0 <timer_start_stop+0xfc>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]

			if (is_service_mode) {
 8002222:	4b24      	ldr	r3, [pc, #144]	@ (80022b4 <timer_start_stop+0x100>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00c      	beq.n	8002244 <timer_start_stop+0x90>
				is_service_mode = false;
 800222a:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <timer_start_stop+0x100>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
				start_time = timer_time;
 8002230:	4b22      	ldr	r3, [pc, #136]	@ (80022bc <timer_start_stop+0x108>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a22      	ldr	r2, [pc, #136]	@ (80022c0 <timer_start_stop+0x10c>)
 8002236:	6013      	str	r3, [r2, #0]
				fee_write_data(FEE_START_ADDRESS, &timer_time,
 8002238:	2204      	movs	r2, #4
 800223a:	4920      	ldr	r1, [pc, #128]	@ (80022bc <timer_start_stop+0x108>)
 800223c:	4823      	ldr	r0, [pc, #140]	@ (80022cc <timer_start_stop+0x118>)
 800223e:	f7ff f86d 	bl	800131c <fee_write_data>
 8002242:	e006      	b.n	8002252 <timer_start_stop+0x9e>
						sizeof(timer_time));
			} else if (is_SETTINGS_CURRENT_TIME) {
 8002244:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <timer_start_stop+0x104>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <timer_start_stop+0x9e>
				is_SETTINGS_CURRENT_TIME = false;
 800224c:	4b1a      	ldr	r3, [pc, #104]	@ (80022b8 <timer_start_stop+0x104>)
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
			}
			current_mode = STOP;
 8002252:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <timer_start_stop+0x114>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e024      	b.n	80022a4 <timer_start_stop+0xf0>
		}
	}

	else if (start_stop == HOLD && is_started == false) {
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d10d      	bne.n	800227c <timer_start_stop+0xc8>
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <timer_start_stop+0xfc>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f083 0301 	eor.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <timer_start_stop+0xc8>
		is_SETTINGS_CURRENT_TIME = true;
 800226e:	4b12      	ldr	r3, [pc, #72]	@ (80022b8 <timer_start_stop+0x104>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
		current_mode = SETTINGS_CURRENT_TIME;
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <timer_start_stop+0x114>)
 8002276:	2203      	movs	r2, #3
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e013      	b.n	80022a4 <timer_start_stop+0xf0>
	}

	else if (start_stop == DOUBLE_CLICK && is_started == false) {
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d110      	bne.n	80022a4 <timer_start_stop+0xf0>
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <timer_start_stop+0xfc>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <timer_start_stop+0xf0>
		start_time = timer_time;
 8002290:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <timer_start_stop+0x108>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <timer_start_stop+0x10c>)
 8002296:	6013      	str	r3, [r2, #0]
		is_service_mode = true;
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <timer_start_stop+0x100>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]

		current_mode = SETTINGS_TIMER;
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <timer_start_stop+0x114>)
 80022a0:	2202      	movs	r2, #2
 80022a2:	701a      	strb	r2, [r3, #0]
	}

	return current_mode;
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <timer_start_stop+0x114>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000290 	.word	0x20000290
 80022b4:	20000291 	.word	0x20000291
 80022b8:	20000292 	.word	0x20000292
 80022bc:	20000294 	.word	0x20000294
 80022c0:	20000298 	.word	0x20000298
 80022c4:	2000029c 	.word	0x2000029c
 80022c8:	20000038 	.word	0x20000038
 80022cc:	0800f000 	.word	0x0800f000

080022d0 <timer_reset>:


void timer_reset() {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	if (read_reset_button() && !is_started) {
 80022d4:	f7fe fa64 	bl	80007a0 <read_reset_button>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d011      	beq.n	8002302 <timer_reset+0x32>
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <timer_reset+0x38>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	f083 0301 	eor.w	r3, r3, #1
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <timer_reset+0x32>
		HAL_TIM_Base_Stop_IT(htim2);
 80022ec:	4b07      	ldr	r3, [pc, #28]	@ (800230c <timer_reset+0x3c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 fc8b 	bl	8005c0c <HAL_TIM_Base_Stop_IT>
		timer_time = start_time;
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <timer_reset+0x40>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a06      	ldr	r2, [pc, #24]	@ (8002314 <timer_reset+0x44>)
 80022fc:	6013      	str	r3, [r2, #0]
		buzzer_reset();
 80022fe:	f7fe fc57 	bl	8000bb0 <buzzer_reset>
	}
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000290 	.word	0x20000290
 800230c:	2000029c 	.word	0x2000029c
 8002310:	20000298 	.word	0x20000298
 8002314:	20000294 	.word	0x20000294

08002318 <timer_settings>:

void timer_settings(uint8_t *pos) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	uint32_t increments[] = {1, 60, 3600};
 8002320:	4a35      	ldr	r2, [pc, #212]	@ (80023f8 <timer_settings+0xe0>)
 8002322:	f107 030c 	add.w	r3, r7, #12
 8002326:	ca07      	ldmia	r2, {r0, r1, r2}
 8002328:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (read_up_button() && timer_time + increments[*pos]<=MAX_TIMER_TIME) {
 800232c:	f7fe fa80 	bl	8000830 <read_up_button>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01a      	beq.n	800236c <timer_settings+0x54>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	3318      	adds	r3, #24
 800233e:	443b      	add	r3, r7
 8002340:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8002344:	4b2d      	ldr	r3, [pc, #180]	@ (80023fc <timer_settings+0xe4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4413      	add	r3, r2
 800234a:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 800234e:	4293      	cmp	r3, r2
 8002350:	d80c      	bhi.n	800236c <timer_settings+0x54>
		timer_time = timer_time + increments[*pos];
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	3318      	adds	r3, #24
 800235a:	443b      	add	r3, r7
 800235c:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8002360:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <timer_settings+0xe4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4413      	add	r3, r2
 8002366:	4a25      	ldr	r2, [pc, #148]	@ (80023fc <timer_settings+0xe4>)
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e040      	b.n	80023ee <timer_settings+0xd6>
	} else if (read_down_button() && increments[*pos]<=timer_time) {
 800236c:	f7fe faa8 	bl	80008c0 <read_down_button>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d017      	beq.n	80023a6 <timer_settings+0x8e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	3318      	adds	r3, #24
 800237e:	443b      	add	r3, r7
 8002380:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8002384:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <timer_settings+0xe4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d80c      	bhi.n	80023a6 <timer_settings+0x8e>
		timer_time = timer_time - increments[*pos];
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <timer_settings+0xe4>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	3318      	adds	r3, #24
 8002398:	443b      	add	r3, r7
 800239a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <timer_settings+0xe4>)
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e023      	b.n	80023ee <timer_settings+0xd6>
	} else if (read_left_button()) {
 80023a6:	f7fe fad3 	bl	8000950 <read_left_button>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00c      	beq.n	80023ca <timer_settings+0xb2>
		*pos = (*pos == 2) ? 0 : *pos + 1;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d004      	beq.n	80023c2 <timer_settings+0xaa>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	3301      	adds	r3, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	e000      	b.n	80023c4 <timer_settings+0xac>
 80023c2:	2200      	movs	r2, #0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	701a      	strb	r2, [r3, #0]
	} else if (read_right_button()) {
		*pos = (*pos == 0) ? 2 : *pos - 1;
	}
}
 80023c8:	e011      	b.n	80023ee <timer_settings+0xd6>
	} else if (read_right_button()) {
 80023ca:	f7fe fb0b 	bl	80009e4 <read_right_button>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00c      	beq.n	80023ee <timer_settings+0xd6>
		*pos = (*pos == 0) ? 2 : *pos - 1;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d004      	beq.n	80023e6 <timer_settings+0xce>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	e000      	b.n	80023e8 <timer_settings+0xd0>
 80023e6:	2202      	movs	r2, #2
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	701a      	strb	r2, [r3, #0]
}
 80023ec:	e7ff      	b.n	80023ee <timer_settings+0xd6>
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	0800738c 	.word	0x0800738c
 80023fc:	20000294 	.word	0x20000294

08002400 <settings_current_time>:

void settings_current_time(uint8_t *cr_pos, uint8_t *hr, uint8_t *mn) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
	if (read_up_button()) {
 800240c:	f7fe fa10 	bl	8000830 <read_up_button>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d028      	beq.n	8002468 <settings_current_time+0x68>
		if (*cr_pos) {
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d011      	beq.n	8002442 <settings_current_time+0x42>
			*hr = (*hr + 1) % 24;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	4b35      	ldr	r3, [pc, #212]	@ (80024fc <settings_current_time+0xfc>)
 8002426:	fb83 1302 	smull	r1, r3, r3, r2
 800242a:	1099      	asrs	r1, r3, #2
 800242c:	17d3      	asrs	r3, r2, #31
 800242e:	1ac9      	subs	r1, r1, r3
 8002430:	460b      	mov	r3, r1
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	440b      	add	r3, r1
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	1ad1      	subs	r1, r2, r3
 800243a:	b2ca      	uxtb	r2, r1
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	701a      	strb	r2, [r3, #0]
	} else if (read_left_button()) {
		*cr_pos = (*cr_pos == 1) ? 0 : *cr_pos + 1;
	} else if (read_right_button()) {
		*cr_pos = (*cr_pos == 0) ? 1 : *cr_pos - 1;
	}
}
 8002440:	e058      	b.n	80024f4 <settings_current_time+0xf4>
			*mn = (*mn + 1) % 60;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <settings_current_time+0x100>)
 800244a:	fb83 1302 	smull	r1, r3, r3, r2
 800244e:	4413      	add	r3, r2
 8002450:	1159      	asrs	r1, r3, #5
 8002452:	17d3      	asrs	r3, r2, #31
 8002454:	1ac9      	subs	r1, r1, r3
 8002456:	460b      	mov	r3, r1
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a5b      	subs	r3, r3, r1
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	1ad1      	subs	r1, r2, r3
 8002460:	b2ca      	uxtb	r2, r1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	701a      	strb	r2, [r3, #0]
}
 8002466:	e045      	b.n	80024f4 <settings_current_time+0xf4>
	} else if (read_down_button()) {
 8002468:	f7fe fa2a 	bl	80008c0 <read_down_button>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01d      	beq.n	80024ae <settings_current_time+0xae>
		if (*cr_pos && *hr - 1 >= 0) {
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <settings_current_time+0x90>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <settings_current_time+0x90>
			*hr = *hr - 1;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	3b01      	subs	r3, #1
 8002488:	b2da      	uxtb	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	701a      	strb	r2, [r3, #0]
}
 800248e:	e031      	b.n	80024f4 <settings_current_time+0xf4>
		} else if (!(*cr_pos) && *mn - 1 >= 0) {
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d12d      	bne.n	80024f4 <settings_current_time+0xf4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d029      	beq.n	80024f4 <settings_current_time+0xf4>
			*mn = *mn - 1;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	701a      	strb	r2, [r3, #0]
}
 80024ac:	e022      	b.n	80024f4 <settings_current_time+0xf4>
	} else if (read_left_button()) {
 80024ae:	f7fe fa4f 	bl	8000950 <read_left_button>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00c      	beq.n	80024d2 <settings_current_time+0xd2>
		*cr_pos = (*cr_pos == 1) ? 0 : *cr_pos + 1;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d004      	beq.n	80024ca <settings_current_time+0xca>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	e000      	b.n	80024cc <settings_current_time+0xcc>
 80024ca:	2200      	movs	r2, #0
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	701a      	strb	r2, [r3, #0]
}
 80024d0:	e010      	b.n	80024f4 <settings_current_time+0xf4>
	} else if (read_right_button()) {
 80024d2:	f7fe fa87 	bl	80009e4 <read_right_button>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00b      	beq.n	80024f4 <settings_current_time+0xf4>
		*cr_pos = (*cr_pos == 0) ? 1 : *cr_pos - 1;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <settings_current_time+0xee>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	e000      	b.n	80024f0 <settings_current_time+0xf0>
 80024ee:	2201      	movs	r2, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	701a      	strb	r2, [r3, #0]
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	2aaaaaab 	.word	0x2aaaaaab
 8002500:	88888889 	.word	0x88888889

08002504 <get_timer_time>:

uint32_t get_timer_time()
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
	return timer_time;
 8002508:	4b02      	ldr	r3, [pc, #8]	@ (8002514 <get_timer_time+0x10>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	20000294 	.word	0x20000294

08002518 <set_timer_time>:

void set_timer_time(uint32_t time)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	timer_time=time;
 8002520:	4a03      	ldr	r2, [pc, #12]	@ (8002530 <set_timer_time+0x18>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6013      	str	r3, [r2, #0]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	20000294 	.word	0x20000294

08002534 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(htim2);
 8002538:	4b10      	ldr	r3, [pc, #64]	@ (800257c <TIM2_IRQHandler+0x48>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f003 fc8d 	bl	8005e5c <HAL_TIM_IRQHandler>
	if (timer_time > 0) {
 8002542:	4b0f      	ldr	r3, [pc, #60]	@ (8002580 <TIM2_IRQHandler+0x4c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <TIM2_IRQHandler+0x22>
		timer_time--;
 800254a:	4b0d      	ldr	r3, [pc, #52]	@ (8002580 <TIM2_IRQHandler+0x4c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3b01      	subs	r3, #1
 8002550:	4a0b      	ldr	r2, [pc, #44]	@ (8002580 <TIM2_IRQHandler+0x4c>)
 8002552:	6013      	str	r3, [r2, #0]
		timer_time=start_time;
	}
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8002554:	e010      	b.n	8002578 <TIM2_IRQHandler+0x44>
		HAL_TIM_Base_Stop_IT(htim2);
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <TIM2_IRQHandler+0x48>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f003 fb56 	bl	8005c0c <HAL_TIM_Base_Stop_IT>
		buzzer_start(3000, SINGL);
 8002560:	2101      	movs	r1, #1
 8002562:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002566:	f7fe fa9b 	bl	8000aa0 <buzzer_start>
		is_started = false;
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <TIM2_IRQHandler+0x50>)
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
		timer_time=start_time;
 8002570:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <TIM2_IRQHandler+0x54>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a02      	ldr	r2, [pc, #8]	@ (8002580 <TIM2_IRQHandler+0x4c>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	2000029c 	.word	0x2000029c
 8002580:	20000294 	.word	0x20000294
 8002584:	20000290 	.word	0x20000290
 8002588:	20000298 	.word	0x20000298

0800258c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800258c:	f7ff fde2 	bl	8002154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002590:	480b      	ldr	r0, [pc, #44]	@ (80025c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002592:	490c      	ldr	r1, [pc, #48]	@ (80025c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002594:	4a0c      	ldr	r2, [pc, #48]	@ (80025c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002598:	e002      	b.n	80025a0 <LoopCopyDataInit>

0800259a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800259c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259e:	3304      	adds	r3, #4

080025a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a4:	d3f9      	bcc.n	800259a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a6:	4a09      	ldr	r2, [pc, #36]	@ (80025cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025a8:	4c09      	ldr	r4, [pc, #36]	@ (80025d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ac:	e001      	b.n	80025b2 <LoopFillZerobss>

080025ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b0:	3204      	adds	r2, #4

080025b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b4:	d3fb      	bcc.n	80025ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025b6:	f004 fa45 	bl	8006a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ba:	f7ff f865 	bl	8001688 <main>
  bx lr
 80025be:	4770      	bx	lr
  ldr r0, =_sdata
 80025c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80025c8:	08007414 	.word	0x08007414
  ldr r2, =_sbss
 80025cc:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80025d0:	20000410 	.word	0x20000410

080025d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025d4:	e7fe      	b.n	80025d4 <ADC1_2_IRQHandler>
	...

080025d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025dc:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <HAL_Init+0x28>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a07      	ldr	r2, [pc, #28]	@ (8002600 <HAL_Init+0x28>)
 80025e2:	f043 0310 	orr.w	r3, r3, #16
 80025e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e8:	2003      	movs	r0, #3
 80025ea:	f000 fdc3 	bl	8003174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ee:	200f      	movs	r0, #15
 80025f0:	f000 f808 	bl	8002604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f4:	f7ff fbfe 	bl	8001df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000

08002604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800260c:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <HAL_InitTick+0x54>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b12      	ldr	r3, [pc, #72]	@ (800265c <HAL_InitTick+0x58>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4619      	mov	r1, r3
 8002616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800261a:	fbb3 f3f1 	udiv	r3, r3, r1
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fddb 	bl	80031de <HAL_SYSTICK_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e00e      	b.n	8002650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b0f      	cmp	r3, #15
 8002636:	d80a      	bhi.n	800264e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002638:	2200      	movs	r2, #0
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	f000 fda3 	bl	800318a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002644:	4a06      	ldr	r2, [pc, #24]	@ (8002660 <HAL_InitTick+0x5c>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e000      	b.n	8002650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000034 	.word	0x20000034
 800265c:	20000040 	.word	0x20000040
 8002660:	2000003c 	.word	0x2000003c

08002664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002668:	4b05      	ldr	r3, [pc, #20]	@ (8002680 <HAL_IncTick+0x1c>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <HAL_IncTick+0x20>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4413      	add	r3, r2
 8002674:	4a03      	ldr	r2, [pc, #12]	@ (8002684 <HAL_IncTick+0x20>)
 8002676:	6013      	str	r3, [r2, #0]
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	20000040 	.word	0x20000040
 8002684:	200002a0 	.word	0x200002a0

08002688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return uwTick;
 800268c:	4b02      	ldr	r3, [pc, #8]	@ (8002698 <HAL_GetTick+0x10>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	200002a0 	.word	0x200002a0

0800269c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff fff0 	bl	8002688 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d005      	beq.n	80026c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <HAL_Delay+0x44>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c2:	bf00      	nop
 80026c4:	f7ff ffe0 	bl	8002688 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d8f7      	bhi.n	80026c4 <HAL_Delay+0x28>
  {
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000040 	.word	0x20000040

080026e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0be      	b.n	8002884 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff fb98 	bl	8001e58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 fb01 	bl	8002d30 <ADC_ConversionStop_Disable>
 800272e:	4603      	mov	r3, r0
 8002730:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 8099 	bne.w	8002872 <HAL_ADC_Init+0x18e>
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f040 8095 	bne.w	8002872 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002750:	f023 0302 	bic.w	r3, r3, #2
 8002754:	f043 0202 	orr.w	r2, r3, #2
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002764:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7b1b      	ldrb	r3, [r3, #12]
 800276a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800276c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	4313      	orrs	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800277c:	d003      	beq.n	8002786 <HAL_ADC_Init+0xa2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d102      	bne.n	800278c <HAL_ADC_Init+0xa8>
 8002786:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800278a:	e000      	b.n	800278e <HAL_ADC_Init+0xaa>
 800278c:	2300      	movs	r3, #0
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7d1b      	ldrb	r3, [r3, #20]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d119      	bne.n	80027d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7b1b      	ldrb	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	035a      	lsls	r2, r3, #13
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	e00b      	b.n	80027d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c8:	f043 0201 	orr.w	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	4b28      	ldr	r3, [pc, #160]	@ (800288c <HAL_ADC_Init+0x1a8>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	430b      	orrs	r3, r1
 80027f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002800:	d003      	beq.n	800280a <HAL_ADC_Init+0x126>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d104      	bne.n	8002814 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	3b01      	subs	r3, #1
 8002810:	051b      	lsls	r3, r3, #20
 8002812:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	430a      	orrs	r2, r1
 8002826:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <HAL_ADC_Init+0x1ac>)
 8002830:	4013      	ands	r3, r2
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	d10b      	bne.n	8002850 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800284e:	e018      	b.n	8002882 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	f023 0312 	bic.w	r3, r3, #18
 8002858:	f043 0210 	orr.w	r2, r3, #16
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	f043 0201 	orr.w	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002870:	e007      	b.n	8002882 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002882:	7dfb      	ldrb	r3, [r7, #23]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	ffe1f7fd 	.word	0xffe1f7fd
 8002890:	ff1f0efe 	.word	0xff1f0efe

08002894 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a64      	ldr	r2, [pc, #400]	@ (8002a3c <HAL_ADC_Start_DMA+0x1a8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_ADC_Start_DMA+0x24>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a63      	ldr	r2, [pc, #396]	@ (8002a40 <HAL_ADC_Start_DMA+0x1ac>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d106      	bne.n	80028c6 <HAL_ADC_Start_DMA+0x32>
 80028b8:	4b60      	ldr	r3, [pc, #384]	@ (8002a3c <HAL_ADC_Start_DMA+0x1a8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 80b3 	bne.w	8002a2c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_Start_DMA+0x40>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e0ae      	b.n	8002a32 <HAL_ADC_Start_DMA+0x19e>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f9cd 	bl	8002c7c <ADC_Enable>
 80028e2:	4603      	mov	r3, r0
 80028e4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 809a 	bne.w	8002a22 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a4e      	ldr	r2, [pc, #312]	@ (8002a40 <HAL_ADC_Start_DMA+0x1ac>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d105      	bne.n	8002918 <HAL_ADC_Start_DMA+0x84>
 800290c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a3c <HAL_ADC_Start_DMA+0x1a8>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d115      	bne.n	8002944 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292e:	2b00      	cmp	r3, #0
 8002930:	d026      	beq.n	8002980 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002936:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800293a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002942:	e01d      	b.n	8002980 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a39      	ldr	r2, [pc, #228]	@ (8002a3c <HAL_ADC_Start_DMA+0x1a8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_ADC_Start_DMA+0xd0>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a38      	ldr	r2, [pc, #224]	@ (8002a40 <HAL_ADC_Start_DMA+0x1ac>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10d      	bne.n	8002980 <HAL_ADC_Start_DMA+0xec>
 8002964:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <HAL_ADC_Start_DMA+0x1a8>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002978:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002990:	f023 0206 	bic.w	r2, r3, #6
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002998:	e002      	b.n	80029a0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4a25      	ldr	r2, [pc, #148]	@ (8002a44 <HAL_ADC_Start_DMA+0x1b0>)
 80029ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	4a24      	ldr	r2, [pc, #144]	@ (8002a48 <HAL_ADC_Start_DMA+0x1b4>)
 80029b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a23      	ldr	r2, [pc, #140]	@ (8002a4c <HAL_ADC_Start_DMA+0x1b8>)
 80029be:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0202 	mvn.w	r2, #2
 80029c8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029d8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a18      	ldr	r0, [r3, #32]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	334c      	adds	r3, #76	@ 0x4c
 80029e4:	4619      	mov	r1, r3
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f000 fc5f 	bl	80032ac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80029f8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029fc:	d108      	bne.n	8002a10 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002a0c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a0e:	e00f      	b.n	8002a30 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002a1e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a20:	e006      	b.n	8002a30 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002a2a:	e001      	b.n	8002a30 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40012400 	.word	0x40012400
 8002a40:	40012800 	.word	0x40012800
 8002a44:	08002db3 	.word	0x08002db3
 8002a48:	08002e2f 	.word	0x08002e2f
 8002a4c:	08002e4b 	.word	0x08002e4b

08002a50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x20>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e0dc      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x1da>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d81c      	bhi.n	8002ade <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b05      	subs	r3, #5
 8002ab6:	221f      	movs	r2, #31
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4019      	ands	r1, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b05      	subs	r3, #5
 8002ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	635a      	str	r2, [r3, #52]	@ 0x34
 8002adc:	e03c      	b.n	8002b58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b0c      	cmp	r3, #12
 8002ae4:	d81c      	bhi.n	8002b20 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	3b23      	subs	r3, #35	@ 0x23
 8002af8:	221f      	movs	r2, #31
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	4019      	ands	r1, r3
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	3b23      	subs	r3, #35	@ 0x23
 8002b12:	fa00 f203 	lsl.w	r2, r0, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b1e:	e01b      	b.n	8002b58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	3b41      	subs	r3, #65	@ 0x41
 8002b32:	221f      	movs	r2, #31
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	4019      	ands	r1, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	3b41      	subs	r3, #65	@ 0x41
 8002b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b09      	cmp	r3, #9
 8002b5e:	d91c      	bls.n	8002b9a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68d9      	ldr	r1, [r3, #12]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b1e      	subs	r3, #30
 8002b72:	2207      	movs	r2, #7
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	4019      	ands	r1, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6898      	ldr	r0, [r3, #8]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	3b1e      	subs	r3, #30
 8002b8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	e019      	b.n	8002bce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6919      	ldr	r1, [r3, #16]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	2207      	movs	r2, #7
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	4019      	ands	r1, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	6898      	ldr	r0, [r3, #8]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d003      	beq.n	8002bde <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bda:	2b11      	cmp	r3, #17
 8002bdc:	d132      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c58 <HAL_ADC_ConfigChannel+0x1e4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d125      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d126      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002c04:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d11a      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c0e:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <HAL_ADC_ConfigChannel+0x1e8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a13      	ldr	r2, [pc, #76]	@ (8002c60 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	0c9a      	lsrs	r2, r3, #18
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c24:	e002      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f9      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x1b2>
 8002c32:	e007      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	40012400 	.word	0x40012400
 8002c5c:	20000034 	.word	0x20000034
 8002c60:	431bde83 	.word	0x431bde83

08002c64 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d040      	beq.n	8002d1c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002caa:	4b1f      	ldr	r3, [pc, #124]	@ (8002d28 <ADC_Enable+0xac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1f      	ldr	r2, [pc, #124]	@ (8002d2c <ADC_Enable+0xb0>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	0c9b      	lsrs	r3, r3, #18
 8002cb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cb8:	e002      	b.n	8002cc0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f9      	bne.n	8002cba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cc6:	f7ff fcdf 	bl	8002688 <HAL_GetTick>
 8002cca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ccc:	e01f      	b.n	8002d0e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cce:	f7ff fcdb 	bl	8002688 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d918      	bls.n	8002d0e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d011      	beq.n	8002d0e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	f043 0210 	orr.w	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e007      	b.n	8002d1e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d1d8      	bne.n	8002cce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000034 	.word	0x20000034
 8002d2c:	431bde83 	.word	0x431bde83

08002d30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d12e      	bne.n	8002da8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d5a:	f7ff fc95 	bl	8002688 <HAL_GetTick>
 8002d5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d60:	e01b      	b.n	8002d9a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d62:	f7ff fc91 	bl	8002688 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d914      	bls.n	8002d9a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d10d      	bne.n	8002d9a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d82:	f043 0210 	orr.w	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e007      	b.n	8002daa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d0dc      	beq.n	8002d62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d127      	bne.n	8002e1c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002de2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002de6:	d115      	bne.n	8002e14 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d111      	bne.n	8002e14 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d105      	bne.n	8002e14 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f7fe febf 	bl	8001b98 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002e1a:	e004      	b.n	8002e26 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7ff fe07 	bl	8002a50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	f043 0204 	orr.w	r2, r3, #4
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f7ff fdf6 	bl	8002a62 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_ADCEx_Calibration_Start+0x1e>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e097      	b.n	8002fce <HAL_ADCEx_Calibration_Start+0x14e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff42 	bl	8002d30 <ADC_ConversionStop_Disable>
 8002eac:	4603      	mov	r3, r0
 8002eae:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff fee3 	bl	8002c7c <ADC_Enable>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f040 8081 	bne.w	8002fc4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002eca:	f023 0302 	bic.w	r3, r3, #2
 8002ece:	f043 0202 	orr.w	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ed6:	4b40      	ldr	r3, [pc, #256]	@ (8002fd8 <HAL_ADCEx_Calibration_Start+0x158>)
 8002ed8:	681c      	ldr	r4, [r3, #0]
 8002eda:	2002      	movs	r0, #2
 8002edc:	f002 fd3e 	bl	800595c <HAL_RCCEx_GetPeriphCLKFreq>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002ee6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002ee8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002eea:	e002      	b.n	8002ef2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f9      	bne.n	8002eec <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0208 	orr.w	r2, r2, #8
 8002f06:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002f08:	f7ff fbbe 	bl	8002688 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f0e:	e01b      	b.n	8002f48 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f10:	f7ff fbba 	bl	8002688 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b0a      	cmp	r3, #10
 8002f1c:	d914      	bls.n	8002f48 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00d      	beq.n	8002f48 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	f023 0312 	bic.w	r3, r3, #18
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e042      	b.n	8002fce <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1dc      	bne.n	8002f10 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0204 	orr.w	r2, r2, #4
 8002f64:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002f66:	f7ff fb8f 	bl	8002688 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f6c:	e01b      	b.n	8002fa6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f6e:	f7ff fb8b 	bl	8002688 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b0a      	cmp	r3, #10
 8002f7a:	d914      	bls.n	8002fa6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8e:	f023 0312 	bic.w	r3, r3, #18
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e013      	b.n	8002fce <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1dc      	bne.n	8002f6e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb8:	f023 0303 	bic.w	r3, r3, #3
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd90      	pop	{r4, r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000034 	.word	0x20000034

08002fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003004:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800300c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300e:	4a04      	ldr	r2, [pc, #16]	@ (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	60d3      	str	r3, [r2, #12]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <__NVIC_GetPriorityGrouping+0x18>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f003 0307 	and.w	r3, r3, #7
}
 8003032:	4618      	mov	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	2b00      	cmp	r3, #0
 8003050:	db0b      	blt.n	800306a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	4906      	ldr	r1, [pc, #24]	@ (8003074 <__NVIC_EnableIRQ+0x34>)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2001      	movs	r0, #1
 8003062:	fa00 f202 	lsl.w	r2, r0, r2
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	e000e100 	.word	0xe000e100

08003078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	6039      	str	r1, [r7, #0]
 8003082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	2b00      	cmp	r3, #0
 800308a:	db0a      	blt.n	80030a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	490c      	ldr	r1, [pc, #48]	@ (80030c4 <__NVIC_SetPriority+0x4c>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	0112      	lsls	r2, r2, #4
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	440b      	add	r3, r1
 800309c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a0:	e00a      	b.n	80030b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4908      	ldr	r1, [pc, #32]	@ (80030c8 <__NVIC_SetPriority+0x50>)
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	3b04      	subs	r3, #4
 80030b0:	0112      	lsls	r2, r2, #4
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	440b      	add	r3, r1
 80030b6:	761a      	strb	r2, [r3, #24]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000e100 	.word	0xe000e100
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f1c3 0307 	rsb	r3, r3, #7
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	bf28      	it	cs
 80030ea:	2304      	movcs	r3, #4
 80030ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d902      	bls.n	80030fc <NVIC_EncodePriority+0x30>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3b03      	subs	r3, #3
 80030fa:	e000      	b.n	80030fe <NVIC_EncodePriority+0x32>
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	f04f 32ff 	mov.w	r2, #4294967295
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	401a      	ands	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003114:	f04f 31ff 	mov.w	r1, #4294967295
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43d9      	mvns	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	4313      	orrs	r3, r2
         );
}
 8003126:	4618      	mov	r0, r3
 8003128:	3724      	adds	r7, #36	@ 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003140:	d301      	bcc.n	8003146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003146:	4a0a      	ldr	r2, [pc, #40]	@ (8003170 <SysTick_Config+0x40>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314e:	210f      	movs	r1, #15
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f7ff ff90 	bl	8003078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <SysTick_Config+0x40>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315e:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <SysTick_Config+0x40>)
 8003160:	2207      	movs	r2, #7
 8003162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010

08003174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff2d 	bl	8002fdc <__NVIC_SetPriorityGrouping>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800319c:	f7ff ff42 	bl	8003024 <__NVIC_GetPriorityGrouping>
 80031a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7ff ff90 	bl	80030cc <NVIC_EncodePriority>
 80031ac:	4602      	mov	r2, r0
 80031ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff5f 	bl	8003078 <__NVIC_SetPriority>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff35 	bl	8003040 <__NVIC_EnableIRQ>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffa2 	bl	8003130 <SysTick_Config>
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e043      	b.n	8003296 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <HAL_DMA_Init+0xa8>)
 8003216:	4413      	add	r3, r2
 8003218:	4a22      	ldr	r2, [pc, #136]	@ (80032a4 <HAL_DMA_Init+0xac>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	009a      	lsls	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1f      	ldr	r2, [pc, #124]	@ (80032a8 <HAL_DMA_Init+0xb0>)
 800322a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003242:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003246:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	bffdfff8 	.word	0xbffdfff8
 80032a4:	cccccccd 	.word	0xcccccccd
 80032a8:	40020000 	.word	0x40020000

080032ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_DMA_Start_IT+0x20>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e04b      	b.n	8003364 <HAL_DMA_Start_IT+0xb8>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d13a      	bne.n	8003356 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f937 	bl	8003578 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 020e 	orr.w	r2, r2, #14
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e00f      	b.n	8003344 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0204 	bic.w	r2, r2, #4
 8003332:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 020a 	orr.w	r2, r2, #10
 8003342:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e005      	b.n	8003362 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800335e:	2302      	movs	r3, #2
 8003360:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003362:	7dfb      	ldrb	r3, [r7, #23]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	2204      	movs	r2, #4
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d04f      	beq.n	8003434 <HAL_DMA_IRQHandler+0xc8>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d04a      	beq.n	8003434 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a66      	ldr	r2, [pc, #408]	@ (800355c <HAL_DMA_IRQHandler+0x1f0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d029      	beq.n	800341a <HAL_DMA_IRQHandler+0xae>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a65      	ldr	r2, [pc, #404]	@ (8003560 <HAL_DMA_IRQHandler+0x1f4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <HAL_DMA_IRQHandler+0xaa>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a63      	ldr	r2, [pc, #396]	@ (8003564 <HAL_DMA_IRQHandler+0x1f8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01a      	beq.n	8003410 <HAL_DMA_IRQHandler+0xa4>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a62      	ldr	r2, [pc, #392]	@ (8003568 <HAL_DMA_IRQHandler+0x1fc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d012      	beq.n	800340a <HAL_DMA_IRQHandler+0x9e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a60      	ldr	r2, [pc, #384]	@ (800356c <HAL_DMA_IRQHandler+0x200>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00a      	beq.n	8003404 <HAL_DMA_IRQHandler+0x98>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a5f      	ldr	r2, [pc, #380]	@ (8003570 <HAL_DMA_IRQHandler+0x204>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d102      	bne.n	80033fe <HAL_DMA_IRQHandler+0x92>
 80033f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033fc:	e00e      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 80033fe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003402:	e00b      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 8003404:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003408:	e008      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 800340a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800340e:	e005      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 8003410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003414:	e002      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 8003416:	2340      	movs	r3, #64	@ 0x40
 8003418:	e000      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 800341a:	2304      	movs	r3, #4
 800341c:	4a55      	ldr	r2, [pc, #340]	@ (8003574 <HAL_DMA_IRQHandler+0x208>)
 800341e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8094 	beq.w	8003552 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003432:	e08e      	b.n	8003552 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	2202      	movs	r2, #2
 800343a:	409a      	lsls	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d056      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x186>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d051      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10b      	bne.n	8003474 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 020a 	bic.w	r2, r2, #10
 800346a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a38      	ldr	r2, [pc, #224]	@ (800355c <HAL_DMA_IRQHandler+0x1f0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d029      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x166>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a37      	ldr	r2, [pc, #220]	@ (8003560 <HAL_DMA_IRQHandler+0x1f4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d022      	beq.n	80034ce <HAL_DMA_IRQHandler+0x162>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a35      	ldr	r2, [pc, #212]	@ (8003564 <HAL_DMA_IRQHandler+0x1f8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01a      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x15c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a34      	ldr	r2, [pc, #208]	@ (8003568 <HAL_DMA_IRQHandler+0x1fc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d012      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x156>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a32      	ldr	r2, [pc, #200]	@ (800356c <HAL_DMA_IRQHandler+0x200>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00a      	beq.n	80034bc <HAL_DMA_IRQHandler+0x150>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a31      	ldr	r2, [pc, #196]	@ (8003570 <HAL_DMA_IRQHandler+0x204>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d102      	bne.n	80034b6 <HAL_DMA_IRQHandler+0x14a>
 80034b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034b4:	e00e      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034ba:	e00b      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034c0:	e008      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034c6:	e005      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034cc:	e002      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034ce:	2320      	movs	r3, #32
 80034d0:	e000      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034d2:	2302      	movs	r3, #2
 80034d4:	4a27      	ldr	r2, [pc, #156]	@ (8003574 <HAL_DMA_IRQHandler+0x208>)
 80034d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d034      	beq.n	8003552 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034f0:	e02f      	b.n	8003552 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	2208      	movs	r2, #8
 80034f8:	409a      	lsls	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d028      	beq.n	8003554 <HAL_DMA_IRQHandler+0x1e8>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 020e 	bic.w	r2, r2, #14
 800351a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f202 	lsl.w	r2, r1, r2
 800352a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4798      	blx	r3
    }
  }
  return;
 8003552:	bf00      	nop
 8003554:	bf00      	nop
}
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40020008 	.word	0x40020008
 8003560:	4002001c 	.word	0x4002001c
 8003564:	40020030 	.word	0x40020030
 8003568:	40020044 	.word	0x40020044
 800356c:	40020058 	.word	0x40020058
 8003570:	4002006c 	.word	0x4002006c
 8003574:	40020000 	.word	0x40020000

08003578 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358e:	2101      	movs	r1, #1
 8003590:	fa01 f202 	lsl.w	r2, r1, r2
 8003594:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d108      	bne.n	80035b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035b6:	e007      	b.n	80035c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
	...

080035d4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80035d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035ee:	4b2f      	ldr	r3, [pc, #188]	@ (80036ac <HAL_FLASH_Program+0xd8>)
 80035f0:	7e1b      	ldrb	r3, [r3, #24]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_FLASH_Program+0x26>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e054      	b.n	80036a4 <HAL_FLASH_Program+0xd0>
 80035fa:	4b2c      	ldr	r3, [pc, #176]	@ (80036ac <HAL_FLASH_Program+0xd8>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003600:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003604:	f000 f8a8 	bl	8003758 <FLASH_WaitForLastOperation>
 8003608:	4603      	mov	r3, r0
 800360a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d144      	bne.n	800369c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d102      	bne.n	800361e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003618:	2301      	movs	r3, #1
 800361a:	757b      	strb	r3, [r7, #21]
 800361c:	e007      	b.n	800362e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d102      	bne.n	800362a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003624:	2302      	movs	r3, #2
 8003626:	757b      	strb	r3, [r7, #21]
 8003628:	e001      	b.n	800362e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800362a:	2304      	movs	r3, #4
 800362c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800362e:	2300      	movs	r3, #0
 8003630:	75bb      	strb	r3, [r7, #22]
 8003632:	e02d      	b.n	8003690 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003634:	7dbb      	ldrb	r3, [r7, #22]
 8003636:	005a      	lsls	r2, r3, #1
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	eb02 0c03 	add.w	ip, r2, r3
 800363e:	7dbb      	ldrb	r3, [r7, #22]
 8003640:	0119      	lsls	r1, r3, #4
 8003642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003646:	f1c1 0620 	rsb	r6, r1, #32
 800364a:	f1a1 0020 	sub.w	r0, r1, #32
 800364e:	fa22 f401 	lsr.w	r4, r2, r1
 8003652:	fa03 f606 	lsl.w	r6, r3, r6
 8003656:	4334      	orrs	r4, r6
 8003658:	fa23 f000 	lsr.w	r0, r3, r0
 800365c:	4304      	orrs	r4, r0
 800365e:	fa23 f501 	lsr.w	r5, r3, r1
 8003662:	b2a3      	uxth	r3, r4
 8003664:	4619      	mov	r1, r3
 8003666:	4660      	mov	r0, ip
 8003668:	f000 f85a 	bl	8003720 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800366c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003670:	f000 f872 	bl	8003758 <FLASH_WaitForLastOperation>
 8003674:	4603      	mov	r3, r0
 8003676:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003678:	4b0d      	ldr	r3, [pc, #52]	@ (80036b0 <HAL_FLASH_Program+0xdc>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	4a0c      	ldr	r2, [pc, #48]	@ (80036b0 <HAL_FLASH_Program+0xdc>)
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800368a:	7dbb      	ldrb	r3, [r7, #22]
 800368c:	3301      	adds	r3, #1
 800368e:	75bb      	strb	r3, [r7, #22]
 8003690:	7dba      	ldrb	r2, [r7, #22]
 8003692:	7d7b      	ldrb	r3, [r7, #21]
 8003694:	429a      	cmp	r2, r3
 8003696:	d3cd      	bcc.n	8003634 <HAL_FLASH_Program+0x60>
 8003698:	e000      	b.n	800369c <HAL_FLASH_Program+0xc8>
      {
        break;
 800369a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800369c:	4b03      	ldr	r3, [pc, #12]	@ (80036ac <HAL_FLASH_Program+0xd8>)
 800369e:	2200      	movs	r2, #0
 80036a0:	761a      	strb	r2, [r3, #24]

  return status;
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ac:	200002a8 	.word	0x200002a8
 80036b0:	40022000 	.word	0x40022000

080036b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80036be:	4b0d      	ldr	r3, [pc, #52]	@ (80036f4 <HAL_FLASH_Unlock+0x40>)
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00d      	beq.n	80036e6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80036ca:	4b0a      	ldr	r3, [pc, #40]	@ (80036f4 <HAL_FLASH_Unlock+0x40>)
 80036cc:	4a0a      	ldr	r2, [pc, #40]	@ (80036f8 <HAL_FLASH_Unlock+0x44>)
 80036ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80036d0:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <HAL_FLASH_Unlock+0x40>)
 80036d2:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <HAL_FLASH_Unlock+0x48>)
 80036d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80036d6:	4b07      	ldr	r3, [pc, #28]	@ (80036f4 <HAL_FLASH_Unlock+0x40>)
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80036e6:	79fb      	ldrb	r3, [r7, #7]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40022000 	.word	0x40022000
 80036f8:	45670123 	.word	0x45670123
 80036fc:	cdef89ab 	.word	0xcdef89ab

08003700 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <HAL_FLASH_Lock+0x1c>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	4a04      	ldr	r2, [pc, #16]	@ (800371c <HAL_FLASH_Lock+0x1c>)
 800370a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800370e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40022000 	.word	0x40022000

08003720 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800372c:	4b08      	ldr	r3, [pc, #32]	@ (8003750 <FLASH_Program_HalfWord+0x30>)
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003732:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <FLASH_Program_HalfWord+0x34>)
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	4a07      	ldr	r2, [pc, #28]	@ (8003754 <FLASH_Program_HalfWord+0x34>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	887a      	ldrh	r2, [r7, #2]
 8003742:	801a      	strh	r2, [r3, #0]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	200002a8 	.word	0x200002a8
 8003754:	40022000 	.word	0x40022000

08003758 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003760:	f7fe ff92 	bl	8002688 <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003766:	e010      	b.n	800378a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d00c      	beq.n	800378a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <FLASH_WaitForLastOperation+0x2e>
 8003776:	f7fe ff87 	bl	8002688 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d201      	bcs.n	800378a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e025      	b.n	80037d6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800378a:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <FLASH_WaitForLastOperation+0x88>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e8      	bne.n	8003768 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003796:	4b12      	ldr	r3, [pc, #72]	@ (80037e0 <FLASH_WaitForLastOperation+0x88>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <FLASH_WaitForLastOperation+0x88>)
 80037a4:	2220      	movs	r2, #32
 80037a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80037a8:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <FLASH_WaitForLastOperation+0x88>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80037b4:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <FLASH_WaitForLastOperation+0x88>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80037c0:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <FLASH_WaitForLastOperation+0x88>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80037cc:	f000 f80a 	bl	80037e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40022000 	.word	0x40022000

080037e4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80037ee:	4b23      	ldr	r3, [pc, #140]	@ (800387c <FLASH_SetErrorCode+0x98>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80037fa:	4b21      	ldr	r3, [pc, #132]	@ (8003880 <FLASH_SetErrorCode+0x9c>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	4a1f      	ldr	r2, [pc, #124]	@ (8003880 <FLASH_SetErrorCode+0x9c>)
 8003804:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f043 0310 	orr.w	r3, r3, #16
 800380c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800380e:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <FLASH_SetErrorCode+0x98>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800381a:	4b19      	ldr	r3, [pc, #100]	@ (8003880 <FLASH_SetErrorCode+0x9c>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	4a17      	ldr	r2, [pc, #92]	@ (8003880 <FLASH_SetErrorCode+0x9c>)
 8003824:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f043 0304 	orr.w	r3, r3, #4
 800382c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800382e:	4b13      	ldr	r3, [pc, #76]	@ (800387c <FLASH_SetErrorCode+0x98>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800383a:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <FLASH_SetErrorCode+0x9c>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f043 0304 	orr.w	r3, r3, #4
 8003842:	4a0f      	ldr	r2, [pc, #60]	@ (8003880 <FLASH_SetErrorCode+0x9c>)
 8003844:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003846:	4b0d      	ldr	r3, [pc, #52]	@ (800387c <FLASH_SetErrorCode+0x98>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	4a0c      	ldr	r2, [pc, #48]	@ (800387c <FLASH_SetErrorCode+0x98>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f240 1201 	movw	r2, #257	@ 0x101
 8003858:	4293      	cmp	r3, r2
 800385a:	d106      	bne.n	800386a <FLASH_SetErrorCode+0x86>
 800385c:	4b07      	ldr	r3, [pc, #28]	@ (800387c <FLASH_SetErrorCode+0x98>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	4a06      	ldr	r2, [pc, #24]	@ (800387c <FLASH_SetErrorCode+0x98>)
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	61d3      	str	r3, [r2, #28]
}  
 8003868:	e002      	b.n	8003870 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800386a:	4a04      	ldr	r2, [pc, #16]	@ (800387c <FLASH_SetErrorCode+0x98>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	60d3      	str	r3, [r2, #12]
}  
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40022000 	.word	0x40022000
 8003880:	200002a8 	.word	0x200002a8

08003884 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003896:	4b2f      	ldr	r3, [pc, #188]	@ (8003954 <HAL_FLASHEx_Erase+0xd0>)
 8003898:	7e1b      	ldrb	r3, [r3, #24]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_FLASHEx_Erase+0x1e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e053      	b.n	800394a <HAL_FLASHEx_Erase+0xc6>
 80038a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003954 <HAL_FLASHEx_Erase+0xd0>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d116      	bne.n	80038de <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80038b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80038b4:	f7ff ff50 	bl	8003758 <FLASH_WaitForLastOperation>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d141      	bne.n	8003942 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80038be:	2001      	movs	r0, #1
 80038c0:	f000 f84c 	bl	800395c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80038c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80038c8:	f7ff ff46 	bl	8003758 <FLASH_WaitForLastOperation>
 80038cc:	4603      	mov	r3, r0
 80038ce:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80038d0:	4b21      	ldr	r3, [pc, #132]	@ (8003958 <HAL_FLASHEx_Erase+0xd4>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	4a20      	ldr	r2, [pc, #128]	@ (8003958 <HAL_FLASHEx_Erase+0xd4>)
 80038d6:	f023 0304 	bic.w	r3, r3, #4
 80038da:	6113      	str	r3, [r2, #16]
 80038dc:	e031      	b.n	8003942 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80038de:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80038e2:	f7ff ff39 	bl	8003758 <FLASH_WaitForLastOperation>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d12a      	bne.n	8003942 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f04f 32ff 	mov.w	r2, #4294967295
 80038f2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	e019      	b.n	8003930 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80038fc:	68b8      	ldr	r0, [r7, #8]
 80038fe:	f000 f849 	bl	8003994 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003902:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003906:	f7ff ff27 	bl	8003758 <FLASH_WaitForLastOperation>
 800390a:	4603      	mov	r3, r0
 800390c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800390e:	4b12      	ldr	r3, [pc, #72]	@ (8003958 <HAL_FLASHEx_Erase+0xd4>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	4a11      	ldr	r2, [pc, #68]	@ (8003958 <HAL_FLASHEx_Erase+0xd4>)
 8003914:	f023 0302 	bic.w	r3, r3, #2
 8003918:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	601a      	str	r2, [r3, #0]
            break;
 8003926:	e00c      	b.n	8003942 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800392e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	029a      	lsls	r2, r3, #10
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	4413      	add	r3, r2
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	429a      	cmp	r2, r3
 8003940:	d3dc      	bcc.n	80038fc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003942:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <HAL_FLASHEx_Erase+0xd0>)
 8003944:	2200      	movs	r2, #0
 8003946:	761a      	strb	r2, [r3, #24]

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200002a8 	.word	0x200002a8
 8003958:	40022000 	.word	0x40022000

0800395c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003964:	4b09      	ldr	r3, [pc, #36]	@ (800398c <FLASH_MassErase+0x30>)
 8003966:	2200      	movs	r2, #0
 8003968:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800396a:	4b09      	ldr	r3, [pc, #36]	@ (8003990 <FLASH_MassErase+0x34>)
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	4a08      	ldr	r2, [pc, #32]	@ (8003990 <FLASH_MassErase+0x34>)
 8003970:	f043 0304 	orr.w	r3, r3, #4
 8003974:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003976:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <FLASH_MassErase+0x34>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	4a05      	ldr	r2, [pc, #20]	@ (8003990 <FLASH_MassErase+0x34>)
 800397c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003980:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr
 800398c:	200002a8 	.word	0x200002a8
 8003990:	40022000 	.word	0x40022000

08003994 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800399c:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <FLASH_PageErase+0x38>)
 800399e:	2200      	movs	r2, #0
 80039a0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80039a2:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <FLASH_PageErase+0x3c>)
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	4a0a      	ldr	r2, [pc, #40]	@ (80039d0 <FLASH_PageErase+0x3c>)
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80039ae:	4a08      	ldr	r2, [pc, #32]	@ (80039d0 <FLASH_PageErase+0x3c>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80039b4:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <FLASH_PageErase+0x3c>)
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	4a05      	ldr	r2, [pc, #20]	@ (80039d0 <FLASH_PageErase+0x3c>)
 80039ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039be:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	200002a8 	.word	0x200002a8
 80039d0:	40022000 	.word	0x40022000

080039d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b08b      	sub	sp, #44	@ 0x2c
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039e6:	e169      	b.n	8003cbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039e8:	2201      	movs	r2, #1
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f040 8158 	bne.w	8003cb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4a9a      	ldr	r2, [pc, #616]	@ (8003c74 <HAL_GPIO_Init+0x2a0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d05e      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
 8003a10:	4a98      	ldr	r2, [pc, #608]	@ (8003c74 <HAL_GPIO_Init+0x2a0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d875      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a16:	4a98      	ldr	r2, [pc, #608]	@ (8003c78 <HAL_GPIO_Init+0x2a4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d058      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
 8003a1c:	4a96      	ldr	r2, [pc, #600]	@ (8003c78 <HAL_GPIO_Init+0x2a4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d86f      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a22:	4a96      	ldr	r2, [pc, #600]	@ (8003c7c <HAL_GPIO_Init+0x2a8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d052      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
 8003a28:	4a94      	ldr	r2, [pc, #592]	@ (8003c7c <HAL_GPIO_Init+0x2a8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d869      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a2e:	4a94      	ldr	r2, [pc, #592]	@ (8003c80 <HAL_GPIO_Init+0x2ac>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d04c      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
 8003a34:	4a92      	ldr	r2, [pc, #584]	@ (8003c80 <HAL_GPIO_Init+0x2ac>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d863      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a3a:	4a92      	ldr	r2, [pc, #584]	@ (8003c84 <HAL_GPIO_Init+0x2b0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d046      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
 8003a40:	4a90      	ldr	r2, [pc, #576]	@ (8003c84 <HAL_GPIO_Init+0x2b0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d85d      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a46:	2b12      	cmp	r3, #18
 8003a48:	d82a      	bhi.n	8003aa0 <HAL_GPIO_Init+0xcc>
 8003a4a:	2b12      	cmp	r3, #18
 8003a4c:	d859      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <HAL_GPIO_Init+0x80>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003acf 	.word	0x08003acf
 8003a58:	08003aa9 	.word	0x08003aa9
 8003a5c:	08003abb 	.word	0x08003abb
 8003a60:	08003afd 	.word	0x08003afd
 8003a64:	08003b03 	.word	0x08003b03
 8003a68:	08003b03 	.word	0x08003b03
 8003a6c:	08003b03 	.word	0x08003b03
 8003a70:	08003b03 	.word	0x08003b03
 8003a74:	08003b03 	.word	0x08003b03
 8003a78:	08003b03 	.word	0x08003b03
 8003a7c:	08003b03 	.word	0x08003b03
 8003a80:	08003b03 	.word	0x08003b03
 8003a84:	08003b03 	.word	0x08003b03
 8003a88:	08003b03 	.word	0x08003b03
 8003a8c:	08003b03 	.word	0x08003b03
 8003a90:	08003b03 	.word	0x08003b03
 8003a94:	08003b03 	.word	0x08003b03
 8003a98:	08003ab1 	.word	0x08003ab1
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	4a79      	ldr	r2, [pc, #484]	@ (8003c88 <HAL_GPIO_Init+0x2b4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003aa6:	e02c      	b.n	8003b02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	623b      	str	r3, [r7, #32]
          break;
 8003aae:	e029      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	623b      	str	r3, [r7, #32]
          break;
 8003ab8:	e024      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	623b      	str	r3, [r7, #32]
          break;
 8003ac2:	e01f      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	623b      	str	r3, [r7, #32]
          break;
 8003acc:	e01a      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	623b      	str	r3, [r7, #32]
          break;
 8003ada:	e013      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	611a      	str	r2, [r3, #16]
          break;
 8003aee:	e009      	b.n	8003b04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003af0:	2308      	movs	r3, #8
 8003af2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	615a      	str	r2, [r3, #20]
          break;
 8003afa:	e003      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003afc:	2300      	movs	r3, #0
 8003afe:	623b      	str	r3, [r7, #32]
          break;
 8003b00:	e000      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          break;
 8003b02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2bff      	cmp	r3, #255	@ 0xff
 8003b08:	d801      	bhi.n	8003b0e <HAL_GPIO_Init+0x13a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	e001      	b.n	8003b12 <HAL_GPIO_Init+0x13e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2bff      	cmp	r3, #255	@ 0xff
 8003b18:	d802      	bhi.n	8003b20 <HAL_GPIO_Init+0x14c>
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	e002      	b.n	8003b26 <HAL_GPIO_Init+0x152>
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	3b08      	subs	r3, #8
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	210f      	movs	r1, #15
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	401a      	ands	r2, r3
 8003b38:	6a39      	ldr	r1, [r7, #32]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	431a      	orrs	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80b1 	beq.w	8003cb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b54:	4b4d      	ldr	r3, [pc, #308]	@ (8003c8c <HAL_GPIO_Init+0x2b8>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4a4c      	ldr	r2, [pc, #304]	@ (8003c8c <HAL_GPIO_Init+0x2b8>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	6193      	str	r3, [r2, #24]
 8003b60:	4b4a      	ldr	r3, [pc, #296]	@ (8003c8c <HAL_GPIO_Init+0x2b8>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b6c:	4a48      	ldr	r2, [pc, #288]	@ (8003c90 <HAL_GPIO_Init+0x2bc>)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	3302      	adds	r3, #2
 8003b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	220f      	movs	r2, #15
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a40      	ldr	r2, [pc, #256]	@ (8003c94 <HAL_GPIO_Init+0x2c0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <HAL_GPIO_Init+0x1ec>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c98 <HAL_GPIO_Init+0x2c4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00d      	beq.n	8003bbc <HAL_GPIO_Init+0x1e8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8003c9c <HAL_GPIO_Init+0x2c8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d007      	beq.n	8003bb8 <HAL_GPIO_Init+0x1e4>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3d      	ldr	r2, [pc, #244]	@ (8003ca0 <HAL_GPIO_Init+0x2cc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_GPIO_Init+0x1e0>
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e006      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	e004      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e002      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc4:	f002 0203 	and.w	r2, r2, #3
 8003bc8:	0092      	lsls	r2, r2, #2
 8003bca:	4093      	lsls	r3, r2
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bd2:	492f      	ldr	r1, [pc, #188]	@ (8003c90 <HAL_GPIO_Init+0x2bc>)
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	3302      	adds	r3, #2
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d006      	beq.n	8003bfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	492c      	ldr	r1, [pc, #176]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	608b      	str	r3, [r1, #8]
 8003bf8:	e006      	b.n	8003c08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	4928      	ldr	r1, [pc, #160]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d006      	beq.n	8003c22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c14:	4b23      	ldr	r3, [pc, #140]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	4922      	ldr	r1, [pc, #136]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60cb      	str	r3, [r1, #12]
 8003c20:	e006      	b.n	8003c30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c22:	4b20      	ldr	r3, [pc, #128]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	491e      	ldr	r1, [pc, #120]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d006      	beq.n	8003c4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	4918      	ldr	r1, [pc, #96]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
 8003c48:	e006      	b.n	8003c58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c4a:	4b16      	ldr	r3, [pc, #88]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	4914      	ldr	r1, [pc, #80]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d021      	beq.n	8003ca8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	490e      	ldr	r1, [pc, #56]	@ (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]
 8003c70:	e021      	b.n	8003cb6 <HAL_GPIO_Init+0x2e2>
 8003c72:	bf00      	nop
 8003c74:	10320000 	.word	0x10320000
 8003c78:	10310000 	.word	0x10310000
 8003c7c:	10220000 	.word	0x10220000
 8003c80:	10210000 	.word	0x10210000
 8003c84:	10120000 	.word	0x10120000
 8003c88:	10110000 	.word	0x10110000
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40010800 	.word	0x40010800
 8003c98:	40010c00 	.word	0x40010c00
 8003c9c:	40011000 	.word	0x40011000
 8003ca0:	40011400 	.word	0x40011400
 8003ca4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_GPIO_Init+0x304>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	4909      	ldr	r1, [pc, #36]	@ (8003cd8 <HAL_GPIO_Init+0x304>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	3301      	adds	r3, #1
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f47f ae8e 	bne.w	80039e8 <HAL_GPIO_Init+0x14>
  }
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	372c      	adds	r7, #44	@ 0x2c
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	40010400 	.word	0x40010400

08003cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	887b      	ldrh	r3, [r7, #2]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
 8003cf8:	e001      	b.n	8003cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
	...

08003d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e12b      	b.n	8003f76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fe f8f8 	bl	8001f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	@ 0x24
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0201 	bic.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d70:	f001 fcf8 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8003d74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4a81      	ldr	r2, [pc, #516]	@ (8003f80 <HAL_I2C_Init+0x274>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d807      	bhi.n	8003d90 <HAL_I2C_Init+0x84>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4a80      	ldr	r2, [pc, #512]	@ (8003f84 <HAL_I2C_Init+0x278>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	bf94      	ite	ls
 8003d88:	2301      	movls	r3, #1
 8003d8a:	2300      	movhi	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	e006      	b.n	8003d9e <HAL_I2C_Init+0x92>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a7d      	ldr	r2, [pc, #500]	@ (8003f88 <HAL_I2C_Init+0x27c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	bf94      	ite	ls
 8003d98:	2301      	movls	r3, #1
 8003d9a:	2300      	movhi	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e0e7      	b.n	8003f76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a78      	ldr	r2, [pc, #480]	@ (8003f8c <HAL_I2C_Init+0x280>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	0c9b      	lsrs	r3, r3, #18
 8003db0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4a6a      	ldr	r2, [pc, #424]	@ (8003f80 <HAL_I2C_Init+0x274>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d802      	bhi.n	8003de0 <HAL_I2C_Init+0xd4>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	e009      	b.n	8003df4 <HAL_I2C_Init+0xe8>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	4a69      	ldr	r2, [pc, #420]	@ (8003f90 <HAL_I2C_Init+0x284>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	099b      	lsrs	r3, r3, #6
 8003df2:	3301      	adds	r3, #1
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	495c      	ldr	r1, [pc, #368]	@ (8003f80 <HAL_I2C_Init+0x274>)
 8003e10:	428b      	cmp	r3, r1
 8003e12:	d819      	bhi.n	8003e48 <HAL_I2C_Init+0x13c>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1e59      	subs	r1, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e22:	1c59      	adds	r1, r3, #1
 8003e24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e28:	400b      	ands	r3, r1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_I2C_Init+0x138>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1e59      	subs	r1, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e42:	e051      	b.n	8003ee8 <HAL_I2C_Init+0x1dc>
 8003e44:	2304      	movs	r3, #4
 8003e46:	e04f      	b.n	8003ee8 <HAL_I2C_Init+0x1dc>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d111      	bne.n	8003e74 <HAL_I2C_Init+0x168>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1e58      	subs	r0, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6859      	ldr	r1, [r3, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	440b      	add	r3, r1
 8003e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e62:	3301      	adds	r3, #1
 8003e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e012      	b.n	8003e9a <HAL_I2C_Init+0x18e>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1e58      	subs	r0, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	0099      	lsls	r1, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_I2C_Init+0x196>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e022      	b.n	8003ee8 <HAL_I2C_Init+0x1dc>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_I2C_Init+0x1bc>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1e58      	subs	r0, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6859      	ldr	r1, [r3, #4]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	440b      	add	r3, r1
 8003eb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ec6:	e00f      	b.n	8003ee8 <HAL_I2C_Init+0x1dc>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1e58      	subs	r0, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	0099      	lsls	r1, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	6809      	ldr	r1, [r1, #0]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69da      	ldr	r2, [r3, #28]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6911      	ldr	r1, [r2, #16]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68d2      	ldr	r2, [r2, #12]
 8003f22:	4311      	orrs	r1, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	000186a0 	.word	0x000186a0
 8003f84:	001e847f 	.word	0x001e847f
 8003f88:	003d08ff 	.word	0x003d08ff
 8003f8c:	431bde83 	.word	0x431bde83
 8003f90:	10624dd3 	.word	0x10624dd3

08003f94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	817b      	strh	r3, [r7, #10]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fa8:	f7fe fb6e 	bl	8002688 <HAL_GetTick>
 8003fac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	f040 80e0 	bne.w	800417c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	2319      	movs	r3, #25
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4970      	ldr	r1, [pc, #448]	@ (8004188 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fdcc 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e0d3      	b.n	800417e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_I2C_Master_Transmit+0x50>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e0cc      	b.n	800417e <HAL_I2C_Master_Transmit+0x1ea>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d007      	beq.n	800400a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004018:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2221      	movs	r2, #33	@ 0x21
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2210      	movs	r2, #16
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	893a      	ldrh	r2, [r7, #8]
 800403a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4a50      	ldr	r2, [pc, #320]	@ (800418c <HAL_I2C_Master_Transmit+0x1f8>)
 800404a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800404c:	8979      	ldrh	r1, [r7, #10]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	6a3a      	ldr	r2, [r7, #32]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fc36 	bl	80048c4 <I2C_MasterRequestWrite>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e08d      	b.n	800417e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004078:	e066      	b.n	8004148 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	6a39      	ldr	r1, [r7, #32]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fe8a 	bl	8004d98 <I2C_WaitOnTXEFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	2b04      	cmp	r3, #4
 8004090:	d107      	bne.n	80040a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e06b      	b.n	800417e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	781a      	ldrb	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d11b      	bne.n	800411c <HAL_I2C_Master_Transmit+0x188>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d017      	beq.n	800411c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	6a39      	ldr	r1, [r7, #32]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fe81 	bl	8004e28 <I2C_WaitOnBTFFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00d      	beq.n	8004148 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	2b04      	cmp	r3, #4
 8004132:	d107      	bne.n	8004144 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004142:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e01a      	b.n	800417e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	d194      	bne.n	800407a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	00100002 	.word	0x00100002
 800418c:	ffff0000 	.word	0xffff0000

08004190 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08c      	sub	sp, #48	@ 0x30
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	461a      	mov	r2, r3
 800419c:	460b      	mov	r3, r1
 800419e:	817b      	strh	r3, [r7, #10]
 80041a0:	4613      	mov	r3, r2
 80041a2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041a8:	f7fe fa6e 	bl	8002688 <HAL_GetTick>
 80041ac:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	f040 824b 	bne.w	8004652 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2319      	movs	r3, #25
 80041c2:	2201      	movs	r2, #1
 80041c4:	497f      	ldr	r1, [pc, #508]	@ (80043c4 <HAL_I2C_Master_Receive+0x234>)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fccc 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80041d2:	2302      	movs	r3, #2
 80041d4:	e23e      	b.n	8004654 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_I2C_Master_Receive+0x54>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e237      	b.n	8004654 <HAL_I2C_Master_Receive+0x4c4>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d007      	beq.n	800420a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004218:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2222      	movs	r2, #34	@ 0x22
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2210      	movs	r2, #16
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	893a      	ldrh	r2, [r7, #8]
 800423a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4a5f      	ldr	r2, [pc, #380]	@ (80043c8 <HAL_I2C_Master_Receive+0x238>)
 800424a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800424c:	8979      	ldrh	r1, [r7, #10]
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fbb8 	bl	80049c8 <I2C_MasterRequestRead>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e1f8      	b.n	8004654 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004266:	2b00      	cmp	r3, #0
 8004268:	d113      	bne.n	8004292 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e1cc      	b.n	800462c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004296:	2b01      	cmp	r3, #1
 8004298:	d11e      	bne.n	80042d8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042aa:	b672      	cpsid	i
}
 80042ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ae:	2300      	movs	r3, #0
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042d4:	b662      	cpsie	i
}
 80042d6:	e035      	b.n	8004344 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d11e      	bne.n	800431e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042f0:	b672      	cpsid	i
}
 80042f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004318:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800431a:	b662      	cpsie	i
}
 800431c:	e012      	b.n	8004344 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800432c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004344:	e172      	b.n	800462c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434a:	2b03      	cmp	r3, #3
 800434c:	f200 811f 	bhi.w	800458e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004354:	2b01      	cmp	r3, #1
 8004356:	d123      	bne.n	80043a0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800435a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fdab 	bl	8004eb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e173      	b.n	8004654 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800439e:	e145      	b.n	800462c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d152      	bne.n	800444e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	2200      	movs	r2, #0
 80043b0:	4906      	ldr	r1, [pc, #24]	@ (80043cc <HAL_I2C_Master_Receive+0x23c>)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fbd6 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e148      	b.n	8004654 <HAL_I2C_Master_Receive+0x4c4>
 80043c2:	bf00      	nop
 80043c4:	00100002 	.word	0x00100002
 80043c8:	ffff0000 	.word	0xffff0000
 80043cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80043d0:	b672      	cpsid	i
}
 80043d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004416:	b662      	cpsie	i
}
 8004418:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800444c:	e0ee      	b.n	800462c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	2200      	movs	r2, #0
 8004456:	4981      	ldr	r1, [pc, #516]	@ (800465c <HAL_I2C_Master_Receive+0x4cc>)
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fb83 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0f5      	b.n	8004654 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004476:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004478:	b672      	cpsid	i
}
 800447a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004660 <HAL_I2C_Master_Receive+0x4d0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	08db      	lsrs	r3, r3, #3
 80044b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004664 <HAL_I2C_Master_Receive+0x4d4>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	0a1a      	lsrs	r2, r3, #8
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	00da      	lsls	r2, r3, #3
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d118      	bne.n	8004506 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80044f6:	b662      	cpsie	i
}
 80044f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e0a6      	b.n	8004654 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d1d9      	bne.n	80044c8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004556:	b662      	cpsie	i
}
 8004558:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800458c:	e04e      	b.n	800462c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004590:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fc90 	bl	8004eb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e058      	b.n	8004654 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d124      	bne.n	800462c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d107      	bne.n	80045fa <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	2b00      	cmp	r3, #0
 8004632:	f47f ae88 	bne.w	8004346 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	e000      	b.n	8004654 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3728      	adds	r7, #40	@ 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	00010004 	.word	0x00010004
 8004660:	20000034 	.word	0x20000034
 8004664:	14f8b589 	.word	0x14f8b589

08004668 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	@ 0x28
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	460b      	mov	r3, r1
 8004676:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004678:	f7fe f806 	bl	8002688 <HAL_GetTick>
 800467c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b20      	cmp	r3, #32
 800468c:	f040 8111 	bne.w	80048b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	2319      	movs	r3, #25
 8004696:	2201      	movs	r2, #1
 8004698:	4988      	ldr	r1, [pc, #544]	@ (80048bc <HAL_I2C_IsDeviceReady+0x254>)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fa62 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80046a6:	2302      	movs	r3, #2
 80046a8:	e104      	b.n	80048b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_I2C_IsDeviceReady+0x50>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e0fd      	b.n	80048b4 <HAL_I2C_IsDeviceReady+0x24c>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d007      	beq.n	80046de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2224      	movs	r2, #36	@ 0x24
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a70      	ldr	r2, [pc, #448]	@ (80048c0 <HAL_I2C_IsDeviceReady+0x258>)
 8004700:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004710:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2200      	movs	r2, #0
 800471a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fa20 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004738:	d103      	bne.n	8004742 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004740:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e0b6      	b.n	80048b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004746:	897b      	ldrh	r3, [r7, #10]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004754:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004756:	f7fd ff97 	bl	8002688 <HAL_GetTick>
 800475a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b02      	cmp	r3, #2
 8004768:	bf0c      	ite	eq
 800476a:	2301      	moveq	r3, #1
 800476c:	2300      	movne	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800478a:	e025      	b.n	80047d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800478c:	f7fd ff7c 	bl	8002688 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d302      	bcc.n	80047a2 <HAL_I2C_IsDeviceReady+0x13a>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d103      	bne.n	80047aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	22a0      	movs	r2, #160	@ 0xa0
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2ba0      	cmp	r3, #160	@ 0xa0
 80047e2:	d005      	beq.n	80047f0 <HAL_I2C_IsDeviceReady+0x188>
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <HAL_I2C_IsDeviceReady+0x188>
 80047ea:	7dbb      	ldrb	r3, [r7, #22]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0cd      	beq.n	800478c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b02      	cmp	r3, #2
 8004804:	d129      	bne.n	800485a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004814:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	2319      	movs	r3, #25
 8004832:	2201      	movs	r2, #1
 8004834:	4921      	ldr	r1, [pc, #132]	@ (80048bc <HAL_I2C_IsDeviceReady+0x254>)
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f994 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e036      	b.n	80048b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e02c      	b.n	80048b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004868:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004872:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	2319      	movs	r3, #25
 800487a:	2201      	movs	r2, #1
 800487c:	490f      	ldr	r1, [pc, #60]	@ (80048bc <HAL_I2C_IsDeviceReady+0x254>)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f970 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e012      	b.n	80048b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	3301      	adds	r3, #1
 8004892:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	f4ff af32 	bcc.w	8004702 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	00100002 	.word	0x00100002
 80048c0:	ffff0000 	.word	0xffff0000

080048c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	460b      	mov	r3, r1
 80048d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d006      	beq.n	80048ee <I2C_MasterRequestWrite+0x2a>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d003      	beq.n	80048ee <I2C_MasterRequestWrite+0x2a>
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048ec:	d108      	bne.n	8004900 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e00b      	b.n	8004918 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	2b12      	cmp	r3, #18
 8004906:	d107      	bne.n	8004918 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004916:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f91d 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800493e:	d103      	bne.n	8004948 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004946:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e035      	b.n	80049b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004954:	d108      	bne.n	8004968 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004956:	897b      	ldrh	r3, [r7, #10]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004964:	611a      	str	r2, [r3, #16]
 8004966:	e01b      	b.n	80049a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004968:	897b      	ldrh	r3, [r7, #10]
 800496a:	11db      	asrs	r3, r3, #7
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f003 0306 	and.w	r3, r3, #6
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f063 030f 	orn	r3, r3, #15
 8004978:	b2da      	uxtb	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	490e      	ldr	r1, [pc, #56]	@ (80049c0 <I2C_MasterRequestWrite+0xfc>)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f966 	bl	8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e010      	b.n	80049b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4907      	ldr	r1, [pc, #28]	@ (80049c4 <I2C_MasterRequestWrite+0x100>)
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f956 	bl	8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	00010008 	.word	0x00010008
 80049c4:	00010002 	.word	0x00010002

080049c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	460b      	mov	r3, r1
 80049d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d006      	beq.n	8004a02 <I2C_MasterRequestRead+0x3a>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d003      	beq.n	8004a02 <I2C_MasterRequestRead+0x3a>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a00:	d108      	bne.n	8004a14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e00b      	b.n	8004a2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a18:	2b11      	cmp	r3, #17
 8004a1a:	d107      	bne.n	8004a2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f893 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a52:	d103      	bne.n	8004a5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e079      	b.n	8004b54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a68:	d108      	bne.n	8004a7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a6a:	897b      	ldrh	r3, [r7, #10]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	611a      	str	r2, [r3, #16]
 8004a7a:	e05f      	b.n	8004b3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a7c:	897b      	ldrh	r3, [r7, #10]
 8004a7e:	11db      	asrs	r3, r3, #7
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f003 0306 	and.w	r3, r3, #6
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f063 030f 	orn	r3, r3, #15
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4930      	ldr	r1, [pc, #192]	@ (8004b5c <I2C_MasterRequestRead+0x194>)
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f8dc 	bl	8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e054      	b.n	8004b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004aaa:	897b      	ldrh	r3, [r7, #10]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4929      	ldr	r1, [pc, #164]	@ (8004b60 <I2C_MasterRequestRead+0x198>)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f8cc 	bl	8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e044      	b.n	8004b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f831 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b16:	d103      	bne.n	8004b20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e017      	b.n	8004b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b24:	897b      	ldrh	r3, [r7, #10]
 8004b26:	11db      	asrs	r3, r3, #7
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f003 0306 	and.w	r3, r3, #6
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f063 030e 	orn	r3, r3, #14
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4907      	ldr	r1, [pc, #28]	@ (8004b60 <I2C_MasterRequestRead+0x198>)
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f888 	bl	8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	00010008 	.word	0x00010008
 8004b60:	00010002 	.word	0x00010002

08004b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b74:	e048      	b.n	8004c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d044      	beq.n	8004c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7fd fd83 	bl	8002688 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d139      	bne.n	8004c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	0c1b      	lsrs	r3, r3, #16
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d10d      	bne.n	8004bba <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	43da      	mvns	r2, r3
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	e00c      	b.n	8004bd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	43da      	mvns	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d116      	bne.n	8004c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e023      	b.n	8004c50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	0c1b      	lsrs	r3, r3, #16
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d10d      	bne.n	8004c2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	43da      	mvns	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	e00c      	b.n	8004c48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	43da      	mvns	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d093      	beq.n	8004b76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c66:	e071      	b.n	8004d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c76:	d123      	bne.n	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cac:	f043 0204 	orr.w	r2, r3, #4
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e067      	b.n	8004d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d041      	beq.n	8004d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc8:	f7fd fcde 	bl	8002688 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d302      	bcc.n	8004cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d136      	bne.n	8004d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	0c1b      	lsrs	r3, r3, #16
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d10c      	bne.n	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	43da      	mvns	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf14      	ite	ne
 8004cfa:	2301      	movne	r3, #1
 8004cfc:	2300      	moveq	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	e00b      	b.n	8004d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	43da      	mvns	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d016      	beq.n	8004d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	f043 0220 	orr.w	r2, r3, #32
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e021      	b.n	8004d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	0c1b      	lsrs	r3, r3, #16
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d10c      	bne.n	8004d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	43da      	mvns	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4013      	ands	r3, r2
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e00b      	b.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	43da      	mvns	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bf14      	ite	ne
 8004d82:	2301      	movne	r3, #1
 8004d84:	2300      	moveq	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f47f af6d 	bne.w	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da4:	e034      	b.n	8004e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f8e3 	bl	8004f72 <I2C_IsAcknowledgeFailed>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e034      	b.n	8004e20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d028      	beq.n	8004e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fd fc63 	bl	8002688 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11d      	bne.n	8004e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dde:	2b80      	cmp	r3, #128	@ 0x80
 8004de0:	d016      	beq.n	8004e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	f043 0220 	orr.w	r2, r3, #32
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e007      	b.n	8004e20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1a:	2b80      	cmp	r3, #128	@ 0x80
 8004e1c:	d1c3      	bne.n	8004da6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e34:	e034      	b.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 f89b 	bl	8004f72 <I2C_IsAcknowledgeFailed>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e034      	b.n	8004eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d028      	beq.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4e:	f7fd fc1b 	bl	8002688 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d302      	bcc.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d11d      	bne.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d016      	beq.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e007      	b.n	8004eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d1c3      	bne.n	8004e36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec4:	e049      	b.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b10      	cmp	r3, #16
 8004ed2:	d119      	bne.n	8004f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0210 	mvn.w	r2, #16
 8004edc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e030      	b.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f08:	f7fd fbbe 	bl	8002688 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d11d      	bne.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f28:	2b40      	cmp	r3, #64	@ 0x40
 8004f2a:	d016      	beq.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	f043 0220 	orr.w	r2, r3, #32
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e007      	b.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f64:	2b40      	cmp	r3, #64	@ 0x40
 8004f66:	d1ae      	bne.n	8004ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f88:	d11b      	bne.n	8004fc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	f043 0204 	orr.w	r2, r3, #4
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr
	...

08004fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e272      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8087 	beq.w	80050fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ff0:	4b92      	ldr	r3, [pc, #584]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 030c 	and.w	r3, r3, #12
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d00c      	beq.n	8005016 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ffc:	4b8f      	ldr	r3, [pc, #572]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f003 030c 	and.w	r3, r3, #12
 8005004:	2b08      	cmp	r3, #8
 8005006:	d112      	bne.n	800502e <HAL_RCC_OscConfig+0x5e>
 8005008:	4b8c      	ldr	r3, [pc, #560]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005014:	d10b      	bne.n	800502e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005016:	4b89      	ldr	r3, [pc, #548]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d06c      	beq.n	80050fc <HAL_RCC_OscConfig+0x12c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d168      	bne.n	80050fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e24c      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005036:	d106      	bne.n	8005046 <HAL_RCC_OscConfig+0x76>
 8005038:	4b80      	ldr	r3, [pc, #512]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a7f      	ldr	r2, [pc, #508]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	e02e      	b.n	80050a4 <HAL_RCC_OscConfig+0xd4>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0x98>
 800504e:	4b7b      	ldr	r3, [pc, #492]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a7a      	ldr	r2, [pc, #488]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	4b78      	ldr	r3, [pc, #480]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a77      	ldr	r2, [pc, #476]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005060:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e01d      	b.n	80050a4 <HAL_RCC_OscConfig+0xd4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005070:	d10c      	bne.n	800508c <HAL_RCC_OscConfig+0xbc>
 8005072:	4b72      	ldr	r3, [pc, #456]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a71      	ldr	r2, [pc, #452]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	4b6f      	ldr	r3, [pc, #444]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a6e      	ldr	r2, [pc, #440]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e00b      	b.n	80050a4 <HAL_RCC_OscConfig+0xd4>
 800508c:	4b6b      	ldr	r3, [pc, #428]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a6a      	ldr	r2, [pc, #424]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	4b68      	ldr	r3, [pc, #416]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a67      	ldr	r2, [pc, #412]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800509e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d013      	beq.n	80050d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ac:	f7fd faec 	bl	8002688 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b4:	f7fd fae8 	bl	8002688 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	@ 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e200      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c6:	4b5d      	ldr	r3, [pc, #372]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0xe4>
 80050d2:	e014      	b.n	80050fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fd fad8 	bl	8002688 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050dc:	f7fd fad4 	bl	8002688 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b64      	cmp	r3, #100	@ 0x64
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e1ec      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ee:	4b53      	ldr	r3, [pc, #332]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x10c>
 80050fa:	e000      	b.n	80050fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d063      	beq.n	80051d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800510a:	4b4c      	ldr	r3, [pc, #304]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005116:	4b49      	ldr	r3, [pc, #292]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b08      	cmp	r3, #8
 8005120:	d11c      	bne.n	800515c <HAL_RCC_OscConfig+0x18c>
 8005122:	4b46      	ldr	r3, [pc, #280]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d116      	bne.n	800515c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512e:	4b43      	ldr	r3, [pc, #268]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_RCC_OscConfig+0x176>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d001      	beq.n	8005146 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e1c0      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005146:	4b3d      	ldr	r3, [pc, #244]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4939      	ldr	r1, [pc, #228]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005156:	4313      	orrs	r3, r2
 8005158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515a:	e03a      	b.n	80051d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d020      	beq.n	80051a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005164:	4b36      	ldr	r3, [pc, #216]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516a:	f7fd fa8d 	bl	8002688 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005172:	f7fd fa89 	bl	8002688 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e1a1      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005184:	4b2d      	ldr	r3, [pc, #180]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005190:	4b2a      	ldr	r3, [pc, #168]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4927      	ldr	r1, [pc, #156]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	600b      	str	r3, [r1, #0]
 80051a4:	e015      	b.n	80051d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051a6:	4b26      	ldr	r3, [pc, #152]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7fd fa6c 	bl	8002688 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b4:	f7fd fa68 	bl	8002688 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e180      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c6:	4b1d      	ldr	r3, [pc, #116]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d03a      	beq.n	8005254 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d019      	beq.n	800521a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051e6:	4b17      	ldr	r3, [pc, #92]	@ (8005244 <HAL_RCC_OscConfig+0x274>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ec:	f7fd fa4c 	bl	8002688 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f4:	f7fd fa48 	bl	8002688 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e160      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005206:	4b0d      	ldr	r3, [pc, #52]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005212:	2001      	movs	r0, #1
 8005214:	f000 face 	bl	80057b4 <RCC_Delay>
 8005218:	e01c      	b.n	8005254 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800521a:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <HAL_RCC_OscConfig+0x274>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005220:	f7fd fa32 	bl	8002688 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005226:	e00f      	b.n	8005248 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005228:	f7fd fa2e 	bl	8002688 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d908      	bls.n	8005248 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e146      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000
 8005240:	42420000 	.word	0x42420000
 8005244:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005248:	4b92      	ldr	r3, [pc, #584]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e9      	bne.n	8005228 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 80a6 	beq.w	80053ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005262:	2300      	movs	r3, #0
 8005264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005266:	4b8b      	ldr	r3, [pc, #556]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10d      	bne.n	800528e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005272:	4b88      	ldr	r3, [pc, #544]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	4a87      	ldr	r2, [pc, #540]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800527c:	61d3      	str	r3, [r2, #28]
 800527e:	4b85      	ldr	r3, [pc, #532]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800528a:	2301      	movs	r3, #1
 800528c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528e:	4b82      	ldr	r3, [pc, #520]	@ (8005498 <HAL_RCC_OscConfig+0x4c8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d118      	bne.n	80052cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800529a:	4b7f      	ldr	r3, [pc, #508]	@ (8005498 <HAL_RCC_OscConfig+0x4c8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a7e      	ldr	r2, [pc, #504]	@ (8005498 <HAL_RCC_OscConfig+0x4c8>)
 80052a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a6:	f7fd f9ef 	bl	8002688 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ae:	f7fd f9eb 	bl	8002688 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b64      	cmp	r3, #100	@ 0x64
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e103      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c0:	4b75      	ldr	r3, [pc, #468]	@ (8005498 <HAL_RCC_OscConfig+0x4c8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d106      	bne.n	80052e2 <HAL_RCC_OscConfig+0x312>
 80052d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	4a6e      	ldr	r2, [pc, #440]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	6213      	str	r3, [r2, #32]
 80052e0:	e02d      	b.n	800533e <HAL_RCC_OscConfig+0x36e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0x334>
 80052ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4a69      	ldr	r2, [pc, #420]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052f0:	f023 0301 	bic.w	r3, r3, #1
 80052f4:	6213      	str	r3, [r2, #32]
 80052f6:	4b67      	ldr	r3, [pc, #412]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	4a66      	ldr	r2, [pc, #408]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	f023 0304 	bic.w	r3, r3, #4
 8005300:	6213      	str	r3, [r2, #32]
 8005302:	e01c      	b.n	800533e <HAL_RCC_OscConfig+0x36e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b05      	cmp	r3, #5
 800530a:	d10c      	bne.n	8005326 <HAL_RCC_OscConfig+0x356>
 800530c:	4b61      	ldr	r3, [pc, #388]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	4a60      	ldr	r2, [pc, #384]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005312:	f043 0304 	orr.w	r3, r3, #4
 8005316:	6213      	str	r3, [r2, #32]
 8005318:	4b5e      	ldr	r3, [pc, #376]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	4a5d      	ldr	r2, [pc, #372]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	6213      	str	r3, [r2, #32]
 8005324:	e00b      	b.n	800533e <HAL_RCC_OscConfig+0x36e>
 8005326:	4b5b      	ldr	r3, [pc, #364]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	4a5a      	ldr	r2, [pc, #360]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	6213      	str	r3, [r2, #32]
 8005332:	4b58      	ldr	r3, [pc, #352]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	4a57      	ldr	r2, [pc, #348]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005338:	f023 0304 	bic.w	r3, r3, #4
 800533c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d015      	beq.n	8005372 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005346:	f7fd f99f 	bl	8002688 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534c:	e00a      	b.n	8005364 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534e:	f7fd f99b 	bl	8002688 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0b1      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005364:	4b4b      	ldr	r3, [pc, #300]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0ee      	beq.n	800534e <HAL_RCC_OscConfig+0x37e>
 8005370:	e014      	b.n	800539c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005372:	f7fd f989 	bl	8002688 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005378:	e00a      	b.n	8005390 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537a:	f7fd f985 	bl	8002688 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e09b      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005390:	4b40      	ldr	r3, [pc, #256]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1ee      	bne.n	800537a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d105      	bne.n	80053ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	4a3b      	ldr	r2, [pc, #236]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80053a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 8087 	beq.w	80054c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053b8:	4b36      	ldr	r3, [pc, #216]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f003 030c 	and.w	r3, r3, #12
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d061      	beq.n	8005488 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d146      	bne.n	800545a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053cc:	4b33      	ldr	r3, [pc, #204]	@ (800549c <HAL_RCC_OscConfig+0x4cc>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d2:	f7fd f959 	bl	8002688 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053da:	f7fd f955 	bl	8002688 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e06d      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ec:	4b29      	ldr	r3, [pc, #164]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f0      	bne.n	80053da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005400:	d108      	bne.n	8005414 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005402:	4b24      	ldr	r3, [pc, #144]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	4921      	ldr	r1, [pc, #132]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005410:	4313      	orrs	r3, r2
 8005412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005414:	4b1f      	ldr	r3, [pc, #124]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a19      	ldr	r1, [r3, #32]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	430b      	orrs	r3, r1
 8005426:	491b      	ldr	r1, [pc, #108]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005428:	4313      	orrs	r3, r2
 800542a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800542c:	4b1b      	ldr	r3, [pc, #108]	@ (800549c <HAL_RCC_OscConfig+0x4cc>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005432:	f7fd f929 	bl	8002688 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543a:	f7fd f925 	bl	8002688 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e03d      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800544c:	4b11      	ldr	r3, [pc, #68]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x46a>
 8005458:	e035      	b.n	80054c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545a:	4b10      	ldr	r3, [pc, #64]	@ (800549c <HAL_RCC_OscConfig+0x4cc>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fd f912 	bl	8002688 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005468:	f7fd f90e 	bl	8002688 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e026      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800547a:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x498>
 8005486:	e01e      	b.n	80054c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d107      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e019      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
 8005494:	40021000 	.word	0x40021000
 8005498:	40007000 	.word	0x40007000
 800549c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <HAL_RCC_OscConfig+0x500>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d106      	bne.n	80054c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d001      	beq.n	80054c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000

080054d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0d0      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d910      	bls.n	8005518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f6:	4b67      	ldr	r3, [pc, #412]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 0207 	bic.w	r2, r3, #7
 80054fe:	4965      	ldr	r1, [pc, #404]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	4313      	orrs	r3, r2
 8005504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005506:	4b63      	ldr	r3, [pc, #396]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d001      	beq.n	8005518 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0b8      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d020      	beq.n	8005566 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005530:	4b59      	ldr	r3, [pc, #356]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a58      	ldr	r2, [pc, #352]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005536:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800553a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005548:	4b53      	ldr	r3, [pc, #332]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4a52      	ldr	r2, [pc, #328]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800554e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005552:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005554:	4b50      	ldr	r3, [pc, #320]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	494d      	ldr	r1, [pc, #308]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005562:	4313      	orrs	r3, r2
 8005564:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d040      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d107      	bne.n	800558a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557a:	4b47      	ldr	r3, [pc, #284]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d115      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e07f      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d107      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005592:	4b41      	ldr	r3, [pc, #260]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e073      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e06b      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055b2:	4b39      	ldr	r3, [pc, #228]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f023 0203 	bic.w	r2, r3, #3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	4936      	ldr	r1, [pc, #216]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055c4:	f7fd f860 	bl	8002688 <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055cc:	f7fd f85c 	bl	8002688 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e053      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 020c 	and.w	r2, r3, #12
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d1eb      	bne.n	80055cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055f4:	4b27      	ldr	r3, [pc, #156]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d210      	bcs.n	8005624 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4b24      	ldr	r3, [pc, #144]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 0207 	bic.w	r2, r3, #7
 800560a:	4922      	ldr	r1, [pc, #136]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b20      	ldr	r3, [pc, #128]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e032      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005630:	4b19      	ldr	r3, [pc, #100]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4916      	ldr	r1, [pc, #88]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800563e:	4313      	orrs	r3, r2
 8005640:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800564e:	4b12      	ldr	r3, [pc, #72]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	490e      	ldr	r1, [pc, #56]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800565e:	4313      	orrs	r3, r2
 8005660:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005662:	f000 f821 	bl	80056a8 <HAL_RCC_GetSysClockFreq>
 8005666:	4602      	mov	r2, r0
 8005668:	4b0b      	ldr	r3, [pc, #44]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	490a      	ldr	r1, [pc, #40]	@ (800569c <HAL_RCC_ClockConfig+0x1c8>)
 8005674:	5ccb      	ldrb	r3, [r1, r3]
 8005676:	fa22 f303 	lsr.w	r3, r2, r3
 800567a:	4a09      	ldr	r2, [pc, #36]	@ (80056a0 <HAL_RCC_ClockConfig+0x1cc>)
 800567c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800567e:	4b09      	ldr	r3, [pc, #36]	@ (80056a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f7fc ffbe 	bl	8002604 <HAL_InitTick>

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40022000 	.word	0x40022000
 8005698:	40021000 	.word	0x40021000
 800569c:	08007398 	.word	0x08007398
 80056a0:	20000034 	.word	0x20000034
 80056a4:	2000003c 	.word	0x2000003c

080056a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	2300      	movs	r3, #0
 80056bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056c2:	4b1e      	ldr	r3, [pc, #120]	@ (800573c <HAL_RCC_GetSysClockFreq+0x94>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 030c 	and.w	r3, r3, #12
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d002      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0x30>
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d003      	beq.n	80056de <HAL_RCC_GetSysClockFreq+0x36>
 80056d6:	e027      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056d8:	4b19      	ldr	r3, [pc, #100]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x98>)
 80056da:	613b      	str	r3, [r7, #16]
      break;
 80056dc:	e027      	b.n	800572e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	0c9b      	lsrs	r3, r3, #18
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	4a17      	ldr	r2, [pc, #92]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056e8:	5cd3      	ldrb	r3, [r2, r3]
 80056ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d010      	beq.n	8005718 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056f6:	4b11      	ldr	r3, [pc, #68]	@ (800573c <HAL_RCC_GetSysClockFreq+0x94>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	0c5b      	lsrs	r3, r3, #17
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	4a11      	ldr	r2, [pc, #68]	@ (8005748 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005702:	5cd3      	ldrb	r3, [r2, r3]
 8005704:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a0d      	ldr	r2, [pc, #52]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x98>)
 800570a:	fb03 f202 	mul.w	r2, r3, r2
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	fbb2 f3f3 	udiv	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	e004      	b.n	8005722 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a0c      	ldr	r2, [pc, #48]	@ (800574c <HAL_RCC_GetSysClockFreq+0xa4>)
 800571c:	fb02 f303 	mul.w	r3, r2, r3
 8005720:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	613b      	str	r3, [r7, #16]
      break;
 8005726:	e002      	b.n	800572e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005728:	4b05      	ldr	r3, [pc, #20]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x98>)
 800572a:	613b      	str	r3, [r7, #16]
      break;
 800572c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800572e:	693b      	ldr	r3, [r7, #16]
}
 8005730:	4618      	mov	r0, r3
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40021000 	.word	0x40021000
 8005740:	007a1200 	.word	0x007a1200
 8005744:	080073b0 	.word	0x080073b0
 8005748:	080073c0 	.word	0x080073c0
 800574c:	003d0900 	.word	0x003d0900

08005750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005754:	4b02      	ldr	r3, [pc, #8]	@ (8005760 <HAL_RCC_GetHCLKFreq+0x10>)
 8005756:	681b      	ldr	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr
 8005760:	20000034 	.word	0x20000034

08005764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005768:	f7ff fff2 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 800576c:	4602      	mov	r2, r0
 800576e:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	4903      	ldr	r1, [pc, #12]	@ (8005788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800577a:	5ccb      	ldrb	r3, [r1, r3]
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005780:	4618      	mov	r0, r3
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40021000 	.word	0x40021000
 8005788:	080073a8 	.word	0x080073a8

0800578c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005790:	f7ff ffde 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8005794:	4602      	mov	r2, r0
 8005796:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	0adb      	lsrs	r3, r3, #11
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	4903      	ldr	r1, [pc, #12]	@ (80057b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a2:	5ccb      	ldrb	r3, [r1, r3]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40021000 	.word	0x40021000
 80057b0:	080073a8 	.word	0x080073a8

080057b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057bc:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <RCC_Delay+0x34>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a0a      	ldr	r2, [pc, #40]	@ (80057ec <RCC_Delay+0x38>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	0a5b      	lsrs	r3, r3, #9
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057d0:	bf00      	nop
  }
  while (Delay --);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1e5a      	subs	r2, r3, #1
 80057d6:	60fa      	str	r2, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f9      	bne.n	80057d0 <RCC_Delay+0x1c>
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr
 80057e8:	20000034 	.word	0x20000034
 80057ec:	10624dd3 	.word	0x10624dd3

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d07d      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800580c:	2300      	movs	r3, #0
 800580e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005810:	4b4f      	ldr	r3, [pc, #316]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10d      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800581c:	4b4c      	ldr	r3, [pc, #304]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	4a4b      	ldr	r2, [pc, #300]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005826:	61d3      	str	r3, [r2, #28]
 8005828:	4b49      	ldr	r3, [pc, #292]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005834:	2301      	movs	r3, #1
 8005836:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005838:	4b46      	ldr	r3, [pc, #280]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d118      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005844:	4b43      	ldr	r3, [pc, #268]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a42      	ldr	r2, [pc, #264]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800584a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800584e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005850:	f7fc ff1a 	bl	8002688 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005856:	e008      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005858:	f7fc ff16 	bl	8002688 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b64      	cmp	r3, #100	@ 0x64
 8005864:	d901      	bls.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e06d      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800586a:	4b3a      	ldr	r3, [pc, #232]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005876:	4b36      	ldr	r3, [pc, #216]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800587e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d02e      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	429a      	cmp	r2, r3
 8005892:	d027      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005894:	4b2e      	ldr	r3, [pc, #184]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800589e:	4b2e      	ldr	r3, [pc, #184]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058aa:	4a29      	ldr	r2, [pc, #164]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d014      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ba:	f7fc fee5 	bl	8002688 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c0:	e00a      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fc fee1 	bl	8002688 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e036      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0ee      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	4917      	ldr	r1, [pc, #92]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d105      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058fc:	4b14      	ldr	r3, [pc, #80]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	4a13      	ldr	r2, [pc, #76]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005906:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005914:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	490b      	ldr	r1, [pc, #44]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005922:	4313      	orrs	r3, r2
 8005924:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005932:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	4904      	ldr	r1, [pc, #16]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005940:	4313      	orrs	r3, r2
 8005942:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
 8005954:	40007000 	.word	0x40007000
 8005958:	42420440 	.word	0x42420440

0800595c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	2300      	movs	r3, #0
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	2300      	movs	r3, #0
 800596e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b10      	cmp	r3, #16
 800597c:	d00a      	beq.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b10      	cmp	r3, #16
 8005982:	f200 808a 	bhi.w	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d045      	beq.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d075      	beq.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005992:	e082      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005994:	4b46      	ldr	r3, [pc, #280]	@ (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800599a:	4b45      	ldr	r3, [pc, #276]	@ (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d07b      	beq.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	0c9b      	lsrs	r3, r3, #18
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	4a41      	ldr	r2, [pc, #260]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80059b0:	5cd3      	ldrb	r3, [r2, r3]
 80059b2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d015      	beq.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059be:	4b3c      	ldr	r3, [pc, #240]	@ (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	0c5b      	lsrs	r3, r3, #17
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	4a3b      	ldr	r2, [pc, #236]	@ (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80059ca:	5cd3      	ldrb	r3, [r2, r3]
 80059cc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00d      	beq.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80059d8:	4a38      	ldr	r2, [pc, #224]	@ (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e004      	b.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4a34      	ldr	r2, [pc, #208]	@ (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80059ee:	fb02 f303 	mul.w	r3, r2, r3
 80059f2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80059f4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a00:	d102      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	61bb      	str	r3, [r7, #24]
      break;
 8005a06:	e04a      	b.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	61bb      	str	r3, [r7, #24]
      break;
 8005a16:	e042      	b.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005a18:	4b25      	ldr	r3, [pc, #148]	@ (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a28:	d108      	bne.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005a34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	e01f      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a46:	d109      	bne.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005a48:	4b19      	ldr	r3, [pc, #100]	@ (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005a54:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	e00f      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a66:	d11c      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a68:	4b11      	ldr	r3, [pc, #68]	@ (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d016      	beq.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005a74:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005a78:	61bb      	str	r3, [r7, #24]
      break;
 8005a7a:	e012      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a7c:	e011      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005a7e:	f7ff fe85 	bl	800578c <HAL_RCC_GetPCLK2Freq>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	0b9b      	lsrs	r3, r3, #14
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	3301      	adds	r3, #1
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a96:	61bb      	str	r3, [r7, #24]
      break;
 8005a98:	e004      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005a9a:	bf00      	nop
 8005a9c:	e002      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005aa2:	bf00      	nop
    }
  }
  return (frequency);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3720      	adds	r7, #32
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	080073c4 	.word	0x080073c4
 8005ab8:	080073d4 	.word	0x080073d4
 8005abc:	007a1200 	.word	0x007a1200
 8005ac0:	003d0900 	.word	0x003d0900
 8005ac4:	aaaaaaab 	.word	0xaaaaaaab

08005ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e041      	b.n	8005b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fc fa58 	bl	8001fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f000 fc4e 	bl	80063a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d001      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e03a      	b.n	8005bf6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a18      	ldr	r2, [pc, #96]	@ (8005c00 <HAL_TIM_Base_Start_IT+0x98>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00e      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x58>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005baa:	d009      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x58>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a14      	ldr	r2, [pc, #80]	@ (8005c04 <HAL_TIM_Base_Start_IT+0x9c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x58>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a13      	ldr	r2, [pc, #76]	@ (8005c08 <HAL_TIM_Base_Start_IT+0xa0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d111      	bne.n	8005be4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b06      	cmp	r3, #6
 8005bd0:	d010      	beq.n	8005bf4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0201 	orr.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be2:	e007      	b.n	8005bf4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40000800 	.word	0x40000800

08005c0c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6a1a      	ldr	r2, [r3, #32]
 8005c2a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10f      	bne.n	8005c54 <HAL_TIM_Base_Stop_IT+0x48>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6a1a      	ldr	r2, [r3, #32]
 8005c3a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d107      	bne.n	8005c54 <HAL_TIM_Base_Stop_IT+0x48>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e041      	b.n	8005cfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f839 	bl	8005d06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f000 fb7e 	bl	80063a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d109      	bne.n	8005d3c <HAL_TIM_PWM_Start+0x24>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	bf14      	ite	ne
 8005d34:	2301      	movne	r3, #1
 8005d36:	2300      	moveq	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	e022      	b.n	8005d82 <HAL_TIM_PWM_Start+0x6a>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d109      	bne.n	8005d56 <HAL_TIM_PWM_Start+0x3e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	bf14      	ite	ne
 8005d4e:	2301      	movne	r3, #1
 8005d50:	2300      	moveq	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	e015      	b.n	8005d82 <HAL_TIM_PWM_Start+0x6a>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d109      	bne.n	8005d70 <HAL_TIM_PWM_Start+0x58>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	bf14      	ite	ne
 8005d68:	2301      	movne	r3, #1
 8005d6a:	2300      	moveq	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	e008      	b.n	8005d82 <HAL_TIM_PWM_Start+0x6a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	bf14      	ite	ne
 8005d7c:	2301      	movne	r3, #1
 8005d7e:	2300      	moveq	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e05e      	b.n	8005e48 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <HAL_TIM_PWM_Start+0x82>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d98:	e013      	b.n	8005dc2 <HAL_TIM_PWM_Start+0xaa>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d104      	bne.n	8005daa <HAL_TIM_PWM_Start+0x92>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005da8:	e00b      	b.n	8005dc2 <HAL_TIM_PWM_Start+0xaa>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d104      	bne.n	8005dba <HAL_TIM_PWM_Start+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005db8:	e003      	b.n	8005dc2 <HAL_TIM_PWM_Start+0xaa>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fd78 	bl	80068c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e50 <HAL_TIM_PWM_Start+0x138>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d107      	bne.n	8005dea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005de8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a18      	ldr	r2, [pc, #96]	@ (8005e50 <HAL_TIM_PWM_Start+0x138>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <HAL_TIM_PWM_Start+0xfa>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dfc:	d009      	beq.n	8005e12 <HAL_TIM_PWM_Start+0xfa>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a14      	ldr	r2, [pc, #80]	@ (8005e54 <HAL_TIM_PWM_Start+0x13c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_TIM_PWM_Start+0xfa>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a12      	ldr	r2, [pc, #72]	@ (8005e58 <HAL_TIM_PWM_Start+0x140>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d111      	bne.n	8005e36 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b06      	cmp	r3, #6
 8005e22:	d010      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e34:	e007      	b.n	8005e46 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800

08005e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d020      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01b      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0202 	mvn.w	r2, #2
 8005e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa63 	bl	8006372 <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa56 	bl	8006360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fa65 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0204 	mvn.w	r2, #4
 8005edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa3d 	bl	8006372 <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa30 	bl	8006360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa3f 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0208 	mvn.w	r2, #8
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa17 	bl	8006372 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa0a 	bl	8006360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fa19 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0310 	and.w	r3, r3, #16
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d020      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0210 	mvn.w	r2, #16
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2208      	movs	r2, #8
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f9f1 	bl	8006372 <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f9e4 	bl	8006360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f9f3 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d007      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0201 	mvn.w	r2, #1
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f9c3 	bl	800634e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00c      	beq.n	8005fec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fcf5 	bl	80069d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00c      	beq.n	8006010 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f9c3 	bl	8006396 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00c      	beq.n	8006034 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0220 	mvn.w	r2, #32
 800602c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fcc8 	bl	80069c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006034:	bf00      	nop
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006056:	2302      	movs	r3, #2
 8006058:	e0ae      	b.n	80061b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b0c      	cmp	r3, #12
 8006066:	f200 809f 	bhi.w	80061a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800606a:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	080060a5 	.word	0x080060a5
 8006074:	080061a9 	.word	0x080061a9
 8006078:	080061a9 	.word	0x080061a9
 800607c:	080061a9 	.word	0x080061a9
 8006080:	080060e5 	.word	0x080060e5
 8006084:	080061a9 	.word	0x080061a9
 8006088:	080061a9 	.word	0x080061a9
 800608c:	080061a9 	.word	0x080061a9
 8006090:	08006127 	.word	0x08006127
 8006094:	080061a9 	.word	0x080061a9
 8006098:	080061a9 	.word	0x080061a9
 800609c:	080061a9 	.word	0x080061a9
 80060a0:	08006167 	.word	0x08006167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f9ea 	bl	8006484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0208 	orr.w	r2, r2, #8
 80060be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0204 	bic.w	r2, r2, #4
 80060ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6999      	ldr	r1, [r3, #24]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	619a      	str	r2, [r3, #24]
      break;
 80060e2:	e064      	b.n	80061ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fa30 	bl	8006550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800610e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6999      	ldr	r1, [r3, #24]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	021a      	lsls	r2, r3, #8
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	619a      	str	r2, [r3, #24]
      break;
 8006124:	e043      	b.n	80061ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fa79 	bl	8006624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0208 	orr.w	r2, r2, #8
 8006140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0204 	bic.w	r2, r2, #4
 8006150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69d9      	ldr	r1, [r3, #28]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	61da      	str	r2, [r3, #28]
      break;
 8006164:	e023      	b.n	80061ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fac3 	bl	80066f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69d9      	ldr	r1, [r3, #28]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	021a      	lsls	r2, r3, #8
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	61da      	str	r2, [r3, #28]
      break;
 80061a6:	e002      	b.n	80061ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	75fb      	strb	r3, [r7, #23]
      break;
 80061ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_TIM_ConfigClockSource+0x1c>
 80061d8:	2302      	movs	r3, #2
 80061da:	e0b4      	b.n	8006346 <HAL_TIM_ConfigClockSource+0x186>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006202:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006214:	d03e      	beq.n	8006294 <HAL_TIM_ConfigClockSource+0xd4>
 8006216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800621a:	f200 8087 	bhi.w	800632c <HAL_TIM_ConfigClockSource+0x16c>
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006222:	f000 8086 	beq.w	8006332 <HAL_TIM_ConfigClockSource+0x172>
 8006226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800622a:	d87f      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 800622c:	2b70      	cmp	r3, #112	@ 0x70
 800622e:	d01a      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0xa6>
 8006230:	2b70      	cmp	r3, #112	@ 0x70
 8006232:	d87b      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 8006234:	2b60      	cmp	r3, #96	@ 0x60
 8006236:	d050      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x11a>
 8006238:	2b60      	cmp	r3, #96	@ 0x60
 800623a:	d877      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 800623c:	2b50      	cmp	r3, #80	@ 0x50
 800623e:	d03c      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0xfa>
 8006240:	2b50      	cmp	r3, #80	@ 0x50
 8006242:	d873      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 8006244:	2b40      	cmp	r3, #64	@ 0x40
 8006246:	d058      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x13a>
 8006248:	2b40      	cmp	r3, #64	@ 0x40
 800624a:	d86f      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 800624c:	2b30      	cmp	r3, #48	@ 0x30
 800624e:	d064      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x15a>
 8006250:	2b30      	cmp	r3, #48	@ 0x30
 8006252:	d86b      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 8006254:	2b20      	cmp	r3, #32
 8006256:	d060      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x15a>
 8006258:	2b20      	cmp	r3, #32
 800625a:	d867      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d05c      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x15a>
 8006260:	2b10      	cmp	r3, #16
 8006262:	d05a      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x15a>
 8006264:	e062      	b.n	800632c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006276:	f000 fb04 	bl	8006882 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006288:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	609a      	str	r2, [r3, #8]
      break;
 8006292:	e04f      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062a4:	f000 faed 	bl	8006882 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062b6:	609a      	str	r2, [r3, #8]
      break;
 80062b8:	e03c      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c6:	461a      	mov	r2, r3
 80062c8:	f000 fa64 	bl	8006794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2150      	movs	r1, #80	@ 0x50
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fabb 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 80062d8:	e02c      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062e6:	461a      	mov	r2, r3
 80062e8:	f000 fa82 	bl	80067f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2160      	movs	r1, #96	@ 0x60
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 faab 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 80062f8:	e01c      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006306:	461a      	mov	r2, r3
 8006308:	f000 fa44 	bl	8006794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2140      	movs	r1, #64	@ 0x40
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fa9b 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 8006318:	e00c      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f000 fa92 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 800632a:	e003      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
      break;
 8006330:	e000      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr

08006372 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr

08006384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr

08006396 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006478 <TIM_Base_SetConfig+0xd0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00b      	beq.n	80063d8 <TIM_Base_SetConfig+0x30>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c6:	d007      	beq.n	80063d8 <TIM_Base_SetConfig+0x30>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a2c      	ldr	r2, [pc, #176]	@ (800647c <TIM_Base_SetConfig+0xd4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_Base_SetConfig+0x30>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006480 <TIM_Base_SetConfig+0xd8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d108      	bne.n	80063ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a22      	ldr	r2, [pc, #136]	@ (8006478 <TIM_Base_SetConfig+0xd0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00b      	beq.n	800640a <TIM_Base_SetConfig+0x62>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f8:	d007      	beq.n	800640a <TIM_Base_SetConfig+0x62>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a1f      	ldr	r2, [pc, #124]	@ (800647c <TIM_Base_SetConfig+0xd4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d003      	beq.n	800640a <TIM_Base_SetConfig+0x62>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a1e      	ldr	r2, [pc, #120]	@ (8006480 <TIM_Base_SetConfig+0xd8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d108      	bne.n	800641c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a0d      	ldr	r2, [pc, #52]	@ (8006478 <TIM_Base_SetConfig+0xd0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d103      	bne.n	8006450 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f023 0201 	bic.w	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	611a      	str	r2, [r3, #16]
  }
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800

08006484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	f023 0201 	bic.w	r2, r3, #1
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f023 0302 	bic.w	r3, r3, #2
 80064cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a1c      	ldr	r2, [pc, #112]	@ (800654c <TIM_OC1_SetConfig+0xc8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10c      	bne.n	80064fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0308 	bic.w	r3, r3, #8
 80064e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 0304 	bic.w	r3, r3, #4
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a13      	ldr	r2, [pc, #76]	@ (800654c <TIM_OC1_SetConfig+0xc8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d111      	bne.n	8006526 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	621a      	str	r2, [r3, #32]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40012c00 	.word	0x40012c00

08006550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f023 0210 	bic.w	r2, r3, #16
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800657e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f023 0320 	bic.w	r3, r3, #32
 800659a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006620 <TIM_OC2_SetConfig+0xd0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d10d      	bne.n	80065cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a14      	ldr	r2, [pc, #80]	@ (8006620 <TIM_OC2_SetConfig+0xd0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d113      	bne.n	80065fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr
 8006620:	40012c00 	.word	0x40012c00

08006624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800666c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a1d      	ldr	r2, [pc, #116]	@ (80066f4 <TIM_OC3_SetConfig+0xd0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d10d      	bne.n	800669e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800669c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a14      	ldr	r2, [pc, #80]	@ (80066f4 <TIM_OC3_SetConfig+0xd0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d113      	bne.n	80066ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	621a      	str	r2, [r3, #32]
}
 80066e8:	bf00      	nop
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40012c00 	.word	0x40012c00

080066f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800672e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	031b      	lsls	r3, r3, #12
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a0f      	ldr	r2, [pc, #60]	@ (8006790 <TIM_OC4_SetConfig+0x98>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d109      	bne.n	800676c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800675e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	019b      	lsls	r3, r3, #6
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	621a      	str	r2, [r3, #32]
}
 8006786:	bf00      	nop
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr
 8006790:	40012c00 	.word	0x40012c00

08006794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f023 0201 	bic.w	r2, r3, #1
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f023 030a 	bic.w	r3, r3, #10
 80067d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	621a      	str	r2, [r3, #32]
}
 80067e6:	bf00      	nop
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr

080067f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f023 0210 	bic.w	r2, r3, #16
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800681a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	031b      	lsls	r3, r3, #12
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800682c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	621a      	str	r2, [r3, #32]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	f043 0307 	orr.w	r3, r3, #7
 8006870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	609a      	str	r2, [r3, #8]
}
 8006878:	bf00      	nop
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr

08006882 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006882:	b480      	push	{r7}
 8006884:	b087      	sub	sp, #28
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
 800688e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800689c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	021a      	lsls	r2, r3, #8
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	431a      	orrs	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	609a      	str	r2, [r3, #8]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bc80      	pop	{r7}
 80068be:	4770      	bx	lr

080068c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2201      	movs	r2, #1
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1a      	ldr	r2, [r3, #32]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	43db      	mvns	r3, r3
 80068e2:	401a      	ands	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	fa01 f303 	lsl.w	r3, r1, r3
 80068f8:	431a      	orrs	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	621a      	str	r2, [r3, #32]
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr

08006908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800691c:	2302      	movs	r3, #2
 800691e:	e046      	b.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a16      	ldr	r2, [pc, #88]	@ (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00e      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800696c:	d009      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a12      	ldr	r2, [pc, #72]	@ (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d004      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a10      	ldr	r2, [pc, #64]	@ (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d10c      	bne.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	4313      	orrs	r3, r2
 8006992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800

080069c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr

080069d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <siprintf>:
 80069e8:	b40e      	push	{r1, r2, r3}
 80069ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069ee:	b500      	push	{lr}
 80069f0:	b09c      	sub	sp, #112	@ 0x70
 80069f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80069f4:	9002      	str	r0, [sp, #8]
 80069f6:	9006      	str	r0, [sp, #24]
 80069f8:	9107      	str	r1, [sp, #28]
 80069fa:	9104      	str	r1, [sp, #16]
 80069fc:	4808      	ldr	r0, [pc, #32]	@ (8006a20 <siprintf+0x38>)
 80069fe:	4909      	ldr	r1, [pc, #36]	@ (8006a24 <siprintf+0x3c>)
 8006a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a04:	9105      	str	r1, [sp, #20]
 8006a06:	6800      	ldr	r0, [r0, #0]
 8006a08:	a902      	add	r1, sp, #8
 8006a0a:	9301      	str	r3, [sp, #4]
 8006a0c:	f000 f9a0 	bl	8006d50 <_svfiprintf_r>
 8006a10:	2200      	movs	r2, #0
 8006a12:	9b02      	ldr	r3, [sp, #8]
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	b01c      	add	sp, #112	@ 0x70
 8006a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a1c:	b003      	add	sp, #12
 8006a1e:	4770      	bx	lr
 8006a20:	20000044 	.word	0x20000044
 8006a24:	ffff0208 	.word	0xffff0208

08006a28 <memset>:
 8006a28:	4603      	mov	r3, r0
 8006a2a:	4402      	add	r2, r0
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d100      	bne.n	8006a32 <memset+0xa>
 8006a30:	4770      	bx	lr
 8006a32:	f803 1b01 	strb.w	r1, [r3], #1
 8006a36:	e7f9      	b.n	8006a2c <memset+0x4>

08006a38 <__errno>:
 8006a38:	4b01      	ldr	r3, [pc, #4]	@ (8006a40 <__errno+0x8>)
 8006a3a:	6818      	ldr	r0, [r3, #0]
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000044 	.word	0x20000044

08006a44 <__libc_init_array>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	2600      	movs	r6, #0
 8006a48:	4d0c      	ldr	r5, [pc, #48]	@ (8006a7c <__libc_init_array+0x38>)
 8006a4a:	4c0d      	ldr	r4, [pc, #52]	@ (8006a80 <__libc_init_array+0x3c>)
 8006a4c:	1b64      	subs	r4, r4, r5
 8006a4e:	10a4      	asrs	r4, r4, #2
 8006a50:	42a6      	cmp	r6, r4
 8006a52:	d109      	bne.n	8006a68 <__libc_init_array+0x24>
 8006a54:	f000 fc78 	bl	8007348 <_init>
 8006a58:	2600      	movs	r6, #0
 8006a5a:	4d0a      	ldr	r5, [pc, #40]	@ (8006a84 <__libc_init_array+0x40>)
 8006a5c:	4c0a      	ldr	r4, [pc, #40]	@ (8006a88 <__libc_init_array+0x44>)
 8006a5e:	1b64      	subs	r4, r4, r5
 8006a60:	10a4      	asrs	r4, r4, #2
 8006a62:	42a6      	cmp	r6, r4
 8006a64:	d105      	bne.n	8006a72 <__libc_init_array+0x2e>
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a6c:	4798      	blx	r3
 8006a6e:	3601      	adds	r6, #1
 8006a70:	e7ee      	b.n	8006a50 <__libc_init_array+0xc>
 8006a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a76:	4798      	blx	r3
 8006a78:	3601      	adds	r6, #1
 8006a7a:	e7f2      	b.n	8006a62 <__libc_init_array+0x1e>
 8006a7c:	0800740c 	.word	0x0800740c
 8006a80:	0800740c 	.word	0x0800740c
 8006a84:	0800740c 	.word	0x0800740c
 8006a88:	08007410 	.word	0x08007410

08006a8c <__retarget_lock_acquire_recursive>:
 8006a8c:	4770      	bx	lr

08006a8e <__retarget_lock_release_recursive>:
 8006a8e:	4770      	bx	lr

08006a90 <memcpy>:
 8006a90:	440a      	add	r2, r1
 8006a92:	4291      	cmp	r1, r2
 8006a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a98:	d100      	bne.n	8006a9c <memcpy+0xc>
 8006a9a:	4770      	bx	lr
 8006a9c:	b510      	push	{r4, lr}
 8006a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aa2:	4291      	cmp	r1, r2
 8006aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa8:	d1f9      	bne.n	8006a9e <memcpy+0xe>
 8006aaa:	bd10      	pop	{r4, pc}

08006aac <_free_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	4605      	mov	r5, r0
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	d040      	beq.n	8006b36 <_free_r+0x8a>
 8006ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab8:	1f0c      	subs	r4, r1, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	bfb8      	it	lt
 8006abe:	18e4      	addlt	r4, r4, r3
 8006ac0:	f000 f8de 	bl	8006c80 <__malloc_lock>
 8006ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b38 <_free_r+0x8c>)
 8006ac6:	6813      	ldr	r3, [r2, #0]
 8006ac8:	b933      	cbnz	r3, 8006ad8 <_free_r+0x2c>
 8006aca:	6063      	str	r3, [r4, #4]
 8006acc:	6014      	str	r4, [r2, #0]
 8006ace:	4628      	mov	r0, r5
 8006ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ad4:	f000 b8da 	b.w	8006c8c <__malloc_unlock>
 8006ad8:	42a3      	cmp	r3, r4
 8006ada:	d908      	bls.n	8006aee <_free_r+0x42>
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	1821      	adds	r1, r4, r0
 8006ae0:	428b      	cmp	r3, r1
 8006ae2:	bf01      	itttt	eq
 8006ae4:	6819      	ldreq	r1, [r3, #0]
 8006ae6:	685b      	ldreq	r3, [r3, #4]
 8006ae8:	1809      	addeq	r1, r1, r0
 8006aea:	6021      	streq	r1, [r4, #0]
 8006aec:	e7ed      	b.n	8006aca <_free_r+0x1e>
 8006aee:	461a      	mov	r2, r3
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	b10b      	cbz	r3, 8006af8 <_free_r+0x4c>
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	d9fa      	bls.n	8006aee <_free_r+0x42>
 8006af8:	6811      	ldr	r1, [r2, #0]
 8006afa:	1850      	adds	r0, r2, r1
 8006afc:	42a0      	cmp	r0, r4
 8006afe:	d10b      	bne.n	8006b18 <_free_r+0x6c>
 8006b00:	6820      	ldr	r0, [r4, #0]
 8006b02:	4401      	add	r1, r0
 8006b04:	1850      	adds	r0, r2, r1
 8006b06:	4283      	cmp	r3, r0
 8006b08:	6011      	str	r1, [r2, #0]
 8006b0a:	d1e0      	bne.n	8006ace <_free_r+0x22>
 8006b0c:	6818      	ldr	r0, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	4408      	add	r0, r1
 8006b12:	6010      	str	r0, [r2, #0]
 8006b14:	6053      	str	r3, [r2, #4]
 8006b16:	e7da      	b.n	8006ace <_free_r+0x22>
 8006b18:	d902      	bls.n	8006b20 <_free_r+0x74>
 8006b1a:	230c      	movs	r3, #12
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	e7d6      	b.n	8006ace <_free_r+0x22>
 8006b20:	6820      	ldr	r0, [r4, #0]
 8006b22:	1821      	adds	r1, r4, r0
 8006b24:	428b      	cmp	r3, r1
 8006b26:	bf01      	itttt	eq
 8006b28:	6819      	ldreq	r1, [r3, #0]
 8006b2a:	685b      	ldreq	r3, [r3, #4]
 8006b2c:	1809      	addeq	r1, r1, r0
 8006b2e:	6021      	streq	r1, [r4, #0]
 8006b30:	6063      	str	r3, [r4, #4]
 8006b32:	6054      	str	r4, [r2, #4]
 8006b34:	e7cb      	b.n	8006ace <_free_r+0x22>
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	2000040c 	.word	0x2000040c

08006b3c <sbrk_aligned>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8006b7c <sbrk_aligned+0x40>)
 8006b40:	460c      	mov	r4, r1
 8006b42:	6831      	ldr	r1, [r6, #0]
 8006b44:	4605      	mov	r5, r0
 8006b46:	b911      	cbnz	r1, 8006b4e <sbrk_aligned+0x12>
 8006b48:	f000 fbaa 	bl	80072a0 <_sbrk_r>
 8006b4c:	6030      	str	r0, [r6, #0]
 8006b4e:	4621      	mov	r1, r4
 8006b50:	4628      	mov	r0, r5
 8006b52:	f000 fba5 	bl	80072a0 <_sbrk_r>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d103      	bne.n	8006b62 <sbrk_aligned+0x26>
 8006b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8006b5e:	4620      	mov	r0, r4
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
 8006b62:	1cc4      	adds	r4, r0, #3
 8006b64:	f024 0403 	bic.w	r4, r4, #3
 8006b68:	42a0      	cmp	r0, r4
 8006b6a:	d0f8      	beq.n	8006b5e <sbrk_aligned+0x22>
 8006b6c:	1a21      	subs	r1, r4, r0
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 fb96 	bl	80072a0 <_sbrk_r>
 8006b74:	3001      	adds	r0, #1
 8006b76:	d1f2      	bne.n	8006b5e <sbrk_aligned+0x22>
 8006b78:	e7ef      	b.n	8006b5a <sbrk_aligned+0x1e>
 8006b7a:	bf00      	nop
 8006b7c:	20000408 	.word	0x20000408

08006b80 <_malloc_r>:
 8006b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b84:	1ccd      	adds	r5, r1, #3
 8006b86:	f025 0503 	bic.w	r5, r5, #3
 8006b8a:	3508      	adds	r5, #8
 8006b8c:	2d0c      	cmp	r5, #12
 8006b8e:	bf38      	it	cc
 8006b90:	250c      	movcc	r5, #12
 8006b92:	2d00      	cmp	r5, #0
 8006b94:	4606      	mov	r6, r0
 8006b96:	db01      	blt.n	8006b9c <_malloc_r+0x1c>
 8006b98:	42a9      	cmp	r1, r5
 8006b9a:	d904      	bls.n	8006ba6 <_malloc_r+0x26>
 8006b9c:	230c      	movs	r3, #12
 8006b9e:	6033      	str	r3, [r6, #0]
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c7c <_malloc_r+0xfc>
 8006baa:	f000 f869 	bl	8006c80 <__malloc_lock>
 8006bae:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb2:	461c      	mov	r4, r3
 8006bb4:	bb44      	cbnz	r4, 8006c08 <_malloc_r+0x88>
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7ff ffbf 	bl	8006b3c <sbrk_aligned>
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	d158      	bne.n	8006c76 <_malloc_r+0xf6>
 8006bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8006bc8:	4627      	mov	r7, r4
 8006bca:	2f00      	cmp	r7, #0
 8006bcc:	d143      	bne.n	8006c56 <_malloc_r+0xd6>
 8006bce:	2c00      	cmp	r4, #0
 8006bd0:	d04b      	beq.n	8006c6a <_malloc_r+0xea>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	eb04 0903 	add.w	r9, r4, r3
 8006bdc:	f000 fb60 	bl	80072a0 <_sbrk_r>
 8006be0:	4581      	cmp	r9, r0
 8006be2:	d142      	bne.n	8006c6a <_malloc_r+0xea>
 8006be4:	6821      	ldr	r1, [r4, #0]
 8006be6:	4630      	mov	r0, r6
 8006be8:	1a6d      	subs	r5, r5, r1
 8006bea:	4629      	mov	r1, r5
 8006bec:	f7ff ffa6 	bl	8006b3c <sbrk_aligned>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d03a      	beq.n	8006c6a <_malloc_r+0xea>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	442b      	add	r3, r5
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	bb62      	cbnz	r2, 8006c5c <_malloc_r+0xdc>
 8006c02:	f8c8 7000 	str.w	r7, [r8]
 8006c06:	e00f      	b.n	8006c28 <_malloc_r+0xa8>
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	1b52      	subs	r2, r2, r5
 8006c0c:	d420      	bmi.n	8006c50 <_malloc_r+0xd0>
 8006c0e:	2a0b      	cmp	r2, #11
 8006c10:	d917      	bls.n	8006c42 <_malloc_r+0xc2>
 8006c12:	1961      	adds	r1, r4, r5
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	6025      	str	r5, [r4, #0]
 8006c18:	bf18      	it	ne
 8006c1a:	6059      	strne	r1, [r3, #4]
 8006c1c:	6863      	ldr	r3, [r4, #4]
 8006c1e:	bf08      	it	eq
 8006c20:	f8c8 1000 	streq.w	r1, [r8]
 8006c24:	5162      	str	r2, [r4, r5]
 8006c26:	604b      	str	r3, [r1, #4]
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 f82f 	bl	8006c8c <__malloc_unlock>
 8006c2e:	f104 000b 	add.w	r0, r4, #11
 8006c32:	1d23      	adds	r3, r4, #4
 8006c34:	f020 0007 	bic.w	r0, r0, #7
 8006c38:	1ac2      	subs	r2, r0, r3
 8006c3a:	bf1c      	itt	ne
 8006c3c:	1a1b      	subne	r3, r3, r0
 8006c3e:	50a3      	strne	r3, [r4, r2]
 8006c40:	e7af      	b.n	8006ba2 <_malloc_r+0x22>
 8006c42:	6862      	ldr	r2, [r4, #4]
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	bf0c      	ite	eq
 8006c48:	f8c8 2000 	streq.w	r2, [r8]
 8006c4c:	605a      	strne	r2, [r3, #4]
 8006c4e:	e7eb      	b.n	8006c28 <_malloc_r+0xa8>
 8006c50:	4623      	mov	r3, r4
 8006c52:	6864      	ldr	r4, [r4, #4]
 8006c54:	e7ae      	b.n	8006bb4 <_malloc_r+0x34>
 8006c56:	463c      	mov	r4, r7
 8006c58:	687f      	ldr	r7, [r7, #4]
 8006c5a:	e7b6      	b.n	8006bca <_malloc_r+0x4a>
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	42a3      	cmp	r3, r4
 8006c62:	d1fb      	bne.n	8006c5c <_malloc_r+0xdc>
 8006c64:	2300      	movs	r3, #0
 8006c66:	6053      	str	r3, [r2, #4]
 8006c68:	e7de      	b.n	8006c28 <_malloc_r+0xa8>
 8006c6a:	230c      	movs	r3, #12
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	6033      	str	r3, [r6, #0]
 8006c70:	f000 f80c 	bl	8006c8c <__malloc_unlock>
 8006c74:	e794      	b.n	8006ba0 <_malloc_r+0x20>
 8006c76:	6005      	str	r5, [r0, #0]
 8006c78:	e7d6      	b.n	8006c28 <_malloc_r+0xa8>
 8006c7a:	bf00      	nop
 8006c7c:	2000040c 	.word	0x2000040c

08006c80 <__malloc_lock>:
 8006c80:	4801      	ldr	r0, [pc, #4]	@ (8006c88 <__malloc_lock+0x8>)
 8006c82:	f7ff bf03 	b.w	8006a8c <__retarget_lock_acquire_recursive>
 8006c86:	bf00      	nop
 8006c88:	20000404 	.word	0x20000404

08006c8c <__malloc_unlock>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	@ (8006c94 <__malloc_unlock+0x8>)
 8006c8e:	f7ff befe 	b.w	8006a8e <__retarget_lock_release_recursive>
 8006c92:	bf00      	nop
 8006c94:	20000404 	.word	0x20000404

08006c98 <__ssputs_r>:
 8006c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9c:	461f      	mov	r7, r3
 8006c9e:	688e      	ldr	r6, [r1, #8]
 8006ca0:	4682      	mov	sl, r0
 8006ca2:	42be      	cmp	r6, r7
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	4690      	mov	r8, r2
 8006ca8:	680b      	ldr	r3, [r1, #0]
 8006caa:	d82d      	bhi.n	8006d08 <__ssputs_r+0x70>
 8006cac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006cb4:	d026      	beq.n	8006d04 <__ssputs_r+0x6c>
 8006cb6:	6965      	ldr	r5, [r4, #20]
 8006cb8:	6909      	ldr	r1, [r1, #16]
 8006cba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cbe:	eba3 0901 	sub.w	r9, r3, r1
 8006cc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cc6:	1c7b      	adds	r3, r7, #1
 8006cc8:	444b      	add	r3, r9
 8006cca:	106d      	asrs	r5, r5, #1
 8006ccc:	429d      	cmp	r5, r3
 8006cce:	bf38      	it	cc
 8006cd0:	461d      	movcc	r5, r3
 8006cd2:	0553      	lsls	r3, r2, #21
 8006cd4:	d527      	bpl.n	8006d26 <__ssputs_r+0x8e>
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	f7ff ff52 	bl	8006b80 <_malloc_r>
 8006cdc:	4606      	mov	r6, r0
 8006cde:	b360      	cbz	r0, 8006d3a <__ssputs_r+0xa2>
 8006ce0:	464a      	mov	r2, r9
 8006ce2:	6921      	ldr	r1, [r4, #16]
 8006ce4:	f7ff fed4 	bl	8006a90 <memcpy>
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	6126      	str	r6, [r4, #16]
 8006cf6:	444e      	add	r6, r9
 8006cf8:	6026      	str	r6, [r4, #0]
 8006cfa:	463e      	mov	r6, r7
 8006cfc:	6165      	str	r5, [r4, #20]
 8006cfe:	eba5 0509 	sub.w	r5, r5, r9
 8006d02:	60a5      	str	r5, [r4, #8]
 8006d04:	42be      	cmp	r6, r7
 8006d06:	d900      	bls.n	8006d0a <__ssputs_r+0x72>
 8006d08:	463e      	mov	r6, r7
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	6820      	ldr	r0, [r4, #0]
 8006d10:	f000 faac 	bl	800726c <memmove>
 8006d14:	2000      	movs	r0, #0
 8006d16:	68a3      	ldr	r3, [r4, #8]
 8006d18:	1b9b      	subs	r3, r3, r6
 8006d1a:	60a3      	str	r3, [r4, #8]
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	4433      	add	r3, r6
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d26:	462a      	mov	r2, r5
 8006d28:	f000 fad8 	bl	80072dc <_realloc_r>
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d1e0      	bne.n	8006cf4 <__ssputs_r+0x5c>
 8006d32:	4650      	mov	r0, sl
 8006d34:	6921      	ldr	r1, [r4, #16]
 8006d36:	f7ff feb9 	bl	8006aac <_free_r>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	f8ca 3000 	str.w	r3, [sl]
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295
 8006d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	e7e9      	b.n	8006d22 <__ssputs_r+0x8a>
	...

08006d50 <_svfiprintf_r>:
 8006d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	4698      	mov	r8, r3
 8006d56:	898b      	ldrh	r3, [r1, #12]
 8006d58:	4607      	mov	r7, r0
 8006d5a:	061b      	lsls	r3, r3, #24
 8006d5c:	460d      	mov	r5, r1
 8006d5e:	4614      	mov	r4, r2
 8006d60:	b09d      	sub	sp, #116	@ 0x74
 8006d62:	d510      	bpl.n	8006d86 <_svfiprintf_r+0x36>
 8006d64:	690b      	ldr	r3, [r1, #16]
 8006d66:	b973      	cbnz	r3, 8006d86 <_svfiprintf_r+0x36>
 8006d68:	2140      	movs	r1, #64	@ 0x40
 8006d6a:	f7ff ff09 	bl	8006b80 <_malloc_r>
 8006d6e:	6028      	str	r0, [r5, #0]
 8006d70:	6128      	str	r0, [r5, #16]
 8006d72:	b930      	cbnz	r0, 8006d82 <_svfiprintf_r+0x32>
 8006d74:	230c      	movs	r3, #12
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	b01d      	add	sp, #116	@ 0x74
 8006d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d82:	2340      	movs	r3, #64	@ 0x40
 8006d84:	616b      	str	r3, [r5, #20]
 8006d86:	2300      	movs	r3, #0
 8006d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d8a:	2320      	movs	r3, #32
 8006d8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d90:	2330      	movs	r3, #48	@ 0x30
 8006d92:	f04f 0901 	mov.w	r9, #1
 8006d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006f34 <_svfiprintf_r+0x1e4>
 8006d9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006da2:	4623      	mov	r3, r4
 8006da4:	469a      	mov	sl, r3
 8006da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006daa:	b10a      	cbz	r2, 8006db0 <_svfiprintf_r+0x60>
 8006dac:	2a25      	cmp	r2, #37	@ 0x25
 8006dae:	d1f9      	bne.n	8006da4 <_svfiprintf_r+0x54>
 8006db0:	ebba 0b04 	subs.w	fp, sl, r4
 8006db4:	d00b      	beq.n	8006dce <_svfiprintf_r+0x7e>
 8006db6:	465b      	mov	r3, fp
 8006db8:	4622      	mov	r2, r4
 8006dba:	4629      	mov	r1, r5
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	f7ff ff6b 	bl	8006c98 <__ssputs_r>
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f000 80a7 	beq.w	8006f16 <_svfiprintf_r+0x1c6>
 8006dc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dca:	445a      	add	r2, fp
 8006dcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dce:	f89a 3000 	ldrb.w	r3, [sl]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 809f 	beq.w	8006f16 <_svfiprintf_r+0x1c6>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f04f 32ff 	mov.w	r2, #4294967295
 8006dde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006de2:	f10a 0a01 	add.w	sl, sl, #1
 8006de6:	9304      	str	r3, [sp, #16]
 8006de8:	9307      	str	r3, [sp, #28]
 8006dea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006dee:	931a      	str	r3, [sp, #104]	@ 0x68
 8006df0:	4654      	mov	r4, sl
 8006df2:	2205      	movs	r2, #5
 8006df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df8:	484e      	ldr	r0, [pc, #312]	@ (8006f34 <_svfiprintf_r+0x1e4>)
 8006dfa:	f000 fa61 	bl	80072c0 <memchr>
 8006dfe:	9a04      	ldr	r2, [sp, #16]
 8006e00:	b9d8      	cbnz	r0, 8006e3a <_svfiprintf_r+0xea>
 8006e02:	06d0      	lsls	r0, r2, #27
 8006e04:	bf44      	itt	mi
 8006e06:	2320      	movmi	r3, #32
 8006e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e0c:	0711      	lsls	r1, r2, #28
 8006e0e:	bf44      	itt	mi
 8006e10:	232b      	movmi	r3, #43	@ 0x2b
 8006e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e16:	f89a 3000 	ldrb.w	r3, [sl]
 8006e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e1c:	d015      	beq.n	8006e4a <_svfiprintf_r+0xfa>
 8006e1e:	4654      	mov	r4, sl
 8006e20:	2000      	movs	r0, #0
 8006e22:	f04f 0c0a 	mov.w	ip, #10
 8006e26:	9a07      	ldr	r2, [sp, #28]
 8006e28:	4621      	mov	r1, r4
 8006e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e2e:	3b30      	subs	r3, #48	@ 0x30
 8006e30:	2b09      	cmp	r3, #9
 8006e32:	d94b      	bls.n	8006ecc <_svfiprintf_r+0x17c>
 8006e34:	b1b0      	cbz	r0, 8006e64 <_svfiprintf_r+0x114>
 8006e36:	9207      	str	r2, [sp, #28]
 8006e38:	e014      	b.n	8006e64 <_svfiprintf_r+0x114>
 8006e3a:	eba0 0308 	sub.w	r3, r0, r8
 8006e3e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e42:	4313      	orrs	r3, r2
 8006e44:	46a2      	mov	sl, r4
 8006e46:	9304      	str	r3, [sp, #16]
 8006e48:	e7d2      	b.n	8006df0 <_svfiprintf_r+0xa0>
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	1d19      	adds	r1, r3, #4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	9103      	str	r1, [sp, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	bfbb      	ittet	lt
 8006e56:	425b      	neglt	r3, r3
 8006e58:	f042 0202 	orrlt.w	r2, r2, #2
 8006e5c:	9307      	strge	r3, [sp, #28]
 8006e5e:	9307      	strlt	r3, [sp, #28]
 8006e60:	bfb8      	it	lt
 8006e62:	9204      	strlt	r2, [sp, #16]
 8006e64:	7823      	ldrb	r3, [r4, #0]
 8006e66:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e68:	d10a      	bne.n	8006e80 <_svfiprintf_r+0x130>
 8006e6a:	7863      	ldrb	r3, [r4, #1]
 8006e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e6e:	d132      	bne.n	8006ed6 <_svfiprintf_r+0x186>
 8006e70:	9b03      	ldr	r3, [sp, #12]
 8006e72:	3402      	adds	r4, #2
 8006e74:	1d1a      	adds	r2, r3, #4
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	9203      	str	r2, [sp, #12]
 8006e7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e7e:	9305      	str	r3, [sp, #20]
 8006e80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006f38 <_svfiprintf_r+0x1e8>
 8006e84:	2203      	movs	r2, #3
 8006e86:	4650      	mov	r0, sl
 8006e88:	7821      	ldrb	r1, [r4, #0]
 8006e8a:	f000 fa19 	bl	80072c0 <memchr>
 8006e8e:	b138      	cbz	r0, 8006ea0 <_svfiprintf_r+0x150>
 8006e90:	2240      	movs	r2, #64	@ 0x40
 8006e92:	9b04      	ldr	r3, [sp, #16]
 8006e94:	eba0 000a 	sub.w	r0, r0, sl
 8006e98:	4082      	lsls	r2, r0
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	3401      	adds	r4, #1
 8006e9e:	9304      	str	r3, [sp, #16]
 8006ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ea4:	2206      	movs	r2, #6
 8006ea6:	4825      	ldr	r0, [pc, #148]	@ (8006f3c <_svfiprintf_r+0x1ec>)
 8006ea8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006eac:	f000 fa08 	bl	80072c0 <memchr>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d036      	beq.n	8006f22 <_svfiprintf_r+0x1d2>
 8006eb4:	4b22      	ldr	r3, [pc, #136]	@ (8006f40 <_svfiprintf_r+0x1f0>)
 8006eb6:	bb1b      	cbnz	r3, 8006f00 <_svfiprintf_r+0x1b0>
 8006eb8:	9b03      	ldr	r3, [sp, #12]
 8006eba:	3307      	adds	r3, #7
 8006ebc:	f023 0307 	bic.w	r3, r3, #7
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	9303      	str	r3, [sp, #12]
 8006ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec6:	4433      	add	r3, r6
 8006ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eca:	e76a      	b.n	8006da2 <_svfiprintf_r+0x52>
 8006ecc:	460c      	mov	r4, r1
 8006ece:	2001      	movs	r0, #1
 8006ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ed4:	e7a8      	b.n	8006e28 <_svfiprintf_r+0xd8>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f04f 0c0a 	mov.w	ip, #10
 8006edc:	4619      	mov	r1, r3
 8006ede:	3401      	adds	r4, #1
 8006ee0:	9305      	str	r3, [sp, #20]
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ee8:	3a30      	subs	r2, #48	@ 0x30
 8006eea:	2a09      	cmp	r2, #9
 8006eec:	d903      	bls.n	8006ef6 <_svfiprintf_r+0x1a6>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0c6      	beq.n	8006e80 <_svfiprintf_r+0x130>
 8006ef2:	9105      	str	r1, [sp, #20]
 8006ef4:	e7c4      	b.n	8006e80 <_svfiprintf_r+0x130>
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	2301      	movs	r3, #1
 8006efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006efe:	e7f0      	b.n	8006ee2 <_svfiprintf_r+0x192>
 8006f00:	ab03      	add	r3, sp, #12
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	462a      	mov	r2, r5
 8006f06:	4638      	mov	r0, r7
 8006f08:	4b0e      	ldr	r3, [pc, #56]	@ (8006f44 <_svfiprintf_r+0x1f4>)
 8006f0a:	a904      	add	r1, sp, #16
 8006f0c:	f3af 8000 	nop.w
 8006f10:	1c42      	adds	r2, r0, #1
 8006f12:	4606      	mov	r6, r0
 8006f14:	d1d6      	bne.n	8006ec4 <_svfiprintf_r+0x174>
 8006f16:	89ab      	ldrh	r3, [r5, #12]
 8006f18:	065b      	lsls	r3, r3, #25
 8006f1a:	f53f af2d 	bmi.w	8006d78 <_svfiprintf_r+0x28>
 8006f1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f20:	e72c      	b.n	8006d7c <_svfiprintf_r+0x2c>
 8006f22:	ab03      	add	r3, sp, #12
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	462a      	mov	r2, r5
 8006f28:	4638      	mov	r0, r7
 8006f2a:	4b06      	ldr	r3, [pc, #24]	@ (8006f44 <_svfiprintf_r+0x1f4>)
 8006f2c:	a904      	add	r1, sp, #16
 8006f2e:	f000 f87d 	bl	800702c <_printf_i>
 8006f32:	e7ed      	b.n	8006f10 <_svfiprintf_r+0x1c0>
 8006f34:	080073d6 	.word	0x080073d6
 8006f38:	080073dc 	.word	0x080073dc
 8006f3c:	080073e0 	.word	0x080073e0
 8006f40:	00000000 	.word	0x00000000
 8006f44:	08006c99 	.word	0x08006c99

08006f48 <_printf_common>:
 8006f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f4c:	4616      	mov	r6, r2
 8006f4e:	4698      	mov	r8, r3
 8006f50:	688a      	ldr	r2, [r1, #8]
 8006f52:	690b      	ldr	r3, [r1, #16]
 8006f54:	4607      	mov	r7, r0
 8006f56:	4293      	cmp	r3, r2
 8006f58:	bfb8      	it	lt
 8006f5a:	4613      	movlt	r3, r2
 8006f5c:	6033      	str	r3, [r6, #0]
 8006f5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f62:	460c      	mov	r4, r1
 8006f64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f68:	b10a      	cbz	r2, 8006f6e <_printf_common+0x26>
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	6033      	str	r3, [r6, #0]
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	0699      	lsls	r1, r3, #26
 8006f72:	bf42      	ittt	mi
 8006f74:	6833      	ldrmi	r3, [r6, #0]
 8006f76:	3302      	addmi	r3, #2
 8006f78:	6033      	strmi	r3, [r6, #0]
 8006f7a:	6825      	ldr	r5, [r4, #0]
 8006f7c:	f015 0506 	ands.w	r5, r5, #6
 8006f80:	d106      	bne.n	8006f90 <_printf_common+0x48>
 8006f82:	f104 0a19 	add.w	sl, r4, #25
 8006f86:	68e3      	ldr	r3, [r4, #12]
 8006f88:	6832      	ldr	r2, [r6, #0]
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	42ab      	cmp	r3, r5
 8006f8e:	dc2b      	bgt.n	8006fe8 <_printf_common+0xa0>
 8006f90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f94:	6822      	ldr	r2, [r4, #0]
 8006f96:	3b00      	subs	r3, #0
 8006f98:	bf18      	it	ne
 8006f9a:	2301      	movne	r3, #1
 8006f9c:	0692      	lsls	r2, r2, #26
 8006f9e:	d430      	bmi.n	8007002 <_printf_common+0xba>
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fa8:	47c8      	blx	r9
 8006faa:	3001      	adds	r0, #1
 8006fac:	d023      	beq.n	8006ff6 <_printf_common+0xae>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	6922      	ldr	r2, [r4, #16]
 8006fb2:	f003 0306 	and.w	r3, r3, #6
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	bf14      	ite	ne
 8006fba:	2500      	movne	r5, #0
 8006fbc:	6833      	ldreq	r3, [r6, #0]
 8006fbe:	f04f 0600 	mov.w	r6, #0
 8006fc2:	bf08      	it	eq
 8006fc4:	68e5      	ldreq	r5, [r4, #12]
 8006fc6:	f104 041a 	add.w	r4, r4, #26
 8006fca:	bf08      	it	eq
 8006fcc:	1aed      	subeq	r5, r5, r3
 8006fce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006fd2:	bf08      	it	eq
 8006fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	bfc4      	itt	gt
 8006fdc:	1a9b      	subgt	r3, r3, r2
 8006fde:	18ed      	addgt	r5, r5, r3
 8006fe0:	42b5      	cmp	r5, r6
 8006fe2:	d11a      	bne.n	800701a <_printf_common+0xd2>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	e008      	b.n	8006ffa <_printf_common+0xb2>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	4652      	mov	r2, sl
 8006fec:	4641      	mov	r1, r8
 8006fee:	4638      	mov	r0, r7
 8006ff0:	47c8      	blx	r9
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d103      	bne.n	8006ffe <_printf_common+0xb6>
 8006ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffe:	3501      	adds	r5, #1
 8007000:	e7c1      	b.n	8006f86 <_printf_common+0x3e>
 8007002:	2030      	movs	r0, #48	@ 0x30
 8007004:	18e1      	adds	r1, r4, r3
 8007006:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007010:	4422      	add	r2, r4
 8007012:	3302      	adds	r3, #2
 8007014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007018:	e7c2      	b.n	8006fa0 <_printf_common+0x58>
 800701a:	2301      	movs	r3, #1
 800701c:	4622      	mov	r2, r4
 800701e:	4641      	mov	r1, r8
 8007020:	4638      	mov	r0, r7
 8007022:	47c8      	blx	r9
 8007024:	3001      	adds	r0, #1
 8007026:	d0e6      	beq.n	8006ff6 <_printf_common+0xae>
 8007028:	3601      	adds	r6, #1
 800702a:	e7d9      	b.n	8006fe0 <_printf_common+0x98>

0800702c <_printf_i>:
 800702c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	7e0f      	ldrb	r7, [r1, #24]
 8007032:	4691      	mov	r9, r2
 8007034:	2f78      	cmp	r7, #120	@ 0x78
 8007036:	4680      	mov	r8, r0
 8007038:	460c      	mov	r4, r1
 800703a:	469a      	mov	sl, r3
 800703c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800703e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007042:	d807      	bhi.n	8007054 <_printf_i+0x28>
 8007044:	2f62      	cmp	r7, #98	@ 0x62
 8007046:	d80a      	bhi.n	800705e <_printf_i+0x32>
 8007048:	2f00      	cmp	r7, #0
 800704a:	f000 80d3 	beq.w	80071f4 <_printf_i+0x1c8>
 800704e:	2f58      	cmp	r7, #88	@ 0x58
 8007050:	f000 80ba 	beq.w	80071c8 <_printf_i+0x19c>
 8007054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007058:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800705c:	e03a      	b.n	80070d4 <_printf_i+0xa8>
 800705e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007062:	2b15      	cmp	r3, #21
 8007064:	d8f6      	bhi.n	8007054 <_printf_i+0x28>
 8007066:	a101      	add	r1, pc, #4	@ (adr r1, 800706c <_printf_i+0x40>)
 8007068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800706c:	080070c5 	.word	0x080070c5
 8007070:	080070d9 	.word	0x080070d9
 8007074:	08007055 	.word	0x08007055
 8007078:	08007055 	.word	0x08007055
 800707c:	08007055 	.word	0x08007055
 8007080:	08007055 	.word	0x08007055
 8007084:	080070d9 	.word	0x080070d9
 8007088:	08007055 	.word	0x08007055
 800708c:	08007055 	.word	0x08007055
 8007090:	08007055 	.word	0x08007055
 8007094:	08007055 	.word	0x08007055
 8007098:	080071db 	.word	0x080071db
 800709c:	08007103 	.word	0x08007103
 80070a0:	08007195 	.word	0x08007195
 80070a4:	08007055 	.word	0x08007055
 80070a8:	08007055 	.word	0x08007055
 80070ac:	080071fd 	.word	0x080071fd
 80070b0:	08007055 	.word	0x08007055
 80070b4:	08007103 	.word	0x08007103
 80070b8:	08007055 	.word	0x08007055
 80070bc:	08007055 	.word	0x08007055
 80070c0:	0800719d 	.word	0x0800719d
 80070c4:	6833      	ldr	r3, [r6, #0]
 80070c6:	1d1a      	adds	r2, r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6032      	str	r2, [r6, #0]
 80070cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070d4:	2301      	movs	r3, #1
 80070d6:	e09e      	b.n	8007216 <_printf_i+0x1ea>
 80070d8:	6833      	ldr	r3, [r6, #0]
 80070da:	6820      	ldr	r0, [r4, #0]
 80070dc:	1d19      	adds	r1, r3, #4
 80070de:	6031      	str	r1, [r6, #0]
 80070e0:	0606      	lsls	r6, r0, #24
 80070e2:	d501      	bpl.n	80070e8 <_printf_i+0xbc>
 80070e4:	681d      	ldr	r5, [r3, #0]
 80070e6:	e003      	b.n	80070f0 <_printf_i+0xc4>
 80070e8:	0645      	lsls	r5, r0, #25
 80070ea:	d5fb      	bpl.n	80070e4 <_printf_i+0xb8>
 80070ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070f0:	2d00      	cmp	r5, #0
 80070f2:	da03      	bge.n	80070fc <_printf_i+0xd0>
 80070f4:	232d      	movs	r3, #45	@ 0x2d
 80070f6:	426d      	negs	r5, r5
 80070f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070fc:	230a      	movs	r3, #10
 80070fe:	4859      	ldr	r0, [pc, #356]	@ (8007264 <_printf_i+0x238>)
 8007100:	e011      	b.n	8007126 <_printf_i+0xfa>
 8007102:	6821      	ldr	r1, [r4, #0]
 8007104:	6833      	ldr	r3, [r6, #0]
 8007106:	0608      	lsls	r0, r1, #24
 8007108:	f853 5b04 	ldr.w	r5, [r3], #4
 800710c:	d402      	bmi.n	8007114 <_printf_i+0xe8>
 800710e:	0649      	lsls	r1, r1, #25
 8007110:	bf48      	it	mi
 8007112:	b2ad      	uxthmi	r5, r5
 8007114:	2f6f      	cmp	r7, #111	@ 0x6f
 8007116:	6033      	str	r3, [r6, #0]
 8007118:	bf14      	ite	ne
 800711a:	230a      	movne	r3, #10
 800711c:	2308      	moveq	r3, #8
 800711e:	4851      	ldr	r0, [pc, #324]	@ (8007264 <_printf_i+0x238>)
 8007120:	2100      	movs	r1, #0
 8007122:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007126:	6866      	ldr	r6, [r4, #4]
 8007128:	2e00      	cmp	r6, #0
 800712a:	bfa8      	it	ge
 800712c:	6821      	ldrge	r1, [r4, #0]
 800712e:	60a6      	str	r6, [r4, #8]
 8007130:	bfa4      	itt	ge
 8007132:	f021 0104 	bicge.w	r1, r1, #4
 8007136:	6021      	strge	r1, [r4, #0]
 8007138:	b90d      	cbnz	r5, 800713e <_printf_i+0x112>
 800713a:	2e00      	cmp	r6, #0
 800713c:	d04b      	beq.n	80071d6 <_printf_i+0x1aa>
 800713e:	4616      	mov	r6, r2
 8007140:	fbb5 f1f3 	udiv	r1, r5, r3
 8007144:	fb03 5711 	mls	r7, r3, r1, r5
 8007148:	5dc7      	ldrb	r7, [r0, r7]
 800714a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800714e:	462f      	mov	r7, r5
 8007150:	42bb      	cmp	r3, r7
 8007152:	460d      	mov	r5, r1
 8007154:	d9f4      	bls.n	8007140 <_printf_i+0x114>
 8007156:	2b08      	cmp	r3, #8
 8007158:	d10b      	bne.n	8007172 <_printf_i+0x146>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	07df      	lsls	r7, r3, #31
 800715e:	d508      	bpl.n	8007172 <_printf_i+0x146>
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	6861      	ldr	r1, [r4, #4]
 8007164:	4299      	cmp	r1, r3
 8007166:	bfde      	ittt	le
 8007168:	2330      	movle	r3, #48	@ 0x30
 800716a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800716e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007172:	1b92      	subs	r2, r2, r6
 8007174:	6122      	str	r2, [r4, #16]
 8007176:	464b      	mov	r3, r9
 8007178:	4621      	mov	r1, r4
 800717a:	4640      	mov	r0, r8
 800717c:	f8cd a000 	str.w	sl, [sp]
 8007180:	aa03      	add	r2, sp, #12
 8007182:	f7ff fee1 	bl	8006f48 <_printf_common>
 8007186:	3001      	adds	r0, #1
 8007188:	d14a      	bne.n	8007220 <_printf_i+0x1f4>
 800718a:	f04f 30ff 	mov.w	r0, #4294967295
 800718e:	b004      	add	sp, #16
 8007190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	f043 0320 	orr.w	r3, r3, #32
 800719a:	6023      	str	r3, [r4, #0]
 800719c:	2778      	movs	r7, #120	@ 0x78
 800719e:	4832      	ldr	r0, [pc, #200]	@ (8007268 <_printf_i+0x23c>)
 80071a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	6831      	ldr	r1, [r6, #0]
 80071a8:	061f      	lsls	r7, r3, #24
 80071aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80071ae:	d402      	bmi.n	80071b6 <_printf_i+0x18a>
 80071b0:	065f      	lsls	r7, r3, #25
 80071b2:	bf48      	it	mi
 80071b4:	b2ad      	uxthmi	r5, r5
 80071b6:	6031      	str	r1, [r6, #0]
 80071b8:	07d9      	lsls	r1, r3, #31
 80071ba:	bf44      	itt	mi
 80071bc:	f043 0320 	orrmi.w	r3, r3, #32
 80071c0:	6023      	strmi	r3, [r4, #0]
 80071c2:	b11d      	cbz	r5, 80071cc <_printf_i+0x1a0>
 80071c4:	2310      	movs	r3, #16
 80071c6:	e7ab      	b.n	8007120 <_printf_i+0xf4>
 80071c8:	4826      	ldr	r0, [pc, #152]	@ (8007264 <_printf_i+0x238>)
 80071ca:	e7e9      	b.n	80071a0 <_printf_i+0x174>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	f023 0320 	bic.w	r3, r3, #32
 80071d2:	6023      	str	r3, [r4, #0]
 80071d4:	e7f6      	b.n	80071c4 <_printf_i+0x198>
 80071d6:	4616      	mov	r6, r2
 80071d8:	e7bd      	b.n	8007156 <_printf_i+0x12a>
 80071da:	6833      	ldr	r3, [r6, #0]
 80071dc:	6825      	ldr	r5, [r4, #0]
 80071de:	1d18      	adds	r0, r3, #4
 80071e0:	6961      	ldr	r1, [r4, #20]
 80071e2:	6030      	str	r0, [r6, #0]
 80071e4:	062e      	lsls	r6, r5, #24
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	d501      	bpl.n	80071ee <_printf_i+0x1c2>
 80071ea:	6019      	str	r1, [r3, #0]
 80071ec:	e002      	b.n	80071f4 <_printf_i+0x1c8>
 80071ee:	0668      	lsls	r0, r5, #25
 80071f0:	d5fb      	bpl.n	80071ea <_printf_i+0x1be>
 80071f2:	8019      	strh	r1, [r3, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	4616      	mov	r6, r2
 80071f8:	6123      	str	r3, [r4, #16]
 80071fa:	e7bc      	b.n	8007176 <_printf_i+0x14a>
 80071fc:	6833      	ldr	r3, [r6, #0]
 80071fe:	2100      	movs	r1, #0
 8007200:	1d1a      	adds	r2, r3, #4
 8007202:	6032      	str	r2, [r6, #0]
 8007204:	681e      	ldr	r6, [r3, #0]
 8007206:	6862      	ldr	r2, [r4, #4]
 8007208:	4630      	mov	r0, r6
 800720a:	f000 f859 	bl	80072c0 <memchr>
 800720e:	b108      	cbz	r0, 8007214 <_printf_i+0x1e8>
 8007210:	1b80      	subs	r0, r0, r6
 8007212:	6060      	str	r0, [r4, #4]
 8007214:	6863      	ldr	r3, [r4, #4]
 8007216:	6123      	str	r3, [r4, #16]
 8007218:	2300      	movs	r3, #0
 800721a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800721e:	e7aa      	b.n	8007176 <_printf_i+0x14a>
 8007220:	4632      	mov	r2, r6
 8007222:	4649      	mov	r1, r9
 8007224:	4640      	mov	r0, r8
 8007226:	6923      	ldr	r3, [r4, #16]
 8007228:	47d0      	blx	sl
 800722a:	3001      	adds	r0, #1
 800722c:	d0ad      	beq.n	800718a <_printf_i+0x15e>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	079b      	lsls	r3, r3, #30
 8007232:	d413      	bmi.n	800725c <_printf_i+0x230>
 8007234:	68e0      	ldr	r0, [r4, #12]
 8007236:	9b03      	ldr	r3, [sp, #12]
 8007238:	4298      	cmp	r0, r3
 800723a:	bfb8      	it	lt
 800723c:	4618      	movlt	r0, r3
 800723e:	e7a6      	b.n	800718e <_printf_i+0x162>
 8007240:	2301      	movs	r3, #1
 8007242:	4632      	mov	r2, r6
 8007244:	4649      	mov	r1, r9
 8007246:	4640      	mov	r0, r8
 8007248:	47d0      	blx	sl
 800724a:	3001      	adds	r0, #1
 800724c:	d09d      	beq.n	800718a <_printf_i+0x15e>
 800724e:	3501      	adds	r5, #1
 8007250:	68e3      	ldr	r3, [r4, #12]
 8007252:	9903      	ldr	r1, [sp, #12]
 8007254:	1a5b      	subs	r3, r3, r1
 8007256:	42ab      	cmp	r3, r5
 8007258:	dcf2      	bgt.n	8007240 <_printf_i+0x214>
 800725a:	e7eb      	b.n	8007234 <_printf_i+0x208>
 800725c:	2500      	movs	r5, #0
 800725e:	f104 0619 	add.w	r6, r4, #25
 8007262:	e7f5      	b.n	8007250 <_printf_i+0x224>
 8007264:	080073e7 	.word	0x080073e7
 8007268:	080073f8 	.word	0x080073f8

0800726c <memmove>:
 800726c:	4288      	cmp	r0, r1
 800726e:	b510      	push	{r4, lr}
 8007270:	eb01 0402 	add.w	r4, r1, r2
 8007274:	d902      	bls.n	800727c <memmove+0x10>
 8007276:	4284      	cmp	r4, r0
 8007278:	4623      	mov	r3, r4
 800727a:	d807      	bhi.n	800728c <memmove+0x20>
 800727c:	1e43      	subs	r3, r0, #1
 800727e:	42a1      	cmp	r1, r4
 8007280:	d008      	beq.n	8007294 <memmove+0x28>
 8007282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800728a:	e7f8      	b.n	800727e <memmove+0x12>
 800728c:	4601      	mov	r1, r0
 800728e:	4402      	add	r2, r0
 8007290:	428a      	cmp	r2, r1
 8007292:	d100      	bne.n	8007296 <memmove+0x2a>
 8007294:	bd10      	pop	{r4, pc}
 8007296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800729a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800729e:	e7f7      	b.n	8007290 <memmove+0x24>

080072a0 <_sbrk_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	2300      	movs	r3, #0
 80072a4:	4d05      	ldr	r5, [pc, #20]	@ (80072bc <_sbrk_r+0x1c>)
 80072a6:	4604      	mov	r4, r0
 80072a8:	4608      	mov	r0, r1
 80072aa:	602b      	str	r3, [r5, #0]
 80072ac:	f7fa ff1c 	bl	80020e8 <_sbrk>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d102      	bne.n	80072ba <_sbrk_r+0x1a>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	b103      	cbz	r3, 80072ba <_sbrk_r+0x1a>
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	20000400 	.word	0x20000400

080072c0 <memchr>:
 80072c0:	4603      	mov	r3, r0
 80072c2:	b510      	push	{r4, lr}
 80072c4:	b2c9      	uxtb	r1, r1
 80072c6:	4402      	add	r2, r0
 80072c8:	4293      	cmp	r3, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	d101      	bne.n	80072d2 <memchr+0x12>
 80072ce:	2000      	movs	r0, #0
 80072d0:	e003      	b.n	80072da <memchr+0x1a>
 80072d2:	7804      	ldrb	r4, [r0, #0]
 80072d4:	3301      	adds	r3, #1
 80072d6:	428c      	cmp	r4, r1
 80072d8:	d1f6      	bne.n	80072c8 <memchr+0x8>
 80072da:	bd10      	pop	{r4, pc}

080072dc <_realloc_r>:
 80072dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e0:	4680      	mov	r8, r0
 80072e2:	4615      	mov	r5, r2
 80072e4:	460c      	mov	r4, r1
 80072e6:	b921      	cbnz	r1, 80072f2 <_realloc_r+0x16>
 80072e8:	4611      	mov	r1, r2
 80072ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072ee:	f7ff bc47 	b.w	8006b80 <_malloc_r>
 80072f2:	b92a      	cbnz	r2, 8007300 <_realloc_r+0x24>
 80072f4:	f7ff fbda 	bl	8006aac <_free_r>
 80072f8:	2400      	movs	r4, #0
 80072fa:	4620      	mov	r0, r4
 80072fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007300:	f000 f81a 	bl	8007338 <_malloc_usable_size_r>
 8007304:	4285      	cmp	r5, r0
 8007306:	4606      	mov	r6, r0
 8007308:	d802      	bhi.n	8007310 <_realloc_r+0x34>
 800730a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800730e:	d8f4      	bhi.n	80072fa <_realloc_r+0x1e>
 8007310:	4629      	mov	r1, r5
 8007312:	4640      	mov	r0, r8
 8007314:	f7ff fc34 	bl	8006b80 <_malloc_r>
 8007318:	4607      	mov	r7, r0
 800731a:	2800      	cmp	r0, #0
 800731c:	d0ec      	beq.n	80072f8 <_realloc_r+0x1c>
 800731e:	42b5      	cmp	r5, r6
 8007320:	462a      	mov	r2, r5
 8007322:	4621      	mov	r1, r4
 8007324:	bf28      	it	cs
 8007326:	4632      	movcs	r2, r6
 8007328:	f7ff fbb2 	bl	8006a90 <memcpy>
 800732c:	4621      	mov	r1, r4
 800732e:	4640      	mov	r0, r8
 8007330:	f7ff fbbc 	bl	8006aac <_free_r>
 8007334:	463c      	mov	r4, r7
 8007336:	e7e0      	b.n	80072fa <_realloc_r+0x1e>

08007338 <_malloc_usable_size_r>:
 8007338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800733c:	1f18      	subs	r0, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	bfbc      	itt	lt
 8007342:	580b      	ldrlt	r3, [r1, r0]
 8007344:	18c0      	addlt	r0, r0, r3
 8007346:	4770      	bx	lr

08007348 <_init>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr

08007354 <_fini>:
 8007354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007356:	bf00      	nop
 8007358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800735a:	bc08      	pop	{r3}
 800735c:	469e      	mov	lr, r3
 800735e:	4770      	bx	lr
